{"version":3,"file":"component---src-sections-projects-sistent-components-text-field-guidance-js-78f590d804116cc0f4fa.js","mappings":"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","sources":["webpack://Layer5/./src/sections/Projects/Sistent/components/text-field/guidance.js","webpack://Layer5/./src/components/SistentNavigation/intra-page.js","webpack://Layer5/./src/sections/Projects/Sistent/sistent-layout.js"],"sourcesContent":["import React from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\nimport { Box, SistentThemeProvider, TextField } from \"@sistent/sistent\";\nimport { SistentLayout } from \"../../sistent-layout\";\n\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\n\nconst TextFieldGuidance = () => {\n  const location = useLocation();\n  const { isDark } = useStyledDarkMode();\n\n  return (\n    <SistentLayout title=\"TextField\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>Text Field</h2>\n        </a>\n        <p>\n          The TextField component is a versatile input field used to capture\n          user input in forms and user interfaces. It can handle a variety of\n          input types, such as text, numbers, emails, and passwords, and offers\n          built-in styling and validation features.\n        </p>\n        <div className=\"filterBtns\">\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/text-field\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/text-field\")}\n            title=\"Overview\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n              \"/projects/sistent/components/text-field/guidance\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/text-field/guidance\")\n            }\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n              \"/projects/sistent/components/text-field/code\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/text-field/code\")\n            }\n            title=\"Code\"\n          />\n        </div>\n        <div className=\"main-content\">\n          <p>\n            For proper application, these TextField can be used for different\n            purposes. It can be effectively used in any project to increase User\n            Interaction. Lets see how can we use TextField effectively in our\n            project.\n          </p>\n          <a id=\"Basic TextField\">\n            <h2>Basic TextField</h2>\n          </a>\n          <p>\n            The TextField wrapper component is a complete form control including\n            a label, variant, helper text etc. TextField comes with three\n            variants: outlined (default), filled, and standard.\n          </p>\n          <h3>Outlined (default)</h3>\n          <p>\n            Outlined TextField are TextField that do not have a fill, but have a\n            border or stroke to define its bounding box as well as a text label\n            to convey a thought for users to take action upon. Colors can also\n            be used to style these buttons in order to fit into the theme align\n            with brand guidelines.\n          </p>\n          <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n            <Box\n              component=\"form\"\n              sx={{ \"& .MuiTextField-root\": { m: 1, width: \"25ch\" } }}\n              noValidate\n              autoComplete=\"off\"\n            >\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Outlined\"\n                variant=\"outlined\"\n              />\n            </Box>\n          </SistentThemeProvider>\n          <h3>Filled</h3>\n          <p>\n            Filled TextField are TextField that consist a background color fill\n            and a text in it. Depending on the theme or intended action, the\n            color fill can range from a primary brand color to any other\n            applicable color in a brandâ€™s color palette.\n          </p>\n          <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n            <Box\n              component=\"form\"\n              sx={{ \"& .MuiTextField-root\": { m: 1, width: \"25ch\" } }}\n              noValidate\n              autoComplete=\"off\"\n            >\n              <TextField variant=\"filled\" label=\"Filled\" id=\"filled-basic\" />\n            </Box>\n          </SistentThemeProvider>\n          <h3>Standard</h3>\n          <p>\n            Standard TextField are TextField that do not have background color\n            fill and a text in it. Colors can also be used to style these\n            buttons in order to fit into the theme align with brand guidelines.\n          </p>\n          <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n            <Box\n              component=\"form\"\n              sx={{ \"& .MuiTextField-root\": { m: 1, width: \"25ch\" } }}\n              noValidate\n              autoComplete=\"off\"\n            >\n              <TextField\n                id=\"standard-basic\"\n                label=\"Standard\"\n                variant=\"standard\"\n              />\n            </Box>\n          </SistentThemeProvider>\n          <a id=\"When to use different properties?\">\n            <h2>When to use different properties?</h2>\n          </a>\n          <p>\n            You might come across in a situation you needed some helper text,\n            field with number, disabled field etc. Let's see different\n            properties availble for TextField.\n          </p>\n          <h3>Type prop</h3>\n          <p>Type prop can have a value such as password, number or text.</p>\n          <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n            <Box\n              component=\"form\"\n              sx={{ \"& .MuiTextField-root\": { m: 1, width: \"25ch\" } }}\n              noValidate\n              autoComplete=\"off\"\n            >\n              <div>\n                <TextField\n                  id=\"outlined-password-input\"\n                  label=\"Password\"\n                  type=\"password\"\n                  autoComplete=\"current-password\"\n                />\n                <TextField id=\"outlined-number\" label=\"Number\" type=\"number\" />\n                <TextField id=\"outlined-text\" label=\"Text\" type=\"text\" />\n              </div>\n            </Box>\n          </SistentThemeProvider>\n          <h3>Helper Text</h3>\n          <p>\n            Helper text also very effective for your form or for better\n            understanding.\n          </p>\n          <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n            <Box\n              component=\"form\"\n              sx={{ \"& .MuiTextField-root\": { m: 1, width: \"25ch\" } }}\n              noValidate\n              autoComplete=\"off\"\n            >\n              <div>\n                <TextField\n                  id=\"outlined-text\"\n                  label=\"Text\"\n                  type=\"text\"\n                  helperText=\"This is helper text\"\n                />\n              </div>\n            </Box>\n          </SistentThemeProvider>\n          <h3>Error</h3>\n          <p>\n            Error handling is very important for UI. User might come in\n            sitatution where they enter invalid value or forget to enter any\n            data in TextField. Here come error prop helps to indicate partucular\n            field are required or user have entered invalid value.\n          </p>\n          <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n            <Box\n              component=\"form\"\n              sx={{ \"& .MuiTextField-root\": { m: 1, width: \"25ch\" } }}\n              noValidate\n              autoComplete=\"off\"\n            >\n              <div>\n                <TextField\n                  error\n                  id=\"outlined-error\"\n                  label=\"Error\"\n                  defaultValue=\"Hello World\"\n                />\n              </div>\n            </Box>\n          </SistentThemeProvider>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default TextFieldGuidance;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\nconst JoinCommunityWrapper = styled.div`\n  width: 18rem;\n\n  @media screen and (max-width: 750px) {\n    display: none;\n  }\n\n  @media screen and (min-width: 751px) and (max-width: 1279px) {\n    display: none;\n  }\n  .intra-page {\n    position: sticky;\n    top: 10rem;\n    right: 0rem;\n    margin-right: 1rem;\n    padding-bottom: 5rem;\n    padding-right: 2rem;\n    align-items: left;\n    justify-content: space-around;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .list {\n      color: #000000;\n    }\n    .active {\n      font-weight: 5000;\n      color: #000000;\n    }\n\n    ul {\n      list-style: none;\n      top: 3rem;\n      li {\n        padding-bottom: 0.5rem;\n        padding-top: 0.5rem;\n      }\n    }\n    @media only screen and (min-width: 1280px) and (max-width: 1350px) {\n      padding-right: 0rem;\n      margin-right: 0rem;\n    }\n    @media only screen and (max-width: 950px) {\n      width: 0;\n      opacity: 0;\n      height: 0;\n      transition: none;\n      visibility: hidden;\n    }\n  }\n\n  .learn {\n    width: 10rem;\n  }\n`;\n\nfunction IntraPage() {\n  const [contents, setContents] = useState([]);\n\n  useEffect(() => {\n    const anchors = document.querySelectorAll(\".main-content > a\");\n    console.log(anchors);\n    if (anchors) {\n      setContents(\n        Array.from(anchors).map((a) => ({\n          id: a.id,\n          link: `#${a.id}`,\n          text: a.id,\n        }))\n      );\n    }\n  }, []);\n\n  const [intapath, setIntapath] = useState(null);\n  useEffect(() => {\n    const path = window.location.pathname;\n    setIntapath(path);\n  }, []);\n\n  return (\n    <JoinCommunityWrapper>\n      <div className=\"intra-page\">\n        <ul>\n          {contents.map((x) => (\n            <li key={x.id} className=\"list\">\n              <Link\n                to={`${intapath}${x.link}`}\n                key={x.id}\n                activeClassName=\"active\"\n              >\n                {x.text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </JoinCommunityWrapper>\n  );\n}\n\nexport default IntraPage;\n","import React from \"react\";\nimport SistentWrapper from \"./sistent.style\";\nimport TOC from \"../../../components/SistentNavigation\";\nimport { Container } from \"../../../reusecore/Layout\";\nimport SistentPagination from \"../../../components/SistentNavigation/pagination\";\nimport IntraPage from \"../../../components/SistentNavigation/intra-page\";\n\nexport const SistentLayout = ({ title, children }) => {\n  return (\n    <SistentWrapper>\n      <div className=\"page-header-section\">\n        <h1>{title}</h1>\n      </div>\n      <TOC />\n      <div className=\"page-section\">\n        <Container>\n          {children} <SistentPagination />\n        </Container>\n        <IntraPage />\n      </div>\n    </SistentWrapper>\n  );\n};\n"],"names":["TextFieldGuidance","location","useLocation","isDark","useStyledDarkMode","React","SistentLayout","title","className","id","TabButton","pathname","onClick","navigate","SistentThemeProvider","initialMode","Box","component","sx","m","width","noValidate","autoComplete","TextField","label","variant","type","helperText","error","defaultValue","JoinCommunityWrapper","styled","div","withConfig","displayName","componentId","contents","setContents","useState","useEffect","anchors","document","querySelectorAll","console","log","Array","from","map","a","link","text","intapath","setIntapath","path","window","x","key","Link","to","activeClassName","_ref","children","SistentWrapper","TOC","Container","SistentPagination","IntraPage"],"sourceRoot":""}