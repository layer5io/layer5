{"version":3,"file":"component---src-sections-projects-sistent-components-switch-guidance-js-ef379ad690c838f0df15.js","mappings":"uMAyIA,UA5HuBA,KACrB,MAAMC,GAAWC,EAAAA,EAAAA,gBACX,OAAEC,IAAWC,EAAAA,EAAAA,KAEnB,OACEC,EAAAA,cAACC,EAAAA,EAAa,CAACC,MAAM,UACnBF,EAAAA,cAAA,OAAKG,UAAU,WACbH,EAAAA,cAAA,KAAGI,GAAG,YACJJ,EAAAA,cAAA,UAAI,WAENA,EAAAA,cAAA,SAAG,0LAMHA,EAAAA,cAAA,OAAKG,UAAU,cACbH,EAAAA,cAACK,EAAAA,QAAS,CACRF,UACwB,wCAAtBP,EAASU,SACL,SACA,GAENC,QAASA,KAAMC,EAAAA,EAAAA,UAAS,uCACxBN,MAAM,aAERF,EAAAA,cAACK,EAAAA,QAAS,CACRF,UAEE,iDADAP,EAASU,SAEL,SACA,GAENC,QAASA,KACPC,EAAAA,EAAAA,UAAS,gDAEXN,MAAM,aAERF,EAAAA,cAACK,EAAAA,QAAS,CACRF,UACwB,6CAAtBP,EAASU,SACL,SACA,GAENC,QAASA,KAAMC,EAAAA,EAAAA,UAAS,4CACxBN,MAAM,UAIVF,EAAAA,cAAA,OAAKG,UAAU,gBAEbH,EAAAA,cAAA,KAAGI,GAAG,YACJJ,EAAAA,cAAA,UAAI,aAGNA,EAAAA,cAAA,UAAI,wBACJA,EAAAA,cAAA,SAAG,iMAKHA,EAAAA,cAACS,EAAAA,GAAG,CAACC,UAAQ,EAACP,UAAU,mBACtBH,EAAAA,cAACW,EAAAA,qBAAoB,CAACC,YAAad,EAAS,OAAS,SACnDE,EAAAA,cAACa,EAAAA,OAAM,CAACC,SAAO,MAInBd,EAAAA,cAAA,UAAI,kBACJA,EAAAA,cAAA,SAAG,qJAKHA,EAAAA,cAACS,EAAAA,GAAG,CAACC,UAAQ,EAACP,UAAU,mBACtBH,EAAAA,cAACW,EAAAA,qBAAoB,CAACC,YAAad,EAAS,OAAS,SACnDE,EAAAA,cAACa,EAAAA,OAAM,CAACC,SAAS,EAAOC,UAAQ,MAIpCf,EAAAA,cAAA,KAAGI,GAAG,YACJJ,EAAAA,cAAA,UAAI,aAENA,EAAAA,cAAA,SAAG,2DACuDA,EAAAA,cAAA,YAAM,oBAAuB,gEAGvFA,EAAAA,cAACS,EAAAA,GAAG,CAACC,UAAQ,EAACP,UAAU,mBACtBH,EAAAA,cAACW,EAAAA,qBAAoB,CAACC,YAAad,EAAS,OAAS,SACnDE,EAAAA,cAACgB,EAAAA,iBAAgB,CACfC,QACEjB,EAAAA,cAACa,EAAAA,OAAM,CACLC,SAAS,EACTI,WAAY,CAAE,aAAc,sBAGhCC,MAAM,uBAKZnB,EAAAA,cAAA,UAAI,mBACJA,EAAAA,cAAA,SAAG,+LAMHA,EAAAA,cAAA,KAAGI,GAAG,UACJJ,EAAAA,cAAA,UAAI,WAENA,EAAAA,cAAA,SAAG,qEACiEA,EAAAA,cAAA,YAAM,gBAAmB,qHAE7FA,EAAAA,cAACS,EAAAA,GAAG,CAACC,UAAQ,EAACP,UAAU,mBACtBH,EAAAA,cAACW,EAAAA,qBAAoB,CAACC,YAAad,EAAS,OAAS,SACnDE,EAAAA,cAACa,EAAAA,OAAM,CAACO,KAAK,QAAQN,SAAS,QAKxB,C","sources":["webpack://Layer5/./src/sections/Projects/Sistent/components/switch/guidance.js"],"sourcesContent":["import React from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\nimport { Row } from \"../../../../../reusecore/Layout\";\nimport {\n  SistentThemeProvider,\n  Switch,\n  FormControlLabel,\n} from \"@sistent/sistent\";\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\nimport { SistentLayout } from \"../../sistent-layout\";\n\nconst SwitchGuidance = () => {\n  const location = useLocation();\n  const { isDark } = useStyledDarkMode();\n\n  return (\n    <SistentLayout title=\"Switch\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>Switch</h2>\n        </a>\n        <p>\n          The Switch is a toggle component used to instantly turn\n          features on or off. Its binary nature makes it ideal for\n          preferences and settings panels where real-time toggling is expected.\n        </p>\n\n        <div className=\"filterBtns\">\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/switch\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/switch\")}\n            title=\"Overview\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n              \"/projects/sistent/components/switch/guidance\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/switch/guidance\")\n            }\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/switch/code\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/switch/code\")}\n            title=\"Code\"\n          />\n        </div>\n\n        <div className=\"main-content\">\n\n          <a id=\"Function\">\n            <h2>Function</h2>\n          </a>\n\n          <h3>State Representation</h3>\n          <p>\n            A Switch reflects its state visually, using a track and thumb\n            indicator. When toggled, the thumb slides across the track to\n            communicate the new value. This feedback is direct and immediate.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <Switch checked />\n            </SistentThemeProvider>\n          </Row>\n\n          <h3>State Variants</h3>\n          <p>\n            A Switch can be active, inactive, or disabled. Use the disabled\n            state to communicate unavailable features or settings that require\n            prerequisites.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <Switch checked={false} disabled />\n            </SistentThemeProvider>\n          </Row>\n\n          <a id=\"Labeling\">\n            <h2>Labeling</h2>\n          </a>\n          <p>\n            Every Switch should be paired with a visible label. Use <code>FormControlLabel</code> to\n            visually bind labels to toggles for clarity and context.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={true}\n                    inputProps={{ \"aria-label\": \"Enable dark mode\" }}\n                  />\n                }\n                label=\"Enable Dark Mode\"\n              />\n            </SistentThemeProvider>\n          </Row>\n\n          <h3>Label Placement</h3>\n          <p>\n            Labels can be placed beside the Switch horizontally. For forms or\n            settings pages, maintaining vertical spacing with consistent margins\n            is recommended to improve readability and alignment.\n          </p>\n\n          <a id=\"Sizing\">\n            <h2>Sizing</h2>\n          </a>\n          <p>\n            The default Switch size is medium, which fits most use cases. Use <code>size=\"small\"</code> when you have limited space or need to place toggles inside compact UI elements like tables, cards, or toolbars.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <Switch size=\"small\" checked={false} />\n            </SistentThemeProvider>\n          </Row>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default SwitchGuidance;"],"names":["SwitchGuidance","location","useLocation","isDark","useStyledDarkMode","React","SistentLayout","title","className","id","TabButton","pathname","onClick","navigate","Row","$Hcenter","SistentThemeProvider","initialMode","Switch","checked","disabled","FormControlLabel","control","inputProps","label","size"],"sourceRoot":""}