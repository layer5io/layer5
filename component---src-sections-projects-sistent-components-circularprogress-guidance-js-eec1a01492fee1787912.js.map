{"version":3,"file":"component---src-sections-projects-sistent-components-circularprogress-guidance-js-eec1a01492fee1787912.js","mappings":"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","sources":["webpack://Layer5/./src/components/SistentNavigation/intra-page.js","webpack://Layer5/./src/sections/Projects/Sistent/sistent-layout.js","webpack://Layer5/./src/sections/Projects/Sistent/components/circularprogress/guidance.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\nconst JoinCommunityWrapper = styled.div`\n  width: 18rem;\n\n  @media screen and (max-width: 750px) {\n    display: none;\n  }\n\n  @media screen and (min-width: 751px) and (max-width: 1279px) {\n    display: none;\n  }\n  .intra-page {\n    position: sticky;\n    top: 10rem;\n    right: 0rem;\n    margin-right: 1rem;\n    padding-bottom: 5rem;\n    padding-right: 2rem;\n    align-items: left;\n    justify-content: space-around;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .list {\n      color: #000000;\n    }\n    .active {\n      font-weight: 5000;\n      color: #000000;\n    }\n\n    ul {\n      list-style: none;\n      top: 3rem;\n      li {\n        padding-bottom: 0.5rem;\n        padding-top: 0.5rem;\n      }\n    }\n    @media only screen and (min-width: 1280px) and (max-width: 1350px) {\n      padding-right: 0rem;\n      margin-right: 0rem;\n    }\n    @media only screen and (max-width: 950px) {\n      width: 0;\n      opacity: 0;\n      height: 0;\n      transition: none;\n      visibility: hidden;\n    }\n  }\n\n  .learn {\n    width: 10rem;\n  }\n`;\n\nfunction IntraPage() {\n  const [contents, setContents] = useState([]);\n\n  useEffect(() => {\n    const anchors = document.querySelectorAll(\".main-content > a\");\n    console.log(anchors);\n    if (anchors) {\n      setContents(\n        Array.from(anchors).map((a) => ({\n          id: a.id,\n          link: `#${a.id}`,\n          text: a.id,\n        }))\n      );\n    }\n  }, []);\n\n  const [intapath, setIntapath] = useState(null);\n  useEffect(() => {\n    const path = window.location.pathname;\n    setIntapath(path);\n  }, []);\n\n  return (\n    <JoinCommunityWrapper>\n      <div className=\"intra-page\">\n        <ul>\n          {contents.map((x) => (\n            <li key={x.id} className=\"list\">\n              <Link\n                to={`${intapath}${x.link}`}\n                key={x.id}\n                activeClassName=\"active\"\n              >\n                {x.text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </JoinCommunityWrapper>\n  );\n}\n\nexport default IntraPage;\n","import React from \"react\";\nimport SistentWrapper from \"./sistent.style\";\nimport TOC from \"../../../components/SistentNavigation\";\nimport { Container } from \"../../../reusecore/Layout\";\nimport SistentPagination from \"../../../components/SistentNavigation/pagination\";\nimport IntraPage from \"../../../components/SistentNavigation/intra-page\";\n\nexport const SistentLayout = ({ title, children }) => {\n  return (\n    <SistentWrapper>\n      <div className=\"page-header-section\">\n        <h1>{title}</h1>\n      </div>\n      <TOC />\n      <div className=\"page-section\">\n        <Container>\n          {children} <SistentPagination />\n        </Container>\n        <IntraPage />\n      </div>\n    </SistentWrapper>\n  );\n};\n","import React, { useState } from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\nimport { SistentLayout } from \"../../sistent-layout\";\nimport { SistentThemeProvider, Button, CircularProgress } from \"@sistent/sistent\";\nimport { Row } from \"../../../../../reusecore/Layout\";\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\n\nconst CircularprogressGuidance = () => {\n  const { isDark } = useStyledDarkMode();\n  const location = useLocation();\n\n  const [size, setSize] = useState(40); // default size\n  const [thickness, setThickness] = useState(4); // default thickness\n  const [currentColor, setCurrentColor] = useState(\"primary\"); // default color\n  const maxSize = 80;\n  const minSize = 20;\n  const maxThickness = 10;\n  const minThickness = 1;\n  const colors = [\"primary\", \"secondary\", \"success\", \"error\", \"warning\", \"info\"];\n\n  return (\n    <SistentLayout title=\"Circular Progress\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>Circular Progress</h2>\n        </a>\n        <p>\n          The Circular Progress component displays a circular loading indicator that represents\n          either determinate or indeterminate progress in your application. It's commonly used\n          to show loading states, progress of operations, or completion percentages.\n        </p>\n        <div className=\"filterBtns\">\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/circularprogress\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/circularprogress\")}\n            title=\"Overview\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n                \"/projects/sistent/components/circularprogress/guidance\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/circularprogress/guidance\")\n            }\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/circularprogress/code\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/circularprogress/code\")}\n            title=\"Code\"\n          />\n        </div>\n        <div className=\"main-content\">\n          <p>\n            Proper usage of the Circular Progress component can enhance user experience by visually indicating progress status. Below are some guidelines to ensure effective implementation.\n          </p>\n\n          <a id=\"Usage\">\n            <h2>Usage</h2>\n          </a>\n          <p>\n            To use the Circular Progress component, include it in your layout with the desired <code>variant</code> prop to specify whether it should be determinate or indeterminate. For example:\n          </p>\n          <ul>\n            <li><code>variant=\"indeterminate\"</code> for continuous loading.</li>\n            <li><code>variant=\"determinate\"</code> for specific progress indication.</li>\n          </ul>\n          <p>\n            The <code>value</code> prop is required for determinate progress to indicate how far along the task is, ranging from 0 to 100.\n          </p>\n          <br />\n          <a id=\"Sizing\">\n            <h3>Sizing</h3>\n          </a>\n          <p>\n            Adjust the size of the Circular Progress component using the <code>size</code> prop. For example, set <code>size={60}</code> to increase the diameter of the circular loader.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <CircularProgress size={size} />\n              <div style={{ marginLeft: \"20px\", display: \"flex\", gap: \"10px\" }}>\n                <Button\n                  variant=\"contained\"\n                  label=\"Decrease Size\"\n                  size=\"medium\"\n                  onClick={() => {\n                    if (size > minSize) {\n                      setSize(size - 10);\n                    }\n                  }}\n                  disabled={size <= minSize}\n                />\n                <Button\n                  variant=\"contained\"\n                  label=\"Increase Size\"\n                  size=\"medium\"\n                  onClick={() => {\n                    if (size < maxSize) {\n                      setSize(size + 10);\n                    }\n                  }}\n                  disabled={size >= maxSize}\n                />\n              </div>\n            </SistentThemeProvider>\n          </Row>\n\n          <br />\n          <a id=\"Thickness\">\n            <h3>Thickness</h3>\n          </a>\n          <p>\n            Control the thickness of the circular progress arc using the <code>thickness</code> prop. This allows for customization of the loader's appearance. For instance:\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <CircularProgress thickness={thickness} />\n              <div style={{ marginLeft: \"20px\", display: \"flex\", gap: \"10px\" }}>\n                <Button\n                  variant=\"contained\"\n                  label=\"Decrease Thickness\"\n                  size=\"medium\"\n                  onClick={() => {\n                    if (thickness > minThickness) {\n                      setThickness(thickness - 1);\n                    }\n                  }}\n                  disabled={thickness <= minThickness}\n                />\n                <Button\n                  variant=\"contained\"\n                  label=\"Increase Thickness\"\n                  size=\"medium\"\n                  onClick={() => {\n                    if (thickness < maxThickness) {\n                      setThickness(thickness + 1);\n                    }\n                  }}\n                  disabled={thickness >= maxThickness}\n                />\n              </div>\n            </SistentThemeProvider>\n          </Row>\n\n          <br />\n          <a id=\"Colors\">\n            <h3>Colors</h3>\n          </a>\n          <p>\n            Customize the color of the Circular Progress component using the <code>color</code> prop. Available colors include primary, secondary, success, error, warning, and info to match your design system.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <CircularProgress color={currentColor} />\n              <div style={{ marginLeft: \"20px\", display: \"flex\", gap: \"10px\", flexWrap: \"wrap\" }}>\n                {colors.map((color) => (\n                  <Button\n                    key={color}\n                    variant={currentColor === color ? \"contained\" : \"outlined\"}\n                    label={color.charAt(0).toUpperCase() + color.slice(1)}\n                    size=\"small\"\n                    onClick={() => setCurrentColor(color)}\n                  />\n                ))}\n              </div>\n            </SistentThemeProvider>\n          </Row>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default CircularprogressGuidance;"],"names":["JoinCommunityWrapper","styled","div","withConfig","displayName","componentId","contents","setContents","useState","useEffect","anchors","document","querySelectorAll","console","log","Array","from","map","a","id","link","text","intapath","setIntapath","path","window","location","pathname","React","className","x","key","Link","to","activeClassName","SistentLayout","_ref","title","children","SistentWrapper","TOC","Container","SistentPagination","IntraPage","CircularprogressGuidance","isDark","useStyledDarkMode","useLocation","size","setSize","thickness","setThickness","currentColor","setCurrentColor","TabButton","onClick","navigate","Row","$Hcenter","SistentThemeProvider","initialMode","CircularProgress","style","marginLeft","display","gap","Button","variant","label","disabled","color","flexWrap","charAt","toUpperCase","slice"],"sourceRoot":""}