/* eslint-disable indent */
import React, { useState, useEffect } from "react";
import { Box, Card, CardContent, CardHeader, Typography, FormControl, InputLabel, Select, MenuItem, Slider, Switch, FormControlLabel, Chip, Container, Paper, SistentThemeProvider, CssBaseline, useTheme
} from "@sistent/sistent";
import { Calculate, CheckCircle } from "@mui/icons-material";
import { useStyledDarkMode } from "../../theme/app/useStyledDarkMode";
import { academyPlans, getAddOns } from "./pricingData";
import FeatureDetails from "../PlanCard/collapsible-details";
import PlanCardWrapper from "../PlanCard/planCard.style";

export const PricingAddons = ({ isYearly = false }) => {
  const [selectedAddon, setSelectedAddon] = useState(null);
  const [quantity, setQuantity] = useState(1);
  const [selectedSubAddOns, setSelectedSubAddOns] = useState({}); // Track selected sub-addons by ID
  const [totalPrice, setTotalPrice] = useState(0);
  const [quantityIndex, setQuantityIndex] = useState(0);

  const { isDark } = useStyledDarkMode();
  const theme = useTheme();

  const addOns = getAddOns(theme);

  useEffect(() => {
    if (selectedAddon) {
      let baseTotal = 0;
      if (selectedAddon.id === "academy") {
        // For academy, use the learner options pricing
        const currentLearnerOption = academyPlans[quantityIndex];
        const monthlyPerUserCost = currentLearnerOption.monthlyPerUser;
        const yearlyPerUserCost = currentLearnerOption.yearlyPerUser;
        baseTotal = isYearly
          ? yearlyPerUserCost * currentLearnerOption.learners
          : monthlyPerUserCost * currentLearnerOption.learners;
      } else {
        // For other addons, use the standard pricing
        const addonPrice = isYearly ? selectedAddon.yearlyPrice : selectedAddon.monthlyPrice;
        baseTotal = addonPrice * quantity;
      }

      // Handle Academy Sub-AddOns (any selected sub-addons)
      let subAddOnTotal = 0;
      if (selectedAddon?.id === "academy" && selectedAddon.subAddOns) {
        selectedAddon.subAddOns.forEach(subAddOn => {
          if (selectedSubAddOns[subAddOn.id]) {
            const subAddOnPrice = isYearly ? subAddOn.yearlyPrice : subAddOn.monthlyPrice;
            if (subAddOnPrice) {
              subAddOnTotal += subAddOnPrice;
            }
          }
        });
      }

      setTotalPrice(baseTotal + subAddOnTotal);
    } else {
      setTotalPrice(0);
    }
  }, [selectedAddon, quantity, quantityIndex, selectedSubAddOns, isYearly]);

  const handleAddonChange = (addonId) => {
    const addon = addOns.find((a) => a.id === addonId);
    setSelectedAddon(addon || null);
    setQuantity(1);
    setSelectedSubAddOns({}); // Reset sub-addons when changing main addon
  };

  const handleSubAddOnToggle = (subAddOnId, isChecked) => {
    setSelectedSubAddOns(prev => ({
      ...prev,
      [subAddOnId]: isChecked
    }));
  };


  const formatPrice = (price) => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(price);
  };

  return (
    <SistentThemeProvider initialMode={isDark ? "dark" : "light"}>
      <CssBaseline />

      <Container maxWidth="lg" sx={{ my: 4 }}>
        <PlanCardWrapper>
          <Card
            elevation={0}
            sx={{
              maxWidth: 800,
              mx: "auto",
              border: "1px solid",
              borderColor: "primary.main",
              borderRadius: 3,
            }}
          >
            <CardHeader
              avatar={<Calculate color="primary" sx={{ fontSize: 32, color: theme.palette.background.secondary }} />}
              title={
                <Typography variant="h4" component="h4" fontWeight="bold" sx={{ fontSize: 18 }}>
              Enterprise Add-ons
                </Typography>
              }
              // subheader={
              //   <Typography variant="body1" color="text.secondary" sx={{ mt: 1, fontStyle: "italic" }}>
              //   Optionally, configure enterprise add-ons.
              //   </Typography>
              // }
              sx={{
                background: "linear-gradient(135deg, rgba(0, 179, 159, 0.05) 0%, rgba(0, 179, 159, 0.1) 100%)",
                borderBottom: "1px solid",
                borderColor: "divider",
              }}
            />

            <CardContent sx={{ p: 4 }}>
              <Box sx={{ display: "flex", flexDirection: "column", gap: 4 }}>
                {/* Add-on Selection */}
                <Box>
                  {/* <Typography variant="h6" gutterBottom fontWeight="600">
                Select Add-on
                </Typography> */}
                  <FormControl fullWidth>
                    <InputLabel>Optionally, choose one or more add-ons</InputLabel>
                    <Select
                      value={selectedAddon?.id || ""}
                      onChange={(e) => handleAddonChange(e.target.value)}
                      label="Optionally, choose one or more add-ons"
                    >
                      {addOns.map((addon) => (
                        <MenuItem key={addon.id} value={addon.id}>
                          <Box sx={{ display: "flex", alignItems: "center", gap: 2, py: 1 }}>
                            {addon.icon}
                            <Box>
                              <Typography variant="body1" fontWeight="500">
                                {addon.name}
                              </Typography>
                              <Typography variant="body2" color="text.secondary" sx={{ fontStyle: "italic" }}>
                                {addon.id === "academy"
                                  ? addon.description
                                  : (() => {
                                      const period = isYearly ? "/year" : "/month";
                                      return `${formatPrice(isYearly ? addon.yearlyPrice : addon.monthlyPrice)} per ${addon.unitLabel.slice(0, -1)}${period}`;
                                    })()
                                }
                              </Typography>
                            </Box>
                          </Box>
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>

{/* SELECTED ADD-ON DETAILS */}
      {selectedAddon?.id === "academy" && (
      <>
      <Box className="pricing-features" sx={{ marginTop: "-2rem" }}>
        {selectedAddon.subAddOns?.map((subAddOn) => (
          <FormControlLabel
            key={subAddOn.id}
            control={<Switch
              checked={selectedSubAddOns[subAddOn.id] || false}
              onChange={(e) => handleSubAddOnToggle(subAddOn.id, e.target.checked)}
              color="primary" />}
            label={subAddOn.name}
            sx={{ mb: 2, display: "block" }}
          />
        ))}
        <Box className="feature">
            <FeatureDetails
              category={selectedAddon.name}
              description={selectedAddon.description}
            >
              <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1, mt: 1 }}>
                {selectedAddon.features.map((feature, index) => (
                  <Chip
                    key={`main-${index}`}
                    icon={<CheckCircle sx={{ fontSize: 12 }} />}
                    label={feature}
                    size="small"
                    sx={{
                      backgroundColor: "transparent",
                      color: "text.primary",
                      "& .MuiChip-icon": { color: "primary.light" },
                    }} />
                ))}

                {/* Show features from selected subAddOns */}
                {selectedAddon.subAddOns?.map((subAddOn) => (
                  selectedSubAddOns[subAddOn.id] && subAddOn.features?.map((feature, index) => (
                    <Chip
                      key={`${subAddOn.id}-${index}`}
                      icon={<CheckCircle sx={{ fontSize: 12 }} />}
                      label={feature}
                      size="small"
                      sx={{
                        backgroundColor: "rgba(0, 179, 159, 0.15)",
                        color: "text.primary",
                        "& .MuiChip-icon": { color: "primary.light" },
                        border: "1px solid",
                        borderColor: "primary.light"
                      }} />
                  ))
                ))}
              </Box>
              </FeatureDetails>
            </Box>
          </Box>
        </>
      )}
      </Box>


{/* OTHERS PLANS */}

    {selectedAddon?.id !== "academy" && (
      <>
        {/* Quantity Slider */}
        <Box>
          <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", mb: 2 }}>
            <Typography variant="h6" fontWeight="600" sx={{ fontSize: "1.1rem" }}>
              <Box component="span" sx={{ fontWeight: "normal" }}></Box> {selectedAddon?.id === "academy" ? academyPlans[quantityIndex].learners : quantity} {selectedAddon?.unitLabel}
            </Typography>
            <Slider
              value={quantityIndex}
              onChange={(event, newValue) => setQuantityIndex(newValue)}
              min={0}
              valueLabelDisplay="auto"
              valueLabelFormat={(value) => {
                const option = academyPlans[value];
                const pricePerUser = isYearly ? option.yearlyPerUser : option.monthlyPerUser;
                const totalPrice = pricePerUser * option.learners;
                const period = isYearly ? "/year" : "/month";
                return `${option.learners} learners - ${formatPrice(totalPrice)}${period}`;
              }}
              max={academyPlans.length - 1}
              step={null}
              sx={{ mb: 4 }} // Add margin bottom for label space
              marks={academyPlans.map((option, index) => ({
                value: index,
                label: (
                  <Box sx={{ textAlign: "center", fontSize: "0.75rem" }}>
                    <Box>{option.learners === 1000 ? "1,000+" : option.learners}</Box>
                    <Box sx={{ color: "primary.light", fontWeight: "bold", mt: 0.5 }}>
                      {formatPrice(isYearly ? option.yearlyPerUser * option.learners : option.monthlyPerUser * option.learners)}
                    </Box>
                  </Box>
                ),
              }))}
            />
            <Box sx={{ display: "flex", justifyContent: "space-between" }}>
              <Typography variant="body2" color="text.secondary">
            learners
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {selectedAddon?.maxUnits}
              </Typography>
            </Box>
          </Box>

        </Box>
         ))}
              </Box>
            </FeatureDetails>
          </Box>
        </Box>
      </>
      )}
      </Box>


{/* OTHERS PLANS */}

    {selectedAddon?.id !== "academy" && (
      <>
        {/* Quantity Slider */}
        <Box>
          <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", mb: 2 }}>
            <Typography variant="h6" fontWeight="600" sx={{ fontSize: "1.1rem" }}>
              <Box component="span" sx={{ fontWeight: "normal" }}>QUANTITY:</Box> {quantity} {selectedAddon?.unitLabel}
            </Typography>
            <Slider
              value={quantity}
              onChange={(event, newValue) => setQuantity(newValue)}
              min={1}
              max={selectedAddon?.maxUnits || 50}
              valueLabelDisplay="auto"
              valueLabelFormat={(value) => {
                const unitPrice = isYearly ? selectedAddon?.yearlyPrice : selectedAddon?.monthlyPrice;
                const totalPrice = (unitPrice || 0) * value;
                const period = isYearly ? "/year" : "/month";
                return `${value} ${selectedAddon?.unitLabel?.slice(0, -1) || "unit"} - ${formatPrice(totalPrice)}${period}`;
              }}
              sx={{ mb: 4 }} // Add margin bottom for label space
              marks={[
                {
                  value: 1,
                  label: (
                    <Box sx={{ textAlign: "center", fontSize: "0.75rem" }}>
                      <Box>1</Box>
                      <Box sx={{ color: "primary.light", fontWeight: "bold", mt: 0.5 }}>
                        {formatPrice(isYearly ? selectedAddon?.yearlyPrice || 0 : selectedAddon?.monthlyPrice || 0)}
                      </Box>
                    </Box>
                  )
                },
                {
                  value: Math.floor((selectedAddon?.maxUnits || 50) / 2),
                  label: (
                    <Box sx={{ textAlign: "center", fontSize: "0.75rem" }}>
                      <Box>{Math.floor((selectedAddon?.maxUnits || 50) / 2)}</Box>
                      <Box sx={{ color: "primary.light", fontWeight: "bold", mt: 0.5 }}>
                        {formatPrice((isYearly ? selectedAddon?.yearlyPrice || 0 : selectedAddon?.monthlyPrice || 0) * Math.floor((selectedAddon?.maxUnits || 50) / 2))}
                      </Box>
                    </Box>
                  )
                },
                {
                  value: selectedAddon?.maxUnits || 50,
                  label: (
                    <Box sx={{ textAlign: "center", fontSize: "0.75rem" }}>
                      <Box>{selectedAddon?.maxUnits || 50}</Box>
                      <Box sx={{ color: "primary.light", fontWeight: "bold", mt: 0.5 }}>
                        {formatPrice((isYearly ? selectedAddon?.yearlyPrice || 0 : selectedAddon?.monthlyPrice || 0) * (selectedAddon?.maxUnits || 50))}
                      </Box>
                    </Box>
                  )
                }
              ]}
            />
            <Box sx={{ display: "flex", justifyContent: "space-between" }}>
              <Typography variant="body2" color="text.secondary">
            1
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {selectedAddon?.maxUnits}
              </Typography>
            </Box>
          </Box>
        </Box>

        {/* <Divider /> */}


                    {/* Total Price Display */}
                    <Paper
                      elevation={0}
                      sx={{
                        p: 4,
                        background: "linear-gradient(135deg, rgba(0, 179, 159, 0.08) 0%, rgba(0, 179, 159, 0.12) 100%)",
                        border: "2px solid",
                        borderColor: "primary.light",
                        borderRadius: 3,
                      }}
                    >
                      <Typography variant="h6" gutterBottom fontWeight="600">
                    Subtotal
                      </Typography>

                      <Box sx={{ display: "flex", flexDirection: "column", gap: 2, mb: 3 }}>
                        <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                          <Typography variant="body1">
                            {selectedAddon?.name} × {selectedAddon?.id === "academy" ? academyPlans[quantityIndex].learners : quantity}
                          </Typography>
                          <Typography variant="body1" fontWeight="500">
                            {(() => {
                              if (selectedAddon?.id === "academy") {
                                const currentLearnerOption = academyPlans[quantityIndex];
                                const monthlyPerUserCost = currentLearnerOption.monthlyPerUser;
                                const yearlyPerUserCost = currentLearnerOption.yearlyPerUser;
                                const totalCost = isYearly
                                  ? yearlyPerUserCost * currentLearnerOption.learners
                                  : monthlyPerUserCost * currentLearnerOption.learners;
                                return formatPrice(totalCost);
                              } else {
                                return formatPrice((isYearly ? selectedAddon?.yearlyPrice : selectedAddon?.monthlyPrice) * quantity);
                              }
                            })()}
                          </Typography>
                        </Box>

                        {selectedAddon?.id === "academy" && selectedAddon.subAddOns?.map((subAddOn) => (
                          selectedSubAddOns[subAddOn.id] && (
                            <Box key={subAddOn.id} sx={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                              <Typography variant="body1">
                                {subAddOn.name}
                              </Typography>
                              <Typography variant="body1" fontWeight="500">
                                {formatPrice(isYearly ? subAddOn.yearlyPrice : subAddOn.monthlyPrice || 0)}
                              </Typography>
                            </Box>
                          )
                        ))}

                        {/* <Divider /> */}

                        <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                          <Typography variant="h5" fontWeight="bold">
                        Total {isYearly ? "Annual" : "Monthly"} Cost
                          </Typography>
                          <Typography variant="h4" fontWeight="bold" color="primary.light">
                            {formatPrice(totalPrice)}
                          </Typography>
                        </Box>
                      </Box>

                      <Typography variant="caption" sx={{ lineHeight: "1rem" }} color="text.secondary">
                    * Prices shown are {isYearly ? "annual" : "monthly"} subscription costs. {isYearly ? "Monthly subscriptions are available at standard rates." : "Annual subscriptions receive a 15% discount."} Contact our sales team for enterprise pricing and custom configurations.
                      </Typography>
                    </Paper>
                  </>
                )}
              </Box>
            </CardContent>
          </Card>
        </PlanCardWrapper>
      </Container>
      {/* <Chip
    label={labLearners ? formatPrice(isYearly ? selectedAddon.subAddOns.find(sub => sub.id === "academy-practical")?.yearlyPrice || selectedAddon.subAddOns.find(sub => sub.id === "academy-practical")?.price : selectedAddon.subAddOns.find(sub => sub.id === "academy-practical")?.price) : "Hands-on Learning disabled"}
    color={labLearners ? "success" : "default"}
    sx={{ minWidth: 100 }}
  /> */}

    </SistentThemeProvider>

  );

};
