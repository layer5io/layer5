"use strict";(self.webpackChunkLayer5=self.webpackChunkLayer5||[]).push([[4960],{5168:function(e,t,n){n.d(t,{N:function(){return a}});var l=n(96540),o=n(79147);const a=e=>{let{name:t,code:n}=e;const{0:a,1:i}=(0,l.useState)(!1);return l.createElement("div",{className:"show-code"},l.createElement("input",{type:"checkbox",name:t,id:t,onChange:()=>{i((e=>!e))}}),l.createElement("label",{htmlFor:t,className:"label"},"Show Code"),a&&l.createElement(o.Ay,{codeString:n,language:"javascript"}))}},13308:function(e,t,n){n.r(t);var l=n(96540),o=n(64810),a=n(86462),i=n(48995),c=n(9184),r=n(96044),s=n(5168),m=n(92121);const u=['const [open, setOpen] = useState(false);\n\nconst handleOpen = () => setOpen(true);\nconst handleClose = () => setOpen(false);\n\n<Button onClick={handleOpen}>Open Dialog</Button>\n<Dialog open={open} onClose={handleClose}>\n  <DialogTitle>Confirm Action</DialogTitle>\n  <DialogContent>\n    Do you want to proceed with this action?\n  </DialogContent>\n  <DialogActions>\n    <Button onClick={handleClose}>Cancel</Button>\n    <Button color="primary" onClick={handleClose}>\n      Confirm\n    </Button>\n  </DialogActions>\n</Dialog>','const [openFull, setOpenFull] = useState(false);\n\n<Button onClick={() => setOpenFull(true)}>\n  Open Full-Screen Dialog\n</Button>\n<Dialog\n  open={openFull}\n  onClose={() => setOpenFull(false)}\n  fullScreen\n  maxWidth="lg"\n>\n  <DialogTitle>Full-Screen Dialog</DialogTitle>\n  <DialogContent>\n    <p>\n      This dialog stretches to full screen. Use it when the \n      user\'s full attention is needed.\n    </p>\n  </DialogContent>\n  <DialogActions>\n    <Button onClick={() => setOpenFull(false)}>Cancel</Button>\n    <Button color="primary" onClick={() => setOpenFull(false)}>\n      Save\n    </Button>\n  </DialogActions>\n</Dialog>','const [openForm, setOpenForm] = useState(false);\n\n<Button onClick={() => setOpenForm(true)}>\n  Open Form Dialog\n</Button>\n<Dialog open={openForm} onClose={() => setOpenForm(false)}>\n  <DialogTitle>Subscribe</DialogTitle>\n  <DialogContent>\n    <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>\n      <Input\n        label="Email Address"\n        type="email"\n        placeholder="you@example.com"\n        required\n      />\n      <Input\n        label="Name"\n        type="text"\n        placeholder="John Doe"\n        required\n      />\n    </div>\n  </DialogContent>\n  <DialogActions>\n    <Button onClick={() => setOpenForm(false)}>Cancel</Button>\n    <Button color="primary" onClick={() => setOpenForm(false)}>\n      Subscribe\n    </Button>\n  </DialogActions>\n</Dialog>'];t.default=()=>{const e=(0,a.useLocation)(),{isDark:t}=(0,m.G)(),{0:n,1:d}=(0,l.useState)(!1),{0:p,1:g}=(0,l.useState)(!1),{0:h,1:E}=(0,l.useState)(!1),D=()=>d(!1);return l.createElement(c.p,{title:"Dialog"},l.createElement("div",{className:"content"},l.createElement("a",{id:"Identity"},l.createElement("h2",null,"Dialog")),l.createElement("p",null,"Dialog components provide modal windows that focus user attention on specific tasks or information. They overlay the main content and require user interaction before returning to the underlying interface."),l.createElement("div",{className:"filterBtns"},l.createElement(r.default,{className:"/projects/sistent/components/dialog"===e.pathname?"active":"",onClick:()=>(0,o.navigate)("/projects/sistent/components/dialog"),title:"Overview"}),l.createElement(r.default,{className:"/projects/sistent/components/dialog/guidance"===e.pathname?"active":"",onClick:()=>(0,o.navigate)("/projects/sistent/components/dialog/guidance"),title:"Guidance"}),l.createElement(r.default,{className:"/projects/sistent/components/dialog/code"===e.pathname?"active":"",onClick:()=>(0,o.navigate)("/projects/sistent/components/dialog/code"),title:"Code"})),l.createElement("div",{className:"main-content"},l.createElement("p",null,"The ",l.createElement("code",null,"Dialog")," component is essential for creating focused user experiences that require immediate attention. It provides a controlled way to present forms, confirmations, and detailed information without navigating away from the current context."),l.createElement("a",{id:"Basic Dialog"},l.createElement("h2",null,"Basic Dialog")),l.createElement("p",null,"A simple modal dialog with title, content, and action buttons. This is the most common pattern for confirmations and simple interactions."),l.createElement("div",{className:"showcase"},l.createElement("div",{className:"items"},l.createElement(i.SistentThemeProvider,{initialMode:t?"dark":"light"},l.createElement(i.Button,{onClick:()=>d(!0)},"Open Dialog"),l.createElement(i.Dialog,{open:n,onClose:D},l.createElement(i.DialogTitle,null,"Confirm Action"),l.createElement(i.DialogContent,null,"Do you want to proceed with this action?"),l.createElement(i.DialogActions,null,l.createElement(i.Button,{onClick:D},"Cancel"),l.createElement(i.Button,{color:"primary",onClick:D},"Confirm"))))),l.createElement(s.N,{name:"dialog-basic",code:u[0]})),l.createElement("a",{id:"Full Screen Dialog"},l.createElement("h2",null,"Full-Screen Dialog")),l.createElement("p",null,"Full-screen dialogs are useful for complex forms or when you need the user's complete attention. They take up the entire viewport and are ideal for mobile devices."),l.createElement("div",{className:"showcase"},l.createElement("div",{className:"items"},l.createElement(i.SistentThemeProvider,{initialMode:t?"dark":"light"},l.createElement(i.Button,{onClick:()=>g(!0)},"Open Full-Screen Dialog"),l.createElement(i.Dialog,{open:p,onClose:()=>g(!1),fullScreen:!0,maxWidth:"lg"},l.createElement(i.DialogTitle,null,"Full-Screen Dialog"),l.createElement(i.DialogContent,null,l.createElement("p",null,"This dialog stretches to full screen. Use it when the user's full attention is needed for complex tasks or on mobile devices.")),l.createElement(i.DialogActions,null,l.createElement(i.Button,{onClick:()=>g(!1)},"Cancel"),l.createElement(i.Button,{color:"primary",onClick:()=>g(!1)},"Save"))))),l.createElement(s.N,{name:"dialog-fullscreen",code:u[1]})),l.createElement("a",{id:"Form Dialog"},l.createElement("h2",null,"Dialog with Form")),l.createElement("p",null,"Dialogs can contain forms for collecting user input. This pattern is common for creating, editing, or subscribing workflows that don't require a full page."),l.createElement("div",{className:"showcase"},l.createElement("div",{className:"items"},l.createElement(i.SistentThemeProvider,{initialMode:t?"dark":"light"},l.createElement(i.Button,{onClick:()=>E(!0)},"Open Form Dialog"),l.createElement(i.Dialog,{open:h,onClose:()=>E(!1)},l.createElement(i.DialogTitle,null,"Subscribe"),l.createElement(i.DialogContent,null,l.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem",minWidth:"300px"}},l.createElement(i.Input,{label:"Email Address",type:"email",placeholder:"you@example.com",required:!0}),l.createElement(i.Input,{label:"Name",type:"text",placeholder:"John Doe",required:!0}))),l.createElement(i.DialogActions,null,l.createElement(i.Button,{onClick:()=>E(!1)},"Cancel"),l.createElement(i.Button,{color:"primary",onClick:()=>E(!1)},"Subscribe"))))),l.createElement(s.N,{name:"dialog-form",code:u[2]})))))}}}]);
//# sourceMappingURL=component---src-sections-projects-sistent-components-dialog-code-js-82bfeacb43570dc5b602.js.map