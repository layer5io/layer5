{"version":3,"file":"5174-5fa9ec236c26262438e7.js","mappings":"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","sources":["webpack://Layer5/./node_modules/@react-icons/all-files/fa/FaUsers.js","webpack://Layer5/./node_modules/@fullcalendar/interaction/index.js","webpack://Layer5/./node_modules/@fullcalendar/google-calendar/index.js","webpack://Layer5/./src/components/MeetInfo-Table/MeetInfoTable.style.js","webpack://Layer5/./src/components/MeetInfo-Table/index.js","webpack://Layer5/./src/sections/Community/Calendar/meetLinksData.js","webpack://Layer5/./src/sections/Community/Calendar/index.js"],"sourcesContent":["// THIS FILE IS AUTO GENERATED\nvar GenIcon = require('../lib').GenIcon\nmodule.exports.FaUsers = function FaUsers (props) {\n  return GenIcon({\"tag\":\"svg\",\"attr\":{\"viewBox\":\"0 0 640 512\"},\"child\":[{\"tag\":\"path\",\"attr\":{\"d\":\"M96 224c35.3 0 64-28.7 64-64s-28.7-64-64-64-64 28.7-64 64 28.7 64 64 64zm448 0c35.3 0 64-28.7 64-64s-28.7-64-64-64-64 28.7-64 64 28.7 64 64 64zm32 32h-64c-17.6 0-33.5 7.1-45.1 18.6 40.3 22.1 68.9 62 75.1 109.4h66c17.7 0 32-14.3 32-32v-32c0-35.3-28.7-64-64-64zm-256 0c61.9 0 112-50.1 112-112S381.9 32 320 32 208 82.1 208 144s50.1 112 112 112zm76.8 32h-8.3c-20.8 10-43.9 16-68.5 16s-47.6-6-68.5-16h-8.3C179.6 288 128 339.6 128 403.2V432c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48v-28.8c0-63.6-51.6-115.2-115.2-115.2zm-223.7-13.4C161.5 263.1 145.6 256 128 256H64c-35.3 0-64 28.7-64 64v32c0 17.7 14.3 32 32 32h65.9c6.3-47.4 34.9-87.3 75.2-109.4z\"}}]})(props);\n};\n","import { createPlugin } from '@fullcalendar/core/index.js';\nimport { config, Emitter, elementClosest, applyStyle, whenTransitionDone, removeElement, ScrollController, ElementScrollController, computeInnerRect, WindowScrollController, ElementDragging, preventSelection, preventContextMenu, allowSelection, allowContextMenu, computeRect, getClippingParents, pointInsideRect, constrainPoint, intersectRects, getRectCenter, diffPoints, mapHash, rangeContainsRange, isDateSpansEqual, Interaction, interactionSettingsToStore, isDateSelectionValid, enableCursor, disableCursor, triggerDateSelect, compareNumbers, getElSeg, getRelevantEvents, EventImpl, createEmptyEventStore, applyMutationToEventStore, isInteractionValid, buildEventApis, interactionSettingsStore, startOfDay, diffDates, createDuration, getEventTargetViaRoot, identity, eventTupleToStore, parseDragMeta, elementMatches, refineEventDef, parseEventDef, getDefaultEventEnd, createEventInstance, BASE_OPTION_DEFAULTS } from '@fullcalendar/core/internal.js';\n\nconfig.touchMouseIgnoreWait = 500;\nlet ignoreMouseDepth = 0;\nlet listenerCnt = 0;\nlet isWindowTouchMoveCancelled = false;\n/*\nUses a \"pointer\" abstraction, which monitors UI events for both mouse and touch.\nTracks when the pointer \"drags\" on a certain element, meaning down+move+up.\n\nAlso, tracks if there was touch-scrolling.\nAlso, can prevent touch-scrolling from happening.\nAlso, can fire pointermove events when scrolling happens underneath, even when no real pointer movement.\n\nemits:\n- pointerdown\n- pointermove\n- pointerup\n*/\nclass PointerDragging {\n    constructor(containerEl) {\n        this.subjectEl = null;\n        // options that can be directly assigned by caller\n        this.selector = ''; // will cause subjectEl in all emitted events to be this element\n        this.handleSelector = '';\n        this.shouldIgnoreMove = false;\n        this.shouldWatchScroll = true; // for simulating pointermove on scroll\n        // internal states\n        this.isDragging = false;\n        this.isTouchDragging = false;\n        this.wasTouchScroll = false;\n        // Mouse\n        // ----------------------------------------------------------------------------------------------------\n        this.handleMouseDown = (ev) => {\n            if (!this.shouldIgnoreMouse() &&\n                isPrimaryMouseButton(ev) &&\n                this.tryStart(ev)) {\n                let pev = this.createEventFromMouse(ev, true);\n                this.emitter.trigger('pointerdown', pev);\n                this.initScrollWatch(pev);\n                if (!this.shouldIgnoreMove) {\n                    document.addEventListener('mousemove', this.handleMouseMove);\n                }\n                document.addEventListener('mouseup', this.handleMouseUp);\n            }\n        };\n        this.handleMouseMove = (ev) => {\n            let pev = this.createEventFromMouse(ev);\n            this.recordCoords(pev);\n            this.emitter.trigger('pointermove', pev);\n        };\n        this.handleMouseUp = (ev) => {\n            document.removeEventListener('mousemove', this.handleMouseMove);\n            document.removeEventListener('mouseup', this.handleMouseUp);\n            this.emitter.trigger('pointerup', this.createEventFromMouse(ev));\n            this.cleanup(); // call last so that pointerup has access to props\n        };\n        // Touch\n        // ----------------------------------------------------------------------------------------------------\n        this.handleTouchStart = (ev) => {\n            if (this.tryStart(ev)) {\n                this.isTouchDragging = true;\n                let pev = this.createEventFromTouch(ev, true);\n                this.emitter.trigger('pointerdown', pev);\n                this.initScrollWatch(pev);\n                // unlike mouse, need to attach to target, not document\n                // https://stackoverflow.com/a/45760014\n                let targetEl = ev.target;\n                if (!this.shouldIgnoreMove) {\n                    targetEl.addEventListener('touchmove', this.handleTouchMove);\n                }\n                targetEl.addEventListener('touchend', this.handleTouchEnd);\n                targetEl.addEventListener('touchcancel', this.handleTouchEnd); // treat it as a touch end\n                // attach a handler to get called when ANY scroll action happens on the page.\n                // this was impossible to do with normal on/off because 'scroll' doesn't bubble.\n                // http://stackoverflow.com/a/32954565/96342\n                window.addEventListener('scroll', this.handleTouchScroll, true);\n            }\n        };\n        this.handleTouchMove = (ev) => {\n            let pev = this.createEventFromTouch(ev);\n            this.recordCoords(pev);\n            this.emitter.trigger('pointermove', pev);\n        };\n        this.handleTouchEnd = (ev) => {\n            if (this.isDragging) { // done to guard against touchend followed by touchcancel\n                let targetEl = ev.target;\n                targetEl.removeEventListener('touchmove', this.handleTouchMove);\n                targetEl.removeEventListener('touchend', this.handleTouchEnd);\n                targetEl.removeEventListener('touchcancel', this.handleTouchEnd);\n                window.removeEventListener('scroll', this.handleTouchScroll, true); // useCaptured=true\n                this.emitter.trigger('pointerup', this.createEventFromTouch(ev));\n                this.cleanup(); // call last so that pointerup has access to props\n                this.isTouchDragging = false;\n                startIgnoringMouse();\n            }\n        };\n        this.handleTouchScroll = () => {\n            this.wasTouchScroll = true;\n        };\n        this.handleScroll = (ev) => {\n            if (!this.shouldIgnoreMove) {\n                let pageX = (window.scrollX - this.prevScrollX) + this.prevPageX;\n                let pageY = (window.scrollY - this.prevScrollY) + this.prevPageY;\n                this.emitter.trigger('pointermove', {\n                    origEvent: ev,\n                    isTouch: this.isTouchDragging,\n                    subjectEl: this.subjectEl,\n                    pageX,\n                    pageY,\n                    deltaX: pageX - this.origPageX,\n                    deltaY: pageY - this.origPageY,\n                });\n            }\n        };\n        this.containerEl = containerEl;\n        this.emitter = new Emitter();\n        containerEl.addEventListener('mousedown', this.handleMouseDown);\n        containerEl.addEventListener('touchstart', this.handleTouchStart, { passive: true });\n        listenerCreated();\n    }\n    destroy() {\n        this.containerEl.removeEventListener('mousedown', this.handleMouseDown);\n        this.containerEl.removeEventListener('touchstart', this.handleTouchStart, { passive: true });\n        listenerDestroyed();\n    }\n    tryStart(ev) {\n        let subjectEl = this.querySubjectEl(ev);\n        let downEl = ev.target;\n        if (subjectEl &&\n            (!this.handleSelector || elementClosest(downEl, this.handleSelector))) {\n            this.subjectEl = subjectEl;\n            this.isDragging = true; // do this first so cancelTouchScroll will work\n            this.wasTouchScroll = false;\n            return true;\n        }\n        return false;\n    }\n    cleanup() {\n        isWindowTouchMoveCancelled = false;\n        this.isDragging = false;\n        this.subjectEl = null;\n        // keep wasTouchScroll around for later access\n        this.destroyScrollWatch();\n    }\n    querySubjectEl(ev) {\n        if (this.selector) {\n            return elementClosest(ev.target, this.selector);\n        }\n        return this.containerEl;\n    }\n    shouldIgnoreMouse() {\n        return ignoreMouseDepth || this.isTouchDragging;\n    }\n    // can be called by user of this class, to cancel touch-based scrolling for the current drag\n    cancelTouchScroll() {\n        if (this.isDragging) {\n            isWindowTouchMoveCancelled = true;\n        }\n    }\n    // Scrolling that simulates pointermoves\n    // ----------------------------------------------------------------------------------------------------\n    initScrollWatch(ev) {\n        if (this.shouldWatchScroll) {\n            this.recordCoords(ev);\n            window.addEventListener('scroll', this.handleScroll, true); // useCapture=true\n        }\n    }\n    recordCoords(ev) {\n        if (this.shouldWatchScroll) {\n            this.prevPageX = ev.pageX;\n            this.prevPageY = ev.pageY;\n            this.prevScrollX = window.scrollX;\n            this.prevScrollY = window.scrollY;\n        }\n    }\n    destroyScrollWatch() {\n        if (this.shouldWatchScroll) {\n            window.removeEventListener('scroll', this.handleScroll, true); // useCaptured=true\n        }\n    }\n    // Event Normalization\n    // ----------------------------------------------------------------------------------------------------\n    createEventFromMouse(ev, isFirst) {\n        let deltaX = 0;\n        let deltaY = 0;\n        // TODO: repeat code\n        if (isFirst) {\n            this.origPageX = ev.pageX;\n            this.origPageY = ev.pageY;\n        }\n        else {\n            deltaX = ev.pageX - this.origPageX;\n            deltaY = ev.pageY - this.origPageY;\n        }\n        return {\n            origEvent: ev,\n            isTouch: false,\n            subjectEl: this.subjectEl,\n            pageX: ev.pageX,\n            pageY: ev.pageY,\n            deltaX,\n            deltaY,\n        };\n    }\n    createEventFromTouch(ev, isFirst) {\n        let touches = ev.touches;\n        let pageX;\n        let pageY;\n        let deltaX = 0;\n        let deltaY = 0;\n        // if touch coords available, prefer,\n        // because FF would give bad ev.pageX ev.pageY\n        if (touches && touches.length) {\n            pageX = touches[0].pageX;\n            pageY = touches[0].pageY;\n        }\n        else {\n            pageX = ev.pageX;\n            pageY = ev.pageY;\n        }\n        // TODO: repeat code\n        if (isFirst) {\n            this.origPageX = pageX;\n            this.origPageY = pageY;\n        }\n        else {\n            deltaX = pageX - this.origPageX;\n            deltaY = pageY - this.origPageY;\n        }\n        return {\n            origEvent: ev,\n            isTouch: true,\n            subjectEl: this.subjectEl,\n            pageX,\n            pageY,\n            deltaX,\n            deltaY,\n        };\n    }\n}\n// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)\nfunction isPrimaryMouseButton(ev) {\n    return ev.button === 0 && !ev.ctrlKey;\n}\n// Ignoring fake mouse events generated by touch\n// ----------------------------------------------------------------------------------------------------\nfunction startIgnoringMouse() {\n    ignoreMouseDepth += 1;\n    setTimeout(() => {\n        ignoreMouseDepth -= 1;\n    }, config.touchMouseIgnoreWait);\n}\n// We want to attach touchmove as early as possible for Safari\n// ----------------------------------------------------------------------------------------------------\nfunction listenerCreated() {\n    listenerCnt += 1;\n    if (listenerCnt === 1) {\n        window.addEventListener('touchmove', onWindowTouchMove, { passive: false });\n    }\n}\nfunction listenerDestroyed() {\n    listenerCnt -= 1;\n    if (!listenerCnt) {\n        window.removeEventListener('touchmove', onWindowTouchMove, { passive: false });\n    }\n}\nfunction onWindowTouchMove(ev) {\n    if (isWindowTouchMoveCancelled) {\n        ev.preventDefault();\n    }\n}\n\n/*\nAn effect in which an element follows the movement of a pointer across the screen.\nThe moving element is a clone of some other element.\nMust call start + handleMove + stop.\n*/\nclass ElementMirror {\n    constructor() {\n        this.isVisible = false; // must be explicitly enabled\n        this.sourceEl = null;\n        this.mirrorEl = null;\n        this.sourceElRect = null; // screen coords relative to viewport\n        // options that can be set directly by caller\n        this.parentNode = document.body; // HIGHLY SUGGESTED to set this to sidestep ShadowDOM issues\n        this.zIndex = 9999;\n        this.revertDuration = 0;\n    }\n    start(sourceEl, pageX, pageY) {\n        this.sourceEl = sourceEl;\n        this.sourceElRect = this.sourceEl.getBoundingClientRect();\n        this.origScreenX = pageX - window.scrollX;\n        this.origScreenY = pageY - window.scrollY;\n        this.deltaX = 0;\n        this.deltaY = 0;\n        this.updateElPosition();\n    }\n    handleMove(pageX, pageY) {\n        this.deltaX = (pageX - window.scrollX) - this.origScreenX;\n        this.deltaY = (pageY - window.scrollY) - this.origScreenY;\n        this.updateElPosition();\n    }\n    // can be called before start\n    setIsVisible(bool) {\n        if (bool) {\n            if (!this.isVisible) {\n                if (this.mirrorEl) {\n                    this.mirrorEl.style.display = '';\n                }\n                this.isVisible = bool; // needs to happen before updateElPosition\n                this.updateElPosition(); // because was not updating the position while invisible\n            }\n        }\n        else if (this.isVisible) {\n            if (this.mirrorEl) {\n                this.mirrorEl.style.display = 'none';\n            }\n            this.isVisible = bool;\n        }\n    }\n    // always async\n    stop(needsRevertAnimation, callback) {\n        let done = () => {\n            this.cleanup();\n            callback();\n        };\n        if (needsRevertAnimation &&\n            this.mirrorEl &&\n            this.isVisible &&\n            this.revertDuration && // if 0, transition won't work\n            (this.deltaX || this.deltaY) // if same coords, transition won't work\n        ) {\n            this.doRevertAnimation(done, this.revertDuration);\n        }\n        else {\n            setTimeout(done, 0);\n        }\n    }\n    doRevertAnimation(callback, revertDuration) {\n        let mirrorEl = this.mirrorEl;\n        let finalSourceElRect = this.sourceEl.getBoundingClientRect(); // because autoscrolling might have happened\n        mirrorEl.style.transition =\n            'top ' + revertDuration + 'ms,' +\n                'left ' + revertDuration + 'ms';\n        applyStyle(mirrorEl, {\n            left: finalSourceElRect.left,\n            top: finalSourceElRect.top,\n        });\n        whenTransitionDone(mirrorEl, () => {\n            mirrorEl.style.transition = '';\n            callback();\n        });\n    }\n    cleanup() {\n        if (this.mirrorEl) {\n            removeElement(this.mirrorEl);\n            this.mirrorEl = null;\n        }\n        this.sourceEl = null;\n    }\n    updateElPosition() {\n        if (this.sourceEl && this.isVisible) {\n            applyStyle(this.getMirrorEl(), {\n                left: this.sourceElRect.left + this.deltaX,\n                top: this.sourceElRect.top + this.deltaY,\n            });\n        }\n    }\n    getMirrorEl() {\n        let sourceElRect = this.sourceElRect;\n        let mirrorEl = this.mirrorEl;\n        if (!mirrorEl) {\n            mirrorEl = this.mirrorEl = this.sourceEl.cloneNode(true); // cloneChildren=true\n            // we don't want long taps or any mouse interaction causing selection/menus.\n            // would use preventSelection(), but that prevents selectstart, causing problems.\n            mirrorEl.style.userSelect = 'none';\n            mirrorEl.style.webkitUserSelect = 'none';\n            mirrorEl.style.pointerEvents = 'none';\n            mirrorEl.classList.add('fc-event-dragging');\n            applyStyle(mirrorEl, {\n                position: 'fixed',\n                zIndex: this.zIndex,\n                visibility: '',\n                boxSizing: 'border-box',\n                width: sourceElRect.right - sourceElRect.left,\n                height: sourceElRect.bottom - sourceElRect.top,\n                right: 'auto',\n                bottom: 'auto',\n                margin: 0,\n            });\n            this.parentNode.appendChild(mirrorEl);\n        }\n        return mirrorEl;\n    }\n}\n\n/*\nIs a cache for a given element's scroll information (all the info that ScrollController stores)\nin addition the \"client rectangle\" of the element.. the area within the scrollbars.\n\nThe cache can be in one of two modes:\n- doesListening:false - ignores when the container is scrolled by someone else\n- doesListening:true - watch for scrolling and update the cache\n*/\nclass ScrollGeomCache extends ScrollController {\n    constructor(scrollController, doesListening) {\n        super();\n        this.handleScroll = () => {\n            this.scrollTop = this.scrollController.getScrollTop();\n            this.scrollLeft = this.scrollController.getScrollLeft();\n            this.handleScrollChange();\n        };\n        this.scrollController = scrollController;\n        this.doesListening = doesListening;\n        this.scrollTop = this.origScrollTop = scrollController.getScrollTop();\n        this.scrollLeft = this.origScrollLeft = scrollController.getScrollLeft();\n        this.scrollWidth = scrollController.getScrollWidth();\n        this.scrollHeight = scrollController.getScrollHeight();\n        this.clientWidth = scrollController.getClientWidth();\n        this.clientHeight = scrollController.getClientHeight();\n        this.clientRect = this.computeClientRect(); // do last in case it needs cached values\n        if (this.doesListening) {\n            this.getEventTarget().addEventListener('scroll', this.handleScroll);\n        }\n    }\n    destroy() {\n        if (this.doesListening) {\n            this.getEventTarget().removeEventListener('scroll', this.handleScroll);\n        }\n    }\n    getScrollTop() {\n        return this.scrollTop;\n    }\n    getScrollLeft() {\n        return this.scrollLeft;\n    }\n    setScrollTop(top) {\n        this.scrollController.setScrollTop(top);\n        if (!this.doesListening) {\n            // we are not relying on the element to normalize out-of-bounds scroll values\n            // so we need to sanitize ourselves\n            this.scrollTop = Math.max(Math.min(top, this.getMaxScrollTop()), 0);\n            this.handleScrollChange();\n        }\n    }\n    setScrollLeft(top) {\n        this.scrollController.setScrollLeft(top);\n        if (!this.doesListening) {\n            // we are not relying on the element to normalize out-of-bounds scroll values\n            // so we need to sanitize ourselves\n            this.scrollLeft = Math.max(Math.min(top, this.getMaxScrollLeft()), 0);\n            this.handleScrollChange();\n        }\n    }\n    getClientWidth() {\n        return this.clientWidth;\n    }\n    getClientHeight() {\n        return this.clientHeight;\n    }\n    getScrollWidth() {\n        return this.scrollWidth;\n    }\n    getScrollHeight() {\n        return this.scrollHeight;\n    }\n    handleScrollChange() {\n    }\n}\n\nclass ElementScrollGeomCache extends ScrollGeomCache {\n    constructor(el, doesListening) {\n        super(new ElementScrollController(el), doesListening);\n    }\n    getEventTarget() {\n        return this.scrollController.el;\n    }\n    computeClientRect() {\n        return computeInnerRect(this.scrollController.el);\n    }\n}\n\nclass WindowScrollGeomCache extends ScrollGeomCache {\n    constructor(doesListening) {\n        super(new WindowScrollController(), doesListening);\n    }\n    getEventTarget() {\n        return window;\n    }\n    computeClientRect() {\n        return {\n            left: this.scrollLeft,\n            right: this.scrollLeft + this.clientWidth,\n            top: this.scrollTop,\n            bottom: this.scrollTop + this.clientHeight,\n        };\n    }\n    // the window is the only scroll object that changes it's rectangle relative\n    // to the document's topleft as it scrolls\n    handleScrollChange() {\n        this.clientRect = this.computeClientRect();\n    }\n}\n\n// If available we are using native \"performance\" API instead of \"Date\"\n// Read more about it on MDN:\n// https://developer.mozilla.org/en-US/docs/Web/API/Performance\nconst getTime = typeof performance === 'function' ? performance.now : Date.now;\n/*\nFor a pointer interaction, automatically scrolls certain scroll containers when the pointer\napproaches the edge.\n\nThe caller must call start + handleMove + stop.\n*/\nclass AutoScroller {\n    constructor() {\n        // options that can be set by caller\n        this.isEnabled = true;\n        this.scrollQuery = [window, '.fc-scroller'];\n        this.edgeThreshold = 50; // pixels\n        this.maxVelocity = 300; // pixels per second\n        // internal state\n        this.pointerScreenX = null;\n        this.pointerScreenY = null;\n        this.isAnimating = false;\n        this.scrollCaches = null;\n        // protect against the initial pointerdown being too close to an edge and starting the scroll\n        this.everMovedUp = false;\n        this.everMovedDown = false;\n        this.everMovedLeft = false;\n        this.everMovedRight = false;\n        this.animate = () => {\n            if (this.isAnimating) { // wasn't cancelled between animation calls\n                let edge = this.computeBestEdge(this.pointerScreenX + window.scrollX, this.pointerScreenY + window.scrollY);\n                if (edge) {\n                    let now = getTime();\n                    this.handleSide(edge, (now - this.msSinceRequest) / 1000);\n                    this.requestAnimation(now);\n                }\n                else {\n                    this.isAnimating = false; // will stop animation\n                }\n            }\n        };\n    }\n    start(pageX, pageY, scrollStartEl) {\n        if (this.isEnabled) {\n            this.scrollCaches = this.buildCaches(scrollStartEl);\n            this.pointerScreenX = null;\n            this.pointerScreenY = null;\n            this.everMovedUp = false;\n            this.everMovedDown = false;\n            this.everMovedLeft = false;\n            this.everMovedRight = false;\n            this.handleMove(pageX, pageY);\n        }\n    }\n    handleMove(pageX, pageY) {\n        if (this.isEnabled) {\n            let pointerScreenX = pageX - window.scrollX;\n            let pointerScreenY = pageY - window.scrollY;\n            let yDelta = this.pointerScreenY === null ? 0 : pointerScreenY - this.pointerScreenY;\n            let xDelta = this.pointerScreenX === null ? 0 : pointerScreenX - this.pointerScreenX;\n            if (yDelta < 0) {\n                this.everMovedUp = true;\n            }\n            else if (yDelta > 0) {\n                this.everMovedDown = true;\n            }\n            if (xDelta < 0) {\n                this.everMovedLeft = true;\n            }\n            else if (xDelta > 0) {\n                this.everMovedRight = true;\n            }\n            this.pointerScreenX = pointerScreenX;\n            this.pointerScreenY = pointerScreenY;\n            if (!this.isAnimating) {\n                this.isAnimating = true;\n                this.requestAnimation(getTime());\n            }\n        }\n    }\n    stop() {\n        if (this.isEnabled) {\n            this.isAnimating = false; // will stop animation\n            for (let scrollCache of this.scrollCaches) {\n                scrollCache.destroy();\n            }\n            this.scrollCaches = null;\n        }\n    }\n    requestAnimation(now) {\n        this.msSinceRequest = now;\n        requestAnimationFrame(this.animate);\n    }\n    handleSide(edge, seconds) {\n        let { scrollCache } = edge;\n        let { edgeThreshold } = this;\n        let invDistance = edgeThreshold - edge.distance;\n        let velocity = // the closer to the edge, the faster we scroll\n         ((invDistance * invDistance) / (edgeThreshold * edgeThreshold)) * // quadratic\n            this.maxVelocity * seconds;\n        let sign = 1;\n        switch (edge.name) {\n            case 'left':\n                sign = -1;\n            // falls through\n            case 'right':\n                scrollCache.setScrollLeft(scrollCache.getScrollLeft() + velocity * sign);\n                break;\n            case 'top':\n                sign = -1;\n            // falls through\n            case 'bottom':\n                scrollCache.setScrollTop(scrollCache.getScrollTop() + velocity * sign);\n                break;\n        }\n    }\n    // left/top are relative to document topleft\n    computeBestEdge(left, top) {\n        let { edgeThreshold } = this;\n        let bestSide = null;\n        let scrollCaches = this.scrollCaches || [];\n        for (let scrollCache of scrollCaches) {\n            let rect = scrollCache.clientRect;\n            let leftDist = left - rect.left;\n            let rightDist = rect.right - left;\n            let topDist = top - rect.top;\n            let bottomDist = rect.bottom - top;\n            // completely within the rect?\n            if (leftDist >= 0 && rightDist >= 0 && topDist >= 0 && bottomDist >= 0) {\n                if (topDist <= edgeThreshold && this.everMovedUp && scrollCache.canScrollUp() &&\n                    (!bestSide || bestSide.distance > topDist)) {\n                    bestSide = { scrollCache, name: 'top', distance: topDist };\n                }\n                if (bottomDist <= edgeThreshold && this.everMovedDown && scrollCache.canScrollDown() &&\n                    (!bestSide || bestSide.distance > bottomDist)) {\n                    bestSide = { scrollCache, name: 'bottom', distance: bottomDist };\n                }\n                /*\n                TODO: fix broken RTL scrolling. canScrollLeft always returning false\n                https://github.com/fullcalendar/fullcalendar/issues/4837\n                */\n                if (leftDist <= edgeThreshold && this.everMovedLeft && scrollCache.canScrollLeft() &&\n                    (!bestSide || bestSide.distance > leftDist)) {\n                    bestSide = { scrollCache, name: 'left', distance: leftDist };\n                }\n                if (rightDist <= edgeThreshold && this.everMovedRight && scrollCache.canScrollRight() &&\n                    (!bestSide || bestSide.distance > rightDist)) {\n                    bestSide = { scrollCache, name: 'right', distance: rightDist };\n                }\n            }\n        }\n        return bestSide;\n    }\n    buildCaches(scrollStartEl) {\n        return this.queryScrollEls(scrollStartEl).map((el) => {\n            if (el === window) {\n                return new WindowScrollGeomCache(false); // false = don't listen to user-generated scrolls\n            }\n            return new ElementScrollGeomCache(el, false); // false = don't listen to user-generated scrolls\n        });\n    }\n    queryScrollEls(scrollStartEl) {\n        let els = [];\n        for (let query of this.scrollQuery) {\n            if (typeof query === 'object') {\n                els.push(query);\n            }\n            else {\n                /*\n                TODO: in the future, always have auto-scroll happen on element where current Hit came from\n                Ticket: https://github.com/fullcalendar/fullcalendar/issues/4593\n                */\n                els.push(...Array.prototype.slice.call(scrollStartEl.getRootNode().querySelectorAll(query)));\n            }\n        }\n        return els;\n    }\n}\n\n/*\nMonitors dragging on an element. Has a number of high-level features:\n- minimum distance required before dragging\n- minimum wait time (\"delay\") before dragging\n- a mirror element that follows the pointer\n*/\nclass FeaturefulElementDragging extends ElementDragging {\n    constructor(containerEl, selector) {\n        super(containerEl);\n        this.containerEl = containerEl;\n        // options that can be directly set by caller\n        // the caller can also set the PointerDragging's options as well\n        this.delay = null;\n        this.minDistance = 0;\n        this.touchScrollAllowed = true; // prevents drag from starting and blocks scrolling during drag\n        this.mirrorNeedsRevert = false;\n        this.isInteracting = false; // is the user validly moving the pointer? lasts until pointerup\n        this.isDragging = false; // is it INTENTFULLY dragging? lasts until after revert animation\n        this.isDelayEnded = false;\n        this.isDistanceSurpassed = false;\n        this.delayTimeoutId = null;\n        this.onPointerDown = (ev) => {\n            if (!this.isDragging) { // so new drag doesn't happen while revert animation is going\n                this.isInteracting = true;\n                this.isDelayEnded = false;\n                this.isDistanceSurpassed = false;\n                preventSelection(document.body);\n                preventContextMenu(document.body);\n                // prevent links from being visited if there's an eventual drag.\n                // also prevents selection in older browsers (maybe?).\n                // not necessary for touch, besides, browser would complain about passiveness.\n                if (!ev.isTouch) {\n                    ev.origEvent.preventDefault();\n                }\n                this.emitter.trigger('pointerdown', ev);\n                if (this.isInteracting && // not destroyed via pointerdown handler\n                    !this.pointer.shouldIgnoreMove) {\n                    // actions related to initiating dragstart+dragmove+dragend...\n                    this.mirror.setIsVisible(false); // reset. caller must set-visible\n                    this.mirror.start(ev.subjectEl, ev.pageX, ev.pageY); // must happen on first pointer down\n                    this.startDelay(ev);\n                    if (!this.minDistance) {\n                        this.handleDistanceSurpassed(ev);\n                    }\n                }\n            }\n        };\n        this.onPointerMove = (ev) => {\n            if (this.isInteracting) {\n                this.emitter.trigger('pointermove', ev);\n                if (!this.isDistanceSurpassed) {\n                    let minDistance = this.minDistance;\n                    let distanceSq; // current distance from the origin, squared\n                    let { deltaX, deltaY } = ev;\n                    distanceSq = deltaX * deltaX + deltaY * deltaY;\n                    if (distanceSq >= minDistance * minDistance) { // use pythagorean theorem\n                        this.handleDistanceSurpassed(ev);\n                    }\n                }\n                if (this.isDragging) {\n                    // a real pointer move? (not one simulated by scrolling)\n                    if (ev.origEvent.type !== 'scroll') {\n                        this.mirror.handleMove(ev.pageX, ev.pageY);\n                        this.autoScroller.handleMove(ev.pageX, ev.pageY);\n                    }\n                    this.emitter.trigger('dragmove', ev);\n                }\n            }\n        };\n        this.onPointerUp = (ev) => {\n            if (this.isInteracting) {\n                this.isInteracting = false;\n                allowSelection(document.body);\n                allowContextMenu(document.body);\n                this.emitter.trigger('pointerup', ev); // can potentially set mirrorNeedsRevert\n                if (this.isDragging) {\n                    this.autoScroller.stop();\n                    this.tryStopDrag(ev); // which will stop the mirror\n                }\n                if (this.delayTimeoutId) {\n                    clearTimeout(this.delayTimeoutId);\n                    this.delayTimeoutId = null;\n                }\n            }\n        };\n        let pointer = this.pointer = new PointerDragging(containerEl);\n        pointer.emitter.on('pointerdown', this.onPointerDown);\n        pointer.emitter.on('pointermove', this.onPointerMove);\n        pointer.emitter.on('pointerup', this.onPointerUp);\n        if (selector) {\n            pointer.selector = selector;\n        }\n        this.mirror = new ElementMirror();\n        this.autoScroller = new AutoScroller();\n    }\n    destroy() {\n        this.pointer.destroy();\n        // HACK: simulate a pointer-up to end the current drag\n        // TODO: fire 'dragend' directly and stop interaction. discourage use of pointerup event (b/c might not fire)\n        this.onPointerUp({});\n    }\n    startDelay(ev) {\n        if (typeof this.delay === 'number') {\n            this.delayTimeoutId = setTimeout(() => {\n                this.delayTimeoutId = null;\n                this.handleDelayEnd(ev);\n            }, this.delay); // not assignable to number!\n        }\n        else {\n            this.handleDelayEnd(ev);\n        }\n    }\n    handleDelayEnd(ev) {\n        this.isDelayEnded = true;\n        this.tryStartDrag(ev);\n    }\n    handleDistanceSurpassed(ev) {\n        this.isDistanceSurpassed = true;\n        this.tryStartDrag(ev);\n    }\n    tryStartDrag(ev) {\n        if (this.isDelayEnded && this.isDistanceSurpassed) {\n            if (!this.pointer.wasTouchScroll || this.touchScrollAllowed) {\n                this.isDragging = true;\n                this.mirrorNeedsRevert = false;\n                this.autoScroller.start(ev.pageX, ev.pageY, this.containerEl);\n                this.emitter.trigger('dragstart', ev);\n                if (this.touchScrollAllowed === false) {\n                    this.pointer.cancelTouchScroll();\n                }\n            }\n        }\n    }\n    tryStopDrag(ev) {\n        // .stop() is ALWAYS asynchronous, which we NEED because we want all pointerup events\n        // that come from the document to fire beforehand. much more convenient this way.\n        this.mirror.stop(this.mirrorNeedsRevert, this.stopDrag.bind(this, ev));\n    }\n    stopDrag(ev) {\n        this.isDragging = false;\n        this.emitter.trigger('dragend', ev);\n    }\n    // fill in the implementations...\n    setIgnoreMove(bool) {\n        this.pointer.shouldIgnoreMove = bool;\n    }\n    setMirrorIsVisible(bool) {\n        this.mirror.setIsVisible(bool);\n    }\n    setMirrorNeedsRevert(bool) {\n        this.mirrorNeedsRevert = bool;\n    }\n    setAutoScrollEnabled(bool) {\n        this.autoScroller.isEnabled = bool;\n    }\n}\n\n/*\nWhen this class is instantiated, it records the offset of an element (relative to the document topleft),\nand continues to monitor scrolling, updating the cached coordinates if it needs to.\nDoes not access the DOM after instantiation, so highly performant.\n\nAlso keeps track of all scrolling/overflow:hidden containers that are parents of the given element\nand an determine if a given point is inside the combined clipping rectangle.\n*/\nclass OffsetTracker {\n    constructor(el) {\n        this.el = el;\n        this.origRect = computeRect(el);\n        // will work fine for divs that have overflow:hidden\n        this.scrollCaches = getClippingParents(el).map((scrollEl) => new ElementScrollGeomCache(scrollEl, true));\n    }\n    destroy() {\n        for (let scrollCache of this.scrollCaches) {\n            scrollCache.destroy();\n        }\n    }\n    computeLeft() {\n        let left = this.origRect.left;\n        for (let scrollCache of this.scrollCaches) {\n            left += scrollCache.origScrollLeft - scrollCache.getScrollLeft();\n        }\n        return left;\n    }\n    computeTop() {\n        let top = this.origRect.top;\n        for (let scrollCache of this.scrollCaches) {\n            top += scrollCache.origScrollTop - scrollCache.getScrollTop();\n        }\n        return top;\n    }\n    isWithinClipping(pageX, pageY) {\n        let point = { left: pageX, top: pageY };\n        for (let scrollCache of this.scrollCaches) {\n            if (!isIgnoredClipping(scrollCache.getEventTarget()) &&\n                !pointInsideRect(point, scrollCache.clientRect)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n// certain clipping containers should never constrain interactions, like <html> and <body>\n// https://github.com/fullcalendar/fullcalendar/issues/3615\nfunction isIgnoredClipping(node) {\n    let tagName = node.tagName;\n    return tagName === 'HTML' || tagName === 'BODY';\n}\n\n/*\nTracks movement over multiple droppable areas (aka \"hits\")\nthat exist in one or more DateComponents.\nRelies on an existing draggable.\n\nemits:\n- pointerdown\n- dragstart\n- hitchange - fires initially, even if not over a hit\n- pointerup\n- (hitchange - again, to null, if ended over a hit)\n- dragend\n*/\nclass HitDragging {\n    constructor(dragging, droppableStore) {\n        // options that can be set by caller\n        this.useSubjectCenter = false;\n        this.requireInitial = true; // if doesn't start out on a hit, won't emit any events\n        this.disablePointCheck = false;\n        this.initialHit = null;\n        this.movingHit = null;\n        this.finalHit = null; // won't ever be populated if shouldIgnoreMove\n        this.handlePointerDown = (ev) => {\n            let { dragging } = this;\n            this.initialHit = null;\n            this.movingHit = null;\n            this.finalHit = null;\n            this.prepareHits();\n            this.processFirstCoord(ev);\n            if (this.initialHit || !this.requireInitial) {\n                dragging.setIgnoreMove(false);\n                // TODO: fire this before computing processFirstCoord, so listeners can cancel. this gets fired by almost every handler :(\n                this.emitter.trigger('pointerdown', ev);\n            }\n            else {\n                dragging.setIgnoreMove(true);\n            }\n        };\n        this.handleDragStart = (ev) => {\n            this.emitter.trigger('dragstart', ev);\n            this.handleMove(ev, true); // force = fire even if initially null\n        };\n        this.handleDragMove = (ev) => {\n            this.emitter.trigger('dragmove', ev);\n            this.handleMove(ev);\n        };\n        this.handlePointerUp = (ev) => {\n            this.releaseHits();\n            this.emitter.trigger('pointerup', ev);\n        };\n        this.handleDragEnd = (ev) => {\n            if (this.movingHit) {\n                this.emitter.trigger('hitupdate', null, true, ev);\n            }\n            this.finalHit = this.movingHit;\n            this.movingHit = null;\n            this.emitter.trigger('dragend', ev);\n        };\n        this.droppableStore = droppableStore;\n        dragging.emitter.on('pointerdown', this.handlePointerDown);\n        dragging.emitter.on('dragstart', this.handleDragStart);\n        dragging.emitter.on('dragmove', this.handleDragMove);\n        dragging.emitter.on('pointerup', this.handlePointerUp);\n        dragging.emitter.on('dragend', this.handleDragEnd);\n        this.dragging = dragging;\n        this.emitter = new Emitter();\n    }\n    // sets initialHit\n    // sets coordAdjust\n    processFirstCoord(ev) {\n        let origPoint = { left: ev.pageX, top: ev.pageY };\n        let adjustedPoint = origPoint;\n        let subjectEl = ev.subjectEl;\n        let subjectRect;\n        if (subjectEl instanceof HTMLElement) { // i.e. not a Document/ShadowRoot\n            subjectRect = computeRect(subjectEl);\n            adjustedPoint = constrainPoint(adjustedPoint, subjectRect);\n        }\n        let initialHit = this.initialHit = this.queryHitForOffset(adjustedPoint.left, adjustedPoint.top);\n        if (initialHit) {\n            if (this.useSubjectCenter && subjectRect) {\n                let slicedSubjectRect = intersectRects(subjectRect, initialHit.rect);\n                if (slicedSubjectRect) {\n                    adjustedPoint = getRectCenter(slicedSubjectRect);\n                }\n            }\n            this.coordAdjust = diffPoints(adjustedPoint, origPoint);\n        }\n        else {\n            this.coordAdjust = { left: 0, top: 0 };\n        }\n    }\n    handleMove(ev, forceHandle) {\n        let hit = this.queryHitForOffset(ev.pageX + this.coordAdjust.left, ev.pageY + this.coordAdjust.top);\n        if (forceHandle || !isHitsEqual(this.movingHit, hit)) {\n            this.movingHit = hit;\n            this.emitter.trigger('hitupdate', hit, false, ev);\n        }\n    }\n    prepareHits() {\n        this.offsetTrackers = mapHash(this.droppableStore, (interactionSettings) => {\n            interactionSettings.component.prepareHits();\n            return new OffsetTracker(interactionSettings.el);\n        });\n    }\n    releaseHits() {\n        let { offsetTrackers } = this;\n        for (let id in offsetTrackers) {\n            offsetTrackers[id].destroy();\n        }\n        this.offsetTrackers = {};\n    }\n    queryHitForOffset(offsetLeft, offsetTop) {\n        let { droppableStore, offsetTrackers } = this;\n        let bestHit = null;\n        for (let id in droppableStore) {\n            let component = droppableStore[id].component;\n            let offsetTracker = offsetTrackers[id];\n            if (offsetTracker && // wasn't destroyed mid-drag\n                offsetTracker.isWithinClipping(offsetLeft, offsetTop)) {\n                let originLeft = offsetTracker.computeLeft();\n                let originTop = offsetTracker.computeTop();\n                let positionLeft = offsetLeft - originLeft;\n                let positionTop = offsetTop - originTop;\n                let { origRect } = offsetTracker;\n                let width = origRect.right - origRect.left;\n                let height = origRect.bottom - origRect.top;\n                if (\n                // must be within the element's bounds\n                positionLeft >= 0 && positionLeft < width &&\n                    positionTop >= 0 && positionTop < height) {\n                    let hit = component.queryHit(positionLeft, positionTop, width, height);\n                    if (hit && (\n                    // make sure the hit is within activeRange, meaning it's not a dead cell\n                    rangeContainsRange(hit.dateProfile.activeRange, hit.dateSpan.range)) &&\n                        // Ensure the component we are querying for the hit is accessibly my the pointer\n                        // Prevents obscured calendars (ex: under a modal dialog) from accepting hit\n                        // https://github.com/fullcalendar/fullcalendar/issues/5026\n                        (this.disablePointCheck ||\n                            offsetTracker.el.contains(offsetTracker.el.getRootNode().elementFromPoint(\n                            // add-back origins to get coordinate relative to top-left of window viewport\n                            positionLeft + originLeft - window.scrollX, positionTop + originTop - window.scrollY))) &&\n                        (!bestHit || hit.layer > bestHit.layer)) {\n                        hit.componentId = id;\n                        hit.context = component.context;\n                        // TODO: better way to re-orient rectangle\n                        hit.rect.left += originLeft;\n                        hit.rect.right += originLeft;\n                        hit.rect.top += originTop;\n                        hit.rect.bottom += originTop;\n                        bestHit = hit;\n                    }\n                }\n            }\n        }\n        return bestHit;\n    }\n}\nfunction isHitsEqual(hit0, hit1) {\n    if (!hit0 && !hit1) {\n        return true;\n    }\n    if (Boolean(hit0) !== Boolean(hit1)) {\n        return false;\n    }\n    return isDateSpansEqual(hit0.dateSpan, hit1.dateSpan);\n}\n\nfunction buildDatePointApiWithContext(dateSpan, context) {\n    let props = {};\n    for (let transform of context.pluginHooks.datePointTransforms) {\n        Object.assign(props, transform(dateSpan, context));\n    }\n    Object.assign(props, buildDatePointApi(dateSpan, context.dateEnv));\n    return props;\n}\nfunction buildDatePointApi(span, dateEnv) {\n    return {\n        date: dateEnv.toDate(span.range.start),\n        dateStr: dateEnv.formatIso(span.range.start, { omitTime: span.allDay }),\n        allDay: span.allDay,\n    };\n}\n\n/*\nMonitors when the user clicks on a specific date/time of a component.\nA pointerdown+pointerup on the same \"hit\" constitutes a click.\n*/\nclass DateClicking extends Interaction {\n    constructor(settings) {\n        super(settings);\n        this.handlePointerDown = (pev) => {\n            let { dragging } = this;\n            let downEl = pev.origEvent.target;\n            // do this in pointerdown (not dragend) because DOM might be mutated by the time dragend is fired\n            dragging.setIgnoreMove(!this.component.isValidDateDownEl(downEl));\n        };\n        // won't even fire if moving was ignored\n        this.handleDragEnd = (ev) => {\n            let { component } = this;\n            let { pointer } = this.dragging;\n            if (!pointer.wasTouchScroll) {\n                let { initialHit, finalHit } = this.hitDragging;\n                if (initialHit && finalHit && isHitsEqual(initialHit, finalHit)) {\n                    let { context } = component;\n                    let arg = Object.assign(Object.assign({}, buildDatePointApiWithContext(initialHit.dateSpan, context)), { dayEl: initialHit.dayEl, jsEvent: ev.origEvent, view: context.viewApi || context.calendarApi.view });\n                    context.emitter.trigger('dateClick', arg);\n                }\n            }\n        };\n        // we DO want to watch pointer moves because otherwise finalHit won't get populated\n        this.dragging = new FeaturefulElementDragging(settings.el);\n        this.dragging.autoScroller.isEnabled = false;\n        let hitDragging = this.hitDragging = new HitDragging(this.dragging, interactionSettingsToStore(settings));\n        hitDragging.emitter.on('pointerdown', this.handlePointerDown);\n        hitDragging.emitter.on('dragend', this.handleDragEnd);\n    }\n    destroy() {\n        this.dragging.destroy();\n    }\n}\n\n/*\nTracks when the user selects a portion of time of a component,\nconstituted by a drag over date cells, with a possible delay at the beginning of the drag.\n*/\nclass DateSelecting extends Interaction {\n    constructor(settings) {\n        super(settings);\n        this.dragSelection = null;\n        this.handlePointerDown = (ev) => {\n            let { component, dragging } = this;\n            let { options } = component.context;\n            let canSelect = options.selectable &&\n                component.isValidDateDownEl(ev.origEvent.target);\n            // don't bother to watch expensive moves if component won't do selection\n            dragging.setIgnoreMove(!canSelect);\n            // if touch, require user to hold down\n            dragging.delay = ev.isTouch ? getComponentTouchDelay$1(component) : null;\n        };\n        this.handleDragStart = (ev) => {\n            this.component.context.calendarApi.unselect(ev); // unselect previous selections\n        };\n        this.handleHitUpdate = (hit, isFinal) => {\n            let { context } = this.component;\n            let dragSelection = null;\n            let isInvalid = false;\n            if (hit) {\n                let initialHit = this.hitDragging.initialHit;\n                let disallowed = hit.componentId === initialHit.componentId\n                    && this.isHitComboAllowed\n                    && !this.isHitComboAllowed(initialHit, hit);\n                if (!disallowed) {\n                    dragSelection = joinHitsIntoSelection(initialHit, hit, context.pluginHooks.dateSelectionTransformers);\n                }\n                if (!dragSelection || !isDateSelectionValid(dragSelection, hit.dateProfile, context)) {\n                    isInvalid = true;\n                    dragSelection = null;\n                }\n            }\n            if (dragSelection) {\n                context.dispatch({ type: 'SELECT_DATES', selection: dragSelection });\n            }\n            else if (!isFinal) { // only unselect if moved away while dragging\n                context.dispatch({ type: 'UNSELECT_DATES' });\n            }\n            if (!isInvalid) {\n                enableCursor();\n            }\n            else {\n                disableCursor();\n            }\n            if (!isFinal) {\n                this.dragSelection = dragSelection; // only clear if moved away from all hits while dragging\n            }\n        };\n        this.handlePointerUp = (pev) => {\n            if (this.dragSelection) {\n                // selection is already rendered, so just need to report selection\n                triggerDateSelect(this.dragSelection, pev, this.component.context);\n                this.dragSelection = null;\n            }\n        };\n        let { component } = settings;\n        let { options } = component.context;\n        let dragging = this.dragging = new FeaturefulElementDragging(settings.el);\n        dragging.touchScrollAllowed = false;\n        dragging.minDistance = options.selectMinDistance || 0;\n        dragging.autoScroller.isEnabled = options.dragScroll;\n        let hitDragging = this.hitDragging = new HitDragging(this.dragging, interactionSettingsToStore(settings));\n        hitDragging.emitter.on('pointerdown', this.handlePointerDown);\n        hitDragging.emitter.on('dragstart', this.handleDragStart);\n        hitDragging.emitter.on('hitupdate', this.handleHitUpdate);\n        hitDragging.emitter.on('pointerup', this.handlePointerUp);\n    }\n    destroy() {\n        this.dragging.destroy();\n    }\n}\nfunction getComponentTouchDelay$1(component) {\n    let { options } = component.context;\n    let delay = options.selectLongPressDelay;\n    if (delay == null) {\n        delay = options.longPressDelay;\n    }\n    return delay;\n}\nfunction joinHitsIntoSelection(hit0, hit1, dateSelectionTransformers) {\n    let dateSpan0 = hit0.dateSpan;\n    let dateSpan1 = hit1.dateSpan;\n    let ms = [\n        dateSpan0.range.start,\n        dateSpan0.range.end,\n        dateSpan1.range.start,\n        dateSpan1.range.end,\n    ];\n    ms.sort(compareNumbers);\n    let props = {};\n    for (let transformer of dateSelectionTransformers) {\n        let res = transformer(hit0, hit1);\n        if (res === false) {\n            return null;\n        }\n        if (res) {\n            Object.assign(props, res);\n        }\n    }\n    props.range = { start: ms[0], end: ms[3] };\n    props.allDay = dateSpan0.allDay;\n    return props;\n}\n\nclass EventDragging extends Interaction {\n    constructor(settings) {\n        super(settings);\n        // internal state\n        this.subjectEl = null;\n        this.subjectSeg = null; // the seg being selected/dragged\n        this.isDragging = false;\n        this.eventRange = null;\n        this.relevantEvents = null; // the events being dragged\n        this.receivingContext = null;\n        this.validMutation = null;\n        this.mutatedRelevantEvents = null;\n        this.handlePointerDown = (ev) => {\n            let origTarget = ev.origEvent.target;\n            let { component, dragging } = this;\n            let { mirror } = dragging;\n            let { options } = component.context;\n            let initialContext = component.context;\n            this.subjectEl = ev.subjectEl;\n            let subjectSeg = this.subjectSeg = getElSeg(ev.subjectEl);\n            let eventRange = this.eventRange = subjectSeg.eventRange;\n            let eventInstanceId = eventRange.instance.instanceId;\n            this.relevantEvents = getRelevantEvents(initialContext.getCurrentData().eventStore, eventInstanceId);\n            dragging.minDistance = ev.isTouch ? 0 : options.eventDragMinDistance;\n            dragging.delay =\n                // only do a touch delay if touch and this event hasn't been selected yet\n                (ev.isTouch && eventInstanceId !== component.props.eventSelection) ?\n                    getComponentTouchDelay(component) :\n                    null;\n            if (options.fixedMirrorParent) {\n                mirror.parentNode = options.fixedMirrorParent;\n            }\n            else {\n                mirror.parentNode = elementClosest(origTarget, '.fc');\n            }\n            mirror.revertDuration = options.dragRevertDuration;\n            let isValid = component.isValidSegDownEl(origTarget) &&\n                !elementClosest(origTarget, '.fc-event-resizer'); // NOT on a resizer\n            dragging.setIgnoreMove(!isValid);\n            // disable dragging for elements that are resizable (ie, selectable)\n            // but are not draggable\n            this.isDragging = isValid &&\n                ev.subjectEl.classList.contains('fc-event-draggable');\n        };\n        this.handleDragStart = (ev) => {\n            let initialContext = this.component.context;\n            let eventRange = this.eventRange;\n            let eventInstanceId = eventRange.instance.instanceId;\n            if (ev.isTouch) {\n                // need to select a different event?\n                if (eventInstanceId !== this.component.props.eventSelection) {\n                    initialContext.dispatch({ type: 'SELECT_EVENT', eventInstanceId });\n                }\n            }\n            else {\n                // if now using mouse, but was previous touch interaction, clear selected event\n                initialContext.dispatch({ type: 'UNSELECT_EVENT' });\n            }\n            if (this.isDragging) {\n                initialContext.calendarApi.unselect(ev); // unselect *date* selection\n                initialContext.emitter.trigger('eventDragStart', {\n                    el: this.subjectEl,\n                    event: new EventImpl(initialContext, eventRange.def, eventRange.instance),\n                    jsEvent: ev.origEvent,\n                    view: initialContext.viewApi,\n                });\n            }\n        };\n        this.handleHitUpdate = (hit, isFinal) => {\n            if (!this.isDragging) {\n                return;\n            }\n            let relevantEvents = this.relevantEvents;\n            let initialHit = this.hitDragging.initialHit;\n            let initialContext = this.component.context;\n            // states based on new hit\n            let receivingContext = null;\n            let mutation = null;\n            let mutatedRelevantEvents = null;\n            let isInvalid = false;\n            let interaction = {\n                affectedEvents: relevantEvents,\n                mutatedEvents: createEmptyEventStore(),\n                isEvent: true,\n            };\n            if (hit) {\n                receivingContext = hit.context;\n                let receivingOptions = receivingContext.options;\n                if (initialContext === receivingContext ||\n                    (receivingOptions.editable && receivingOptions.droppable)) {\n                    mutation = computeEventMutation(initialHit, hit, this.eventRange.instance.range.start, receivingContext.getCurrentData().pluginHooks.eventDragMutationMassagers);\n                    if (mutation) {\n                        mutatedRelevantEvents = applyMutationToEventStore(relevantEvents, receivingContext.getCurrentData().eventUiBases, mutation, receivingContext);\n                        interaction.mutatedEvents = mutatedRelevantEvents;\n                        if (!isInteractionValid(interaction, hit.dateProfile, receivingContext)) {\n                            isInvalid = true;\n                            mutation = null;\n                            mutatedRelevantEvents = null;\n                            interaction.mutatedEvents = createEmptyEventStore();\n                        }\n                    }\n                }\n                else {\n                    receivingContext = null;\n                }\n            }\n            this.displayDrag(receivingContext, interaction);\n            if (!isInvalid) {\n                enableCursor();\n            }\n            else {\n                disableCursor();\n            }\n            if (!isFinal) {\n                if (initialContext === receivingContext && // TODO: write test for this\n                    isHitsEqual(initialHit, hit)) {\n                    mutation = null;\n                }\n                this.dragging.setMirrorNeedsRevert(!mutation);\n                // render the mirror if no already-rendered mirror\n                // TODO: wish we could somehow wait for dispatch to guarantee render\n                this.dragging.setMirrorIsVisible(!hit || !this.subjectEl.getRootNode().querySelector('.fc-event-mirror'));\n                // assign states based on new hit\n                this.receivingContext = receivingContext;\n                this.validMutation = mutation;\n                this.mutatedRelevantEvents = mutatedRelevantEvents;\n            }\n        };\n        this.handlePointerUp = () => {\n            if (!this.isDragging) {\n                this.cleanup(); // because handleDragEnd won't fire\n            }\n        };\n        this.handleDragEnd = (ev) => {\n            if (this.isDragging) {\n                let initialContext = this.component.context;\n                let initialView = initialContext.viewApi;\n                let { receivingContext, validMutation } = this;\n                let eventDef = this.eventRange.def;\n                let eventInstance = this.eventRange.instance;\n                let eventApi = new EventImpl(initialContext, eventDef, eventInstance);\n                let relevantEvents = this.relevantEvents;\n                let mutatedRelevantEvents = this.mutatedRelevantEvents;\n                let { finalHit } = this.hitDragging;\n                this.clearDrag(); // must happen after revert animation\n                initialContext.emitter.trigger('eventDragStop', {\n                    el: this.subjectEl,\n                    event: eventApi,\n                    jsEvent: ev.origEvent,\n                    view: initialView,\n                });\n                if (validMutation) {\n                    // dropped within same calendar\n                    if (receivingContext === initialContext) {\n                        let updatedEventApi = new EventImpl(initialContext, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null);\n                        initialContext.dispatch({\n                            type: 'MERGE_EVENTS',\n                            eventStore: mutatedRelevantEvents,\n                        });\n                        let eventChangeArg = {\n                            oldEvent: eventApi,\n                            event: updatedEventApi,\n                            relatedEvents: buildEventApis(mutatedRelevantEvents, initialContext, eventInstance),\n                            revert() {\n                                initialContext.dispatch({\n                                    type: 'MERGE_EVENTS',\n                                    eventStore: relevantEvents, // the pre-change data\n                                });\n                            },\n                        };\n                        let transformed = {};\n                        for (let transformer of initialContext.getCurrentData().pluginHooks.eventDropTransformers) {\n                            Object.assign(transformed, transformer(validMutation, initialContext));\n                        }\n                        initialContext.emitter.trigger('eventDrop', Object.assign(Object.assign(Object.assign({}, eventChangeArg), transformed), { el: ev.subjectEl, delta: validMutation.datesDelta, jsEvent: ev.origEvent, view: initialView }));\n                        initialContext.emitter.trigger('eventChange', eventChangeArg);\n                        // dropped in different calendar\n                    }\n                    else if (receivingContext) {\n                        let eventRemoveArg = {\n                            event: eventApi,\n                            relatedEvents: buildEventApis(relevantEvents, initialContext, eventInstance),\n                            revert() {\n                                initialContext.dispatch({\n                                    type: 'MERGE_EVENTS',\n                                    eventStore: relevantEvents,\n                                });\n                            },\n                        };\n                        initialContext.emitter.trigger('eventLeave', Object.assign(Object.assign({}, eventRemoveArg), { draggedEl: ev.subjectEl, view: initialView }));\n                        initialContext.dispatch({\n                            type: 'REMOVE_EVENTS',\n                            eventStore: relevantEvents,\n                        });\n                        initialContext.emitter.trigger('eventRemove', eventRemoveArg);\n                        let addedEventDef = mutatedRelevantEvents.defs[eventDef.defId];\n                        let addedEventInstance = mutatedRelevantEvents.instances[eventInstance.instanceId];\n                        let addedEventApi = new EventImpl(receivingContext, addedEventDef, addedEventInstance);\n                        receivingContext.dispatch({\n                            type: 'MERGE_EVENTS',\n                            eventStore: mutatedRelevantEvents,\n                        });\n                        let eventAddArg = {\n                            event: addedEventApi,\n                            relatedEvents: buildEventApis(mutatedRelevantEvents, receivingContext, addedEventInstance),\n                            revert() {\n                                receivingContext.dispatch({\n                                    type: 'REMOVE_EVENTS',\n                                    eventStore: mutatedRelevantEvents,\n                                });\n                            },\n                        };\n                        receivingContext.emitter.trigger('eventAdd', eventAddArg);\n                        if (ev.isTouch) {\n                            receivingContext.dispatch({\n                                type: 'SELECT_EVENT',\n                                eventInstanceId: eventInstance.instanceId,\n                            });\n                        }\n                        receivingContext.emitter.trigger('drop', Object.assign(Object.assign({}, buildDatePointApiWithContext(finalHit.dateSpan, receivingContext)), { draggedEl: ev.subjectEl, jsEvent: ev.origEvent, view: finalHit.context.viewApi }));\n                        receivingContext.emitter.trigger('eventReceive', Object.assign(Object.assign({}, eventAddArg), { draggedEl: ev.subjectEl, view: finalHit.context.viewApi }));\n                    }\n                }\n                else {\n                    initialContext.emitter.trigger('_noEventDrop');\n                }\n            }\n            this.cleanup();\n        };\n        let { component } = this;\n        let { options } = component.context;\n        let dragging = this.dragging = new FeaturefulElementDragging(settings.el);\n        dragging.pointer.selector = EventDragging.SELECTOR;\n        dragging.touchScrollAllowed = false;\n        dragging.autoScroller.isEnabled = options.dragScroll;\n        let hitDragging = this.hitDragging = new HitDragging(this.dragging, interactionSettingsStore);\n        hitDragging.useSubjectCenter = settings.useEventCenter;\n        hitDragging.emitter.on('pointerdown', this.handlePointerDown);\n        hitDragging.emitter.on('dragstart', this.handleDragStart);\n        hitDragging.emitter.on('hitupdate', this.handleHitUpdate);\n        hitDragging.emitter.on('pointerup', this.handlePointerUp);\n        hitDragging.emitter.on('dragend', this.handleDragEnd);\n    }\n    destroy() {\n        this.dragging.destroy();\n    }\n    // render a drag state on the next receivingCalendar\n    displayDrag(nextContext, state) {\n        let initialContext = this.component.context;\n        let prevContext = this.receivingContext;\n        // does the previous calendar need to be cleared?\n        if (prevContext && prevContext !== nextContext) {\n            // does the initial calendar need to be cleared?\n            // if so, don't clear all the way. we still need to to hide the affectedEvents\n            if (prevContext === initialContext) {\n                prevContext.dispatch({\n                    type: 'SET_EVENT_DRAG',\n                    state: {\n                        affectedEvents: state.affectedEvents,\n                        mutatedEvents: createEmptyEventStore(),\n                        isEvent: true,\n                    },\n                });\n                // completely clear the old calendar if it wasn't the initial\n            }\n            else {\n                prevContext.dispatch({ type: 'UNSET_EVENT_DRAG' });\n            }\n        }\n        if (nextContext) {\n            nextContext.dispatch({ type: 'SET_EVENT_DRAG', state });\n        }\n    }\n    clearDrag() {\n        let initialCalendar = this.component.context;\n        let { receivingContext } = this;\n        if (receivingContext) {\n            receivingContext.dispatch({ type: 'UNSET_EVENT_DRAG' });\n        }\n        // the initial calendar might have an dummy drag state from displayDrag\n        if (initialCalendar !== receivingContext) {\n            initialCalendar.dispatch({ type: 'UNSET_EVENT_DRAG' });\n        }\n    }\n    cleanup() {\n        this.subjectSeg = null;\n        this.isDragging = false;\n        this.eventRange = null;\n        this.relevantEvents = null;\n        this.receivingContext = null;\n        this.validMutation = null;\n        this.mutatedRelevantEvents = null;\n    }\n}\n// TODO: test this in IE11\n// QUESTION: why do we need it on the resizable???\nEventDragging.SELECTOR = '.fc-event-draggable, .fc-event-resizable';\nfunction computeEventMutation(hit0, hit1, eventInstanceStart, massagers) {\n    let dateSpan0 = hit0.dateSpan;\n    let dateSpan1 = hit1.dateSpan;\n    let date0 = dateSpan0.range.start;\n    let date1 = dateSpan1.range.start;\n    let standardProps = {};\n    if (dateSpan0.allDay !== dateSpan1.allDay) {\n        standardProps.allDay = dateSpan1.allDay;\n        standardProps.hasEnd = hit1.context.options.allDayMaintainDuration;\n        if (dateSpan1.allDay) {\n            // means date1 is already start-of-day,\n            // but date0 needs to be converted\n            date0 = startOfDay(eventInstanceStart);\n        }\n        else {\n            // Moving from allDate->timed\n            // Doesn't matter where on the event the drag began, mutate the event's start-date to date1\n            date0 = eventInstanceStart;\n        }\n    }\n    let delta = diffDates(date0, date1, hit0.context.dateEnv, hit0.componentId === hit1.componentId ?\n        hit0.largeUnit :\n        null);\n    if (delta.milliseconds) { // has hours/minutes/seconds\n        standardProps.allDay = false;\n    }\n    let mutation = {\n        datesDelta: delta,\n        standardProps,\n    };\n    for (let massager of massagers) {\n        massager(mutation, hit0, hit1);\n    }\n    return mutation;\n}\nfunction getComponentTouchDelay(component) {\n    let { options } = component.context;\n    let delay = options.eventLongPressDelay;\n    if (delay == null) {\n        delay = options.longPressDelay;\n    }\n    return delay;\n}\n\nclass EventResizing extends Interaction {\n    constructor(settings) {\n        super(settings);\n        // internal state\n        this.draggingSegEl = null;\n        this.draggingSeg = null; // TODO: rename to resizingSeg? subjectSeg?\n        this.eventRange = null;\n        this.relevantEvents = null;\n        this.validMutation = null;\n        this.mutatedRelevantEvents = null;\n        this.handlePointerDown = (ev) => {\n            let { component } = this;\n            let segEl = this.querySegEl(ev);\n            let seg = getElSeg(segEl);\n            let eventRange = this.eventRange = seg.eventRange;\n            this.dragging.minDistance = component.context.options.eventDragMinDistance;\n            // if touch, need to be working with a selected event\n            this.dragging.setIgnoreMove(!this.component.isValidSegDownEl(ev.origEvent.target) ||\n                (ev.isTouch && this.component.props.eventSelection !== eventRange.instance.instanceId));\n        };\n        this.handleDragStart = (ev) => {\n            let { context } = this.component;\n            let eventRange = this.eventRange;\n            this.relevantEvents = getRelevantEvents(context.getCurrentData().eventStore, this.eventRange.instance.instanceId);\n            let segEl = this.querySegEl(ev);\n            this.draggingSegEl = segEl;\n            this.draggingSeg = getElSeg(segEl);\n            context.calendarApi.unselect();\n            context.emitter.trigger('eventResizeStart', {\n                el: segEl,\n                event: new EventImpl(context, eventRange.def, eventRange.instance),\n                jsEvent: ev.origEvent,\n                view: context.viewApi,\n            });\n        };\n        this.handleHitUpdate = (hit, isFinal, ev) => {\n            let { context } = this.component;\n            let relevantEvents = this.relevantEvents;\n            let initialHit = this.hitDragging.initialHit;\n            let eventInstance = this.eventRange.instance;\n            let mutation = null;\n            let mutatedRelevantEvents = null;\n            let isInvalid = false;\n            let interaction = {\n                affectedEvents: relevantEvents,\n                mutatedEvents: createEmptyEventStore(),\n                isEvent: true,\n            };\n            if (hit) {\n                let disallowed = hit.componentId === initialHit.componentId\n                    && this.isHitComboAllowed\n                    && !this.isHitComboAllowed(initialHit, hit);\n                if (!disallowed) {\n                    mutation = computeMutation(initialHit, hit, ev.subjectEl.classList.contains('fc-event-resizer-start'), eventInstance.range);\n                }\n            }\n            if (mutation) {\n                mutatedRelevantEvents = applyMutationToEventStore(relevantEvents, context.getCurrentData().eventUiBases, mutation, context);\n                interaction.mutatedEvents = mutatedRelevantEvents;\n                if (!isInteractionValid(interaction, hit.dateProfile, context)) {\n                    isInvalid = true;\n                    mutation = null;\n                    mutatedRelevantEvents = null;\n                    interaction.mutatedEvents = null;\n                }\n            }\n            if (mutatedRelevantEvents) {\n                context.dispatch({\n                    type: 'SET_EVENT_RESIZE',\n                    state: interaction,\n                });\n            }\n            else {\n                context.dispatch({ type: 'UNSET_EVENT_RESIZE' });\n            }\n            if (!isInvalid) {\n                enableCursor();\n            }\n            else {\n                disableCursor();\n            }\n            if (!isFinal) {\n                if (mutation && isHitsEqual(initialHit, hit)) {\n                    mutation = null;\n                }\n                this.validMutation = mutation;\n                this.mutatedRelevantEvents = mutatedRelevantEvents;\n            }\n        };\n        this.handleDragEnd = (ev) => {\n            let { context } = this.component;\n            let eventDef = this.eventRange.def;\n            let eventInstance = this.eventRange.instance;\n            let eventApi = new EventImpl(context, eventDef, eventInstance);\n            let relevantEvents = this.relevantEvents;\n            let mutatedRelevantEvents = this.mutatedRelevantEvents;\n            context.emitter.trigger('eventResizeStop', {\n                el: this.draggingSegEl,\n                event: eventApi,\n                jsEvent: ev.origEvent,\n                view: context.viewApi,\n            });\n            if (this.validMutation) {\n                let updatedEventApi = new EventImpl(context, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null);\n                context.dispatch({\n                    type: 'MERGE_EVENTS',\n                    eventStore: mutatedRelevantEvents,\n                });\n                let eventChangeArg = {\n                    oldEvent: eventApi,\n                    event: updatedEventApi,\n                    relatedEvents: buildEventApis(mutatedRelevantEvents, context, eventInstance),\n                    revert() {\n                        context.dispatch({\n                            type: 'MERGE_EVENTS',\n                            eventStore: relevantEvents, // the pre-change events\n                        });\n                    },\n                };\n                context.emitter.trigger('eventResize', Object.assign(Object.assign({}, eventChangeArg), { el: this.draggingSegEl, startDelta: this.validMutation.startDelta || createDuration(0), endDelta: this.validMutation.endDelta || createDuration(0), jsEvent: ev.origEvent, view: context.viewApi }));\n                context.emitter.trigger('eventChange', eventChangeArg);\n            }\n            else {\n                context.emitter.trigger('_noEventResize');\n            }\n            // reset all internal state\n            this.draggingSeg = null;\n            this.relevantEvents = null;\n            this.validMutation = null;\n            // okay to keep eventInstance around. useful to set it in handlePointerDown\n        };\n        let { component } = settings;\n        let dragging = this.dragging = new FeaturefulElementDragging(settings.el);\n        dragging.pointer.selector = '.fc-event-resizer';\n        dragging.touchScrollAllowed = false;\n        dragging.autoScroller.isEnabled = component.context.options.dragScroll;\n        let hitDragging = this.hitDragging = new HitDragging(this.dragging, interactionSettingsToStore(settings));\n        hitDragging.emitter.on('pointerdown', this.handlePointerDown);\n        hitDragging.emitter.on('dragstart', this.handleDragStart);\n        hitDragging.emitter.on('hitupdate', this.handleHitUpdate);\n        hitDragging.emitter.on('dragend', this.handleDragEnd);\n    }\n    destroy() {\n        this.dragging.destroy();\n    }\n    querySegEl(ev) {\n        return elementClosest(ev.subjectEl, '.fc-event');\n    }\n}\nfunction computeMutation(hit0, hit1, isFromStart, instanceRange) {\n    let dateEnv = hit0.context.dateEnv;\n    let date0 = hit0.dateSpan.range.start;\n    let date1 = hit1.dateSpan.range.start;\n    let delta = diffDates(date0, date1, dateEnv, hit0.largeUnit);\n    if (isFromStart) {\n        if (dateEnv.add(instanceRange.start, delta) < instanceRange.end) {\n            return { startDelta: delta };\n        }\n    }\n    else if (dateEnv.add(instanceRange.end, delta) > instanceRange.start) {\n        return { endDelta: delta };\n    }\n    return null;\n}\n\nclass UnselectAuto {\n    constructor(context) {\n        this.context = context;\n        this.isRecentPointerDateSelect = false; // wish we could use a selector to detect date selection, but uses hit system\n        this.matchesCancel = false;\n        this.matchesEvent = false;\n        this.onSelect = (selectInfo) => {\n            if (selectInfo.jsEvent) {\n                this.isRecentPointerDateSelect = true;\n            }\n        };\n        this.onDocumentPointerDown = (pev) => {\n            let unselectCancel = this.context.options.unselectCancel;\n            let downEl = getEventTargetViaRoot(pev.origEvent);\n            this.matchesCancel = !!elementClosest(downEl, unselectCancel);\n            this.matchesEvent = !!elementClosest(downEl, EventDragging.SELECTOR); // interaction started on an event?\n        };\n        this.onDocumentPointerUp = (pev) => {\n            let { context } = this;\n            let { documentPointer } = this;\n            let calendarState = context.getCurrentData();\n            // touch-scrolling should never unfocus any type of selection\n            if (!documentPointer.wasTouchScroll) {\n                if (calendarState.dateSelection && // an existing date selection?\n                    !this.isRecentPointerDateSelect // a new pointer-initiated date selection since last onDocumentPointerUp?\n                ) {\n                    let unselectAuto = context.options.unselectAuto;\n                    if (unselectAuto && (!unselectAuto || !this.matchesCancel)) {\n                        context.calendarApi.unselect(pev);\n                    }\n                }\n                if (calendarState.eventSelection && // an existing event selected?\n                    !this.matchesEvent // interaction DIDN'T start on an event\n                ) {\n                    context.dispatch({ type: 'UNSELECT_EVENT' });\n                }\n            }\n            this.isRecentPointerDateSelect = false;\n        };\n        let documentPointer = this.documentPointer = new PointerDragging(document);\n        documentPointer.shouldIgnoreMove = true;\n        documentPointer.shouldWatchScroll = false;\n        documentPointer.emitter.on('pointerdown', this.onDocumentPointerDown);\n        documentPointer.emitter.on('pointerup', this.onDocumentPointerUp);\n        /*\n        TODO: better way to know about whether there was a selection with the pointer\n        */\n        context.emitter.on('select', this.onSelect);\n    }\n    destroy() {\n        this.context.emitter.off('select', this.onSelect);\n        this.documentPointer.destroy();\n    }\n}\n\nconst OPTION_REFINERS = {\n    fixedMirrorParent: identity,\n};\nconst LISTENER_REFINERS = {\n    dateClick: identity,\n    eventDragStart: identity,\n    eventDragStop: identity,\n    eventDrop: identity,\n    eventResizeStart: identity,\n    eventResizeStop: identity,\n    eventResize: identity,\n    drop: identity,\n    eventReceive: identity,\n    eventLeave: identity,\n};\n\n/*\nGiven an already instantiated draggable object for one-or-more elements,\nInterprets any dragging as an attempt to drag an events that lives outside\nof a calendar onto a calendar.\n*/\nclass ExternalElementDragging {\n    constructor(dragging, suppliedDragMeta) {\n        this.receivingContext = null;\n        this.droppableEvent = null; // will exist for all drags, even if create:false\n        this.suppliedDragMeta = null;\n        this.dragMeta = null;\n        this.handleDragStart = (ev) => {\n            this.dragMeta = this.buildDragMeta(ev.subjectEl);\n        };\n        this.handleHitUpdate = (hit, isFinal, ev) => {\n            let { dragging } = this.hitDragging;\n            let receivingContext = null;\n            let droppableEvent = null;\n            let isInvalid = false;\n            let interaction = {\n                affectedEvents: createEmptyEventStore(),\n                mutatedEvents: createEmptyEventStore(),\n                isEvent: this.dragMeta.create,\n            };\n            if (hit) {\n                receivingContext = hit.context;\n                if (this.canDropElOnCalendar(ev.subjectEl, receivingContext)) {\n                    droppableEvent = computeEventForDateSpan(hit.dateSpan, this.dragMeta, receivingContext);\n                    interaction.mutatedEvents = eventTupleToStore(droppableEvent);\n                    isInvalid = !isInteractionValid(interaction, hit.dateProfile, receivingContext);\n                    if (isInvalid) {\n                        interaction.mutatedEvents = createEmptyEventStore();\n                        droppableEvent = null;\n                    }\n                }\n            }\n            this.displayDrag(receivingContext, interaction);\n            // show mirror if no already-rendered mirror element OR if we are shutting down the mirror (?)\n            // TODO: wish we could somehow wait for dispatch to guarantee render\n            dragging.setMirrorIsVisible(isFinal || !droppableEvent || !document.querySelector('.fc-event-mirror'));\n            if (!isInvalid) {\n                enableCursor();\n            }\n            else {\n                disableCursor();\n            }\n            if (!isFinal) {\n                dragging.setMirrorNeedsRevert(!droppableEvent);\n                this.receivingContext = receivingContext;\n                this.droppableEvent = droppableEvent;\n            }\n        };\n        this.handleDragEnd = (pev) => {\n            let { receivingContext, droppableEvent } = this;\n            this.clearDrag();\n            if (receivingContext && droppableEvent) {\n                let finalHit = this.hitDragging.finalHit;\n                let finalView = finalHit.context.viewApi;\n                let dragMeta = this.dragMeta;\n                receivingContext.emitter.trigger('drop', Object.assign(Object.assign({}, buildDatePointApiWithContext(finalHit.dateSpan, receivingContext)), { draggedEl: pev.subjectEl, jsEvent: pev.origEvent, view: finalView }));\n                if (dragMeta.create) {\n                    let addingEvents = eventTupleToStore(droppableEvent);\n                    receivingContext.dispatch({\n                        type: 'MERGE_EVENTS',\n                        eventStore: addingEvents,\n                    });\n                    if (pev.isTouch) {\n                        receivingContext.dispatch({\n                            type: 'SELECT_EVENT',\n                            eventInstanceId: droppableEvent.instance.instanceId,\n                        });\n                    }\n                    // signal that an external event landed\n                    receivingContext.emitter.trigger('eventReceive', {\n                        event: new EventImpl(receivingContext, droppableEvent.def, droppableEvent.instance),\n                        relatedEvents: [],\n                        revert() {\n                            receivingContext.dispatch({\n                                type: 'REMOVE_EVENTS',\n                                eventStore: addingEvents,\n                            });\n                        },\n                        draggedEl: pev.subjectEl,\n                        view: finalView,\n                    });\n                }\n            }\n            this.receivingContext = null;\n            this.droppableEvent = null;\n        };\n        let hitDragging = this.hitDragging = new HitDragging(dragging, interactionSettingsStore);\n        hitDragging.requireInitial = false; // will start outside of a component\n        hitDragging.emitter.on('dragstart', this.handleDragStart);\n        hitDragging.emitter.on('hitupdate', this.handleHitUpdate);\n        hitDragging.emitter.on('dragend', this.handleDragEnd);\n        this.suppliedDragMeta = suppliedDragMeta;\n    }\n    buildDragMeta(subjectEl) {\n        if (typeof this.suppliedDragMeta === 'object') {\n            return parseDragMeta(this.suppliedDragMeta);\n        }\n        if (typeof this.suppliedDragMeta === 'function') {\n            return parseDragMeta(this.suppliedDragMeta(subjectEl));\n        }\n        return getDragMetaFromEl(subjectEl);\n    }\n    displayDrag(nextContext, state) {\n        let prevContext = this.receivingContext;\n        if (prevContext && prevContext !== nextContext) {\n            prevContext.dispatch({ type: 'UNSET_EVENT_DRAG' });\n        }\n        if (nextContext) {\n            nextContext.dispatch({ type: 'SET_EVENT_DRAG', state });\n        }\n    }\n    clearDrag() {\n        if (this.receivingContext) {\n            this.receivingContext.dispatch({ type: 'UNSET_EVENT_DRAG' });\n        }\n    }\n    canDropElOnCalendar(el, receivingContext) {\n        let dropAccept = receivingContext.options.dropAccept;\n        if (typeof dropAccept === 'function') {\n            return dropAccept.call(receivingContext.calendarApi, el);\n        }\n        if (typeof dropAccept === 'string' && dropAccept) {\n            return Boolean(elementMatches(el, dropAccept));\n        }\n        return true;\n    }\n}\n// Utils for computing event store from the DragMeta\n// ----------------------------------------------------------------------------------------------------\nfunction computeEventForDateSpan(dateSpan, dragMeta, context) {\n    let defProps = Object.assign({}, dragMeta.leftoverProps);\n    for (let transform of context.pluginHooks.externalDefTransforms) {\n        Object.assign(defProps, transform(dateSpan, dragMeta));\n    }\n    let { refined, extra } = refineEventDef(defProps, context);\n    let def = parseEventDef(refined, extra, dragMeta.sourceId, dateSpan.allDay, context.options.forceEventDuration || Boolean(dragMeta.duration), // hasEnd\n    context);\n    let start = dateSpan.range.start;\n    // only rely on time info if drop zone is all-day,\n    // otherwise, we already know the time\n    if (dateSpan.allDay && dragMeta.startTime) {\n        start = context.dateEnv.add(start, dragMeta.startTime);\n    }\n    let end = dragMeta.duration ?\n        context.dateEnv.add(start, dragMeta.duration) :\n        getDefaultEventEnd(dateSpan.allDay, start, context);\n    let instance = createEventInstance(def.defId, { start, end });\n    return { def, instance };\n}\n// Utils for extracting data from element\n// ----------------------------------------------------------------------------------------------------\nfunction getDragMetaFromEl(el) {\n    let str = getEmbeddedElData(el, 'event');\n    let obj = str ?\n        JSON.parse(str) :\n        { create: false }; // if no embedded data, assume no event creation\n    return parseDragMeta(obj);\n}\nconfig.dataAttrPrefix = '';\nfunction getEmbeddedElData(el, name) {\n    let prefix = config.dataAttrPrefix;\n    let prefixedName = (prefix ? prefix + '-' : '') + name;\n    return el.getAttribute('data-' + prefixedName) || '';\n}\n\n/*\nMakes an element (that is *external* to any calendar) draggable.\nCan pass in data that determines how an event will be created when dropped onto a calendar.\nLeverages FullCalendar's internal drag-n-drop functionality WITHOUT a third-party drag system.\n*/\nclass ExternalDraggable {\n    constructor(el, settings = {}) {\n        this.handlePointerDown = (ev) => {\n            let { dragging } = this;\n            let { minDistance, longPressDelay } = this.settings;\n            dragging.minDistance =\n                minDistance != null ?\n                    minDistance :\n                    (ev.isTouch ? 0 : BASE_OPTION_DEFAULTS.eventDragMinDistance);\n            dragging.delay =\n                ev.isTouch ? // TODO: eventually read eventLongPressDelay instead vvv\n                    (longPressDelay != null ? longPressDelay : BASE_OPTION_DEFAULTS.longPressDelay) :\n                    0;\n        };\n        this.handleDragStart = (ev) => {\n            if (ev.isTouch &&\n                this.dragging.delay &&\n                ev.subjectEl.classList.contains('fc-event')) {\n                this.dragging.mirror.getMirrorEl().classList.add('fc-event-selected');\n            }\n        };\n        this.settings = settings;\n        let dragging = this.dragging = new FeaturefulElementDragging(el);\n        dragging.touchScrollAllowed = false;\n        if (settings.itemSelector != null) {\n            dragging.pointer.selector = settings.itemSelector;\n        }\n        if (settings.appendTo != null) {\n            dragging.mirror.parentNode = settings.appendTo; // TODO: write tests\n        }\n        dragging.emitter.on('pointerdown', this.handlePointerDown);\n        dragging.emitter.on('dragstart', this.handleDragStart);\n        new ExternalElementDragging(dragging, settings.eventData); // eslint-disable-line no-new\n    }\n    destroy() {\n        this.dragging.destroy();\n    }\n}\n\n/*\nDetects when a *THIRD-PARTY* drag-n-drop system interacts with elements.\nThe third-party system is responsible for drawing the visuals effects of the drag.\nThis class simply monitors for pointer movements and fires events.\nIt also has the ability to hide the moving element (the \"mirror\") during the drag.\n*/\nclass InferredElementDragging extends ElementDragging {\n    constructor(containerEl) {\n        super(containerEl);\n        this.shouldIgnoreMove = false;\n        this.mirrorSelector = '';\n        this.currentMirrorEl = null;\n        this.handlePointerDown = (ev) => {\n            this.emitter.trigger('pointerdown', ev);\n            if (!this.shouldIgnoreMove) {\n                // fire dragstart right away. does not support delay or min-distance\n                this.emitter.trigger('dragstart', ev);\n            }\n        };\n        this.handlePointerMove = (ev) => {\n            if (!this.shouldIgnoreMove) {\n                this.emitter.trigger('dragmove', ev);\n            }\n        };\n        this.handlePointerUp = (ev) => {\n            this.emitter.trigger('pointerup', ev);\n            if (!this.shouldIgnoreMove) {\n                // fire dragend right away. does not support a revert animation\n                this.emitter.trigger('dragend', ev);\n            }\n        };\n        let pointer = this.pointer = new PointerDragging(containerEl);\n        pointer.emitter.on('pointerdown', this.handlePointerDown);\n        pointer.emitter.on('pointermove', this.handlePointerMove);\n        pointer.emitter.on('pointerup', this.handlePointerUp);\n    }\n    destroy() {\n        this.pointer.destroy();\n    }\n    setIgnoreMove(bool) {\n        this.shouldIgnoreMove = bool;\n    }\n    setMirrorIsVisible(bool) {\n        if (bool) {\n            // restore a previously hidden element.\n            // use the reference in case the selector class has already been removed.\n            if (this.currentMirrorEl) {\n                this.currentMirrorEl.style.visibility = '';\n                this.currentMirrorEl = null;\n            }\n        }\n        else {\n            let mirrorEl = this.mirrorSelector\n                // TODO: somehow query FullCalendars WITHIN shadow-roots\n                ? document.querySelector(this.mirrorSelector)\n                : null;\n            if (mirrorEl) {\n                this.currentMirrorEl = mirrorEl;\n                mirrorEl.style.visibility = 'hidden';\n            }\n        }\n    }\n}\n\n/*\nBridges third-party drag-n-drop systems with FullCalendar.\nMust be instantiated and destroyed by caller.\n*/\nclass ThirdPartyDraggable {\n    constructor(containerOrSettings, settings) {\n        let containerEl = document;\n        if (\n        // wish we could just test instanceof EventTarget, but doesn't work in IE11\n        containerOrSettings === document ||\n            containerOrSettings instanceof Element) {\n            containerEl = containerOrSettings;\n            settings = settings || {};\n        }\n        else {\n            settings = (containerOrSettings || {});\n        }\n        let dragging = this.dragging = new InferredElementDragging(containerEl);\n        if (typeof settings.itemSelector === 'string') {\n            dragging.pointer.selector = settings.itemSelector;\n        }\n        else if (containerEl === document) {\n            dragging.pointer.selector = '[data-event]';\n        }\n        if (typeof settings.mirrorSelector === 'string') {\n            dragging.mirrorSelector = settings.mirrorSelector;\n        }\n        let externalDragging = new ExternalElementDragging(dragging, settings.eventData);\n        // The hit-detection system requires that the dnd-mirror-element be pointer-events:none,\n        // but this can't be guaranteed for third-party draggables, so disable\n        externalDragging.hitDragging.disablePointCheck = true;\n    }\n    destroy() {\n        this.dragging.destroy();\n    }\n}\n\nvar index = createPlugin({\n    name: '@fullcalendar/interaction',\n    componentInteractions: [DateClicking, DateSelecting, EventDragging, EventResizing],\n    calendarInteractions: [UnselectAuto],\n    elementDraggingImpl: FeaturefulElementDragging,\n    optionRefiners: OPTION_REFINERS,\n    listenerRefiners: LISTENER_REFINERS,\n});\n\nexport { ExternalDraggable as Draggable, ThirdPartyDraggable, index as default };\n","import { JsonRequestError, createPlugin } from '@fullcalendar/core/index.js';\nimport { requestJson, addDays, identity } from '@fullcalendar/core/internal.js';\n\n// TODO: expose somehow\nconst API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';\nconst eventSourceDef = {\n    parseMeta(refined) {\n        let { googleCalendarId } = refined;\n        if (!googleCalendarId && refined.url) {\n            googleCalendarId = parseGoogleCalendarId(refined.url);\n        }\n        if (googleCalendarId) {\n            return {\n                googleCalendarId,\n                googleCalendarApiKey: refined.googleCalendarApiKey,\n                googleCalendarApiBase: refined.googleCalendarApiBase,\n                extraParams: refined.extraParams,\n            };\n        }\n        return null;\n    },\n    fetch(arg, successCallback, errorCallback) {\n        let { dateEnv, options } = arg.context;\n        let meta = arg.eventSource.meta;\n        let apiKey = meta.googleCalendarApiKey || options.googleCalendarApiKey;\n        if (!apiKey) {\n            errorCallback(new Error('Specify a googleCalendarApiKey. See https://fullcalendar.io/docs/google-calendar'));\n        }\n        else {\n            let url = buildUrl(meta);\n            // TODO: make DRY with json-feed-event-source\n            let { extraParams } = meta;\n            let extraParamsObj = typeof extraParams === 'function' ? extraParams() : extraParams;\n            let requestParams = buildRequestParams(arg.range, apiKey, extraParamsObj, dateEnv);\n            return requestJson('GET', url, requestParams).then(([body, response]) => {\n                if (body.error) {\n                    errorCallback(new JsonRequestError('Google Calendar API: ' + body.error.message, response));\n                }\n                else {\n                    successCallback({\n                        rawEvents: gcalItemsToRawEventDefs(body.items, requestParams.timeZone),\n                        response,\n                    });\n                }\n            }, errorCallback);\n        }\n    },\n};\nfunction parseGoogleCalendarId(url) {\n    let match;\n    // detect if the ID was specified as a single string.\n    // will match calendars like \"asdf1234@calendar.google.com\" in addition to person email calendars.\n    if (/^[^/]+@([^/.]+\\.)*(google|googlemail|gmail)\\.com$/.test(url)) {\n        return url;\n    }\n    if ((match = /^https:\\/\\/www.googleapis.com\\/calendar\\/v3\\/calendars\\/([^/]*)/.exec(url)) ||\n        (match = /^https?:\\/\\/www.google.com\\/calendar\\/feeds\\/([^/]*)/.exec(url))) {\n        return decodeURIComponent(match[1]);\n    }\n    return null;\n}\nfunction buildUrl(meta) {\n    let apiBase = meta.googleCalendarApiBase;\n    if (!apiBase) {\n        apiBase = API_BASE;\n    }\n    return apiBase + '/' + encodeURIComponent(meta.googleCalendarId) + '/events';\n}\nfunction buildRequestParams(range, apiKey, extraParams, dateEnv) {\n    let params;\n    let startStr;\n    let endStr;\n    if (dateEnv.canComputeOffset) {\n        // strings will naturally have offsets, which GCal needs\n        startStr = dateEnv.formatIso(range.start);\n        endStr = dateEnv.formatIso(range.end);\n    }\n    else {\n        // when timezone isn't known, we don't know what the UTC offset should be, so ask for +/- 1 day\n        // from the UTC day-start to guarantee we're getting all the events\n        // (start/end will be UTC-coerced dates, so toISOString is okay)\n        startStr = addDays(range.start, -1).toISOString();\n        endStr = addDays(range.end, 1).toISOString();\n    }\n    params = Object.assign(Object.assign({}, (extraParams || {})), { key: apiKey, timeMin: startStr, timeMax: endStr, singleEvents: true, maxResults: 9999 });\n    if (dateEnv.timeZone !== 'local') {\n        params.timeZone = dateEnv.timeZone;\n    }\n    return params;\n}\nfunction gcalItemsToRawEventDefs(items, gcalTimezone) {\n    return items.map((item) => gcalItemToRawEventDef(item, gcalTimezone));\n}\nfunction gcalItemToRawEventDef(item, gcalTimezone) {\n    let url = item.htmlLink || null;\n    // make the URLs for each event show times in the correct timezone\n    if (url && gcalTimezone) {\n        url = injectQsComponent(url, 'ctz=' + gcalTimezone);\n    }\n    return {\n        id: item.id,\n        title: item.summary,\n        start: item.start.dateTime || item.start.date,\n        end: item.end.dateTime || item.end.date,\n        url,\n        location: item.location,\n        description: item.description,\n        attachments: item.attachments || [],\n        extendedProps: (item.extendedProperties || {}).shared || {},\n    };\n}\n// Injects a string like \"arg=value\" into the querystring of a URL\n// TODO: move to a general util file?\nfunction injectQsComponent(url, component) {\n    // inject it after the querystring but before the fragment\n    return url.replace(/(\\?.*?)?(#|$)/, (whole, qs, hash) => (qs ? qs + '&' : '?') + component + hash);\n}\n\nconst OPTION_REFINERS = {\n    googleCalendarApiKey: String,\n};\n\nconst EVENT_SOURCE_REFINERS = {\n    googleCalendarApiKey: String,\n    googleCalendarId: String,\n    googleCalendarApiBase: String,\n    extraParams: identity,\n};\n\nvar index = createPlugin({\n    name: '@fullcalendar/google-calendar',\n    eventSourceDefs: [eventSourceDef],\n    optionRefiners: OPTION_REFINERS,\n    eventSourceRefiners: EVENT_SOURCE_REFINERS,\n});\n\nexport { index as default };\n","import styled from \"styled-components\";\n\nexport const TableWrapper = styled.div`\n\toverflow-x: auto;\n\n\t.meetings-table-subtitle {\n        margin-bottom: 1rem;\n    }\n\ttable {\n\t\tborder-spacing: 0.2;\n\t\twidth: 100%;\n\t\tmargin-bottom: 2rem;\n\t\n\t\ttd {\n\t\t\tpadding: 0.3rem;\n\t\t\theight: 4rem;\n\t\t\tcolor: ${props => props.theme.text};\n\t\t\tbackground-color: ${props => props.theme.grey151515OneToWhiteOne};\n\t\t\ttext-align: center;\n\t\t\tfont-size: 0.9rem;\n\t\t\tline-height: .9rem;\n\t\t\tfont-weight: 400;\n\t\t\tborder-bottom: 1px solid #efefef;\n\t\t\ttransition: 0.8s cubic-bezier(0.2, 0.8, 0.2, 1);\n\t\t\ta {\n\t\t\t\tcolor: ${props => props.theme.text};\n\t\t\t\ttransition: 0.8s cubic-bezier(0.2, 0.8, 0.2, 1);\n\t\t\t\t&:hover {\n\t\t\t\t\tcolor: ${props => props.theme.greyB4B4B4ToGrey505050};\n\t\t\t\t}\n\t\t\t}\n\t\t\t:first-child {\n\t\t\t\tbackground-color: ${props => props.theme.blackOneToBlackZeroFive};\n\t\t\t\tfont-weight: 600;\n\t\t\t}\n\t\t}\n\t\tth {\n\t\t\tbackground-color: ${props => props.theme.green00D3A9ToGreen00B39F};\n\t\t\tcolor: ${props => props.theme.white};\n\t\t\theight: 4rem;\n\t\t\tfont-weight: 600;\n\t\t\tfont-size: 1rem;\n\t\t\tline-height: 1rem;\n\t\t\ttransition: 0.8s cubic-bezier(0.2, 0.8, 0.2, 1);\n\t\t}\n\t\n\t\ttr {\n\t\t\ttd {\n\t\t\t}\n\t\t\t:nth-last-child(-n+2) {\n\t\t\t\ttd:first-child {\n\t\t\t\t\tfont-style: italic;\n\t\t\t\t}\n\t\t\t}\n\t\t\t&:hover {\n\t\t\t\tbackground-color: ${props => props.theme.grey323232ToGreenF3FFFD};\n\t\t\t\tborder-color:  ${props => props.theme.shadowColor};\n\t\t\t}\n\t\t}\n\t}\n`;\n","import React from \"react\";\nimport { useTable } from \"react-table\";\nimport { TableWrapper } from \"./MeetInfoTable.style\";\n\nconst Table = ({ columns, data }) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n  });\n\n  return (\n    <TableWrapper>\n      <h1 className=\"meetings-table-title\">\n        <a href=\"#meetings\">Layer5 Meetings</a>\n      </h1>\n      <h3 className=\"meetings-table-subtitle\">\n        Everyone is welcome to join. Engage!\n      </h3>\n      <table name=\"meetings\" id=\"meetings\" {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr key={\"table-header\"} {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th key={column} {...column.getHeaderProps()}>\n                  {column.render(\"Header\")}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr key={`row${i}`} {...row.getRowProps()}>\n                {row.cells.map((cell, index) => {\n                  {\n                    return (\n                      <td key={index} {...cell.getCellProps()}>\n                        {cell.render(\"Cell\")}\n                      </td>\n                    );\n                  }\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </TableWrapper>\n  );\n};\n\nexport default Table;\n","export const meet_links_data = [\n  {\n    day: \"Mondays\",\n    meeting: \"Layer5 Websites Meeting\",\n    slack_channel: \"#websites\",\n    slack_link: \"https://layer5io.slack.com/archives/C015QJKUMPU\",\n    meeting_minutes: \"https://bit.ly/2XK4eQV\",\n    meeting_link: \"https://meet.layer5.io/websites\",\n    meeting_recordings: \"https://www.youtube.com/playlist?list=PL3A-A6hPO2IO1ZuLj3cbOTdi-hlkF4Lqu\",\n  },\n  {\n    day: \"Tuesdays\",\n    meeting: \"Kanvas Meeting\",\n    slack_channel: \"#meshery-extensions\",\n    slack_link: \"https://mesheryio.slack.com/archives/C02F90W866T\",\n    meeting_minutes: \"https://bit.ly/3aXOaAs\",\n    meeting_link: \"https://meet.layer5.io/kanvas\",\n    meeting_recordings: \"https://www.youtube.com/playlist?list=PL3A-A6hPO2IO_yzN83wSJJUNQActzCJvO\",\n  },\n  {\n    day: \"Wednesdays\",\n    meeting: \"Meshery Development Meeting\",\n    slack_channel: \"#meshery\",\n    slack_link: \"https://layer5io.slack.com/archives/CFGG6U10E\",\n    meeting_minutes: \"https://bit.ly/31OGQTk\",\n    meeting_link: \"https://meet.meshery.io/dev\",\n    meeting_recordings: \"https://www.youtube.com/playlist?list=PL3A-A6hPO2INMUzQc-9vT6Jz_VQQpsSS0\",\n  },\n  {\n    day: \"2nd & 4th Thursday\",\n    meeting: \"Meshery CI Meeting\",\n    slack_channel: \"#meshery-ci\",\n    slack_link: \"https://layer5io.slack.com/archives/C011VPREG2Z\",\n    meeting_minutes: \"https://docs.google.com/document/d/1GrVdGHZAYeu6wHNLLoiaKNqBtk7enXE9XeDRCvdA4bY/edit\",\n    meeting_link: \"https://meet.meshery.io/ci\",\n    meeting_recordings: \"https://www.youtube.com/playlist?list=PL3A-A6hPO2IM7rYiKxG4l3eQNc6X3IUex\",\n  },\n  {\n    day: \"Thursdays\",\n    meeting: \"Layer5 Newcomers' Meeting\",\n    slack_channel: \"#newcomers\",\n    slack_link: \"https://layer5io.slack.com/archives/C019426UBNY\",\n    meeting_minutes: \"https://docs.google.com/document/d/1aHarIyIL__HRq_4klYOUsEXP5SQLlmb50W17yKdNmpU/edit#\",\n    meeting_link: \"https://meet.layer5.io/newcomers\",\n    meeting_recordings: \"https://www.youtube.com/playlist?list=PL3A-A6hPO2INVEknQ4R-VwDMUT9yM_FSm\",\n  },\n  {\n    day: \"Fridays\",\n    meeting: \"Layer5 Community Meeting\",\n    slack_channel: \"#general\",\n    slack_link: \"https://layer5io.slack.com/archives/CDM0ACDM5\",\n    meeting_minutes: \"https://bit.ly/2It7IA4\",\n    meeting_link: \"https://meet.layer5.io/community\",\n    meeting_recordings: \"https://www.youtube.com/playlist?list=PL3A-A6hPO2IMPPqVjuzgqNU5xwnFFn3n0\",\n  }\n];\n","import React from \"react\";\nimport CalendarStyleWrapper from \"./calendar.style\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport googleCalendarPlugin from \"@fullcalendar/google-calendar\";\nimport { Container, Row, Col } from \"../../../reusecore/Layout\";\nimport PageHeader from \"../../../reusecore/PageHeader\";\nimport Table from \"../../../components/MeetInfo-Table\";\nimport { meet_links_data } from \"./meetLinksData\";\nimport NewcomersMap from \"../Newcomers-guide/newcomers-map\";\nimport Button from \"../../../reusecore/Button\";\nimport { FaUsers } from \"@react-icons/all-files/fa/FaUsers\";\nimport { Link } from \"gatsby\";\n\nconst Calendar = () => {\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Meeting\",\n        accessor: \"meeting\",\n      },\n      {\n        Header: \"Day\",\n        accessor: \"day\",\n      },\n      {\n        Header: \"Slack Channel\",\n        id: \"slack_channel\",\n        accessor: meet_links_data => {\n          return (\n            <>\n              {\n                <a href={meet_links_data.slack_link}>\n                  {meet_links_data.slack_channel}\n                </a>\n              }\n            </>\n          );\n        }\n      },\n      {\n        Header: \"Meeting Minutes\",\n        id: \"meeting_minutes\",\n        accessor: meet_links_data => {\n          return (\n            <>\n              {\n                <a href={meet_links_data.meeting_minutes}>\n                  Minutes\n                </a>\n              }\n            </>\n          );\n        }\n      },\n      {\n        Header: \"Meeting Link\",\n        id: \"meeting_link\",\n        accessor: meet_links_data => {\n          return (\n            <>\n              {\n                <a href={meet_links_data.meeting_link}>\n                  Zoom\n                </a>\n              }\n            </>\n          );\n        }\n      },\n      {\n        Header: \"Meeting Recordings\",\n        id: \"meeting_recordings\",\n        accessor: meet_links_data => {\n          return (\n            <>\n              {meet_links_data.slack_channel !== \"#smi\" ?\n                <a href={meet_links_data.meeting_recordings}>\n                  YouTube\n                </a> : \"N/A\"\n              }\n            </>\n          );\n        }\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => meet_links_data);\n\n  return (\n    <CalendarStyleWrapper>\n      <PageHeader\n        title=\"Community Calendar\"\n        path=\"Community > Calendar\"\n        subtitle=\"Join any or all of the weekly meetings\"\n      />\n      <div>\n        <Container>\n          <div className=\"calendar-wrapper\">\n            <div className=\"calendar-grid\">\n              <FullCalendar\n                plugins={[dayGridPlugin, interactionPlugin, googleCalendarPlugin]}\n                initialView=\"dayGridMonth\"\n                googleCalendarApiKey=\"AIzaSyDcmx-nLYfqvrfpEmVJuclwt9akayYfUgg\"\n                events={{\n                  googleCalendarId: \"layer5.io_eh2aa9dpf1g40elvoc762jnphs@group.calendar.google.com\",\n                }}\n                buttonText={{\n                  today: \"Today\"\n                }}\n                customButtons={{\n                  addToCalendar: {\n                    text: \"Add To Your Calendar\",\n                    click: function () {\n                      window.open(\"https://bit.ly/3fz1Vfs\", \"_blank\");\n                    }\n                  }\n                }}\n                headerToolbar={{\n                  left: \"prev,next today\",\n                  center: \"title\",\n                  right: \"addToCalendar\"\n                }}\n                showNonCurrentDates={false}\n                contentHeight={700}\n              />\n            </div>\n          </div>\n        </Container>\n        <Table columns={columns} data={data} />\n      </div>\n      <br />\n      <Container>\n        <Row className=\"newcomers-section\">\n          <Col $xs={12} $lg={6} className=\"map\">\n            <NewcomersMap />\n          </Col>\n          <Col $xs={12} $lg={6} className=\"text\">\n            <div>\n              <h1>Newcomers Welcome!</h1>\n              <h3>Are you new to the community?</h3>\n              <p className=\"invitation\">\n                Begin your journey by <a href=\"https://slack.layer5.io\">joining the community Slack</a>. Then, use the resources linked in our <Link to=\"/community/newcomers\">Contributor's Journey Map </Link>\n                and engage in the community and projects.\n              </p>\n              <Button $primary title=\"See All Newcomers Resources\" $url=\"/community/newcomers\">\n                <FaUsers size={21} className=\"icon-left\" />\n              </Button>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n      <br />\n    </CalendarStyleWrapper>\n  );\n};\n\nexport default Calendar;\n"],"names":["GenIcon","module","exports","props","touchMouseIgnoreWait","ignoreMouseDepth","listenerCnt","isWindowTouchMoveCancelled","PointerDragging","constructor","containerEl","this","subjectEl","selector","handleSelector","shouldIgnoreMove","shouldWatchScroll","isDragging","isTouchDragging","wasTouchScroll","handleMouseDown","ev","shouldIgnoreMouse","button","ctrlKey","isPrimaryMouseButton","tryStart","pev","createEventFromMouse","emitter","trigger","initScrollWatch","document","addEventListener","handleMouseMove","handleMouseUp","recordCoords","removeEventListener","cleanup","handleTouchStart","createEventFromTouch","targetEl","target","handleTouchMove","handleTouchEnd","window","handleTouchScroll","setTimeout","handleScroll","pageX","scrollX","prevScrollX","prevPageX","pageY","scrollY","prevScrollY","prevPageY","origEvent","isTouch","deltaX","origPageX","deltaY","origPageY","passive","onWindowTouchMove","destroy","querySubjectEl","downEl","destroyScrollWatch","cancelTouchScroll","isFirst","touches","length","preventDefault","ElementMirror","isVisible","sourceEl","mirrorEl","sourceElRect","parentNode","body","zIndex","revertDuration","start","getBoundingClientRect","origScreenX","origScreenY","updateElPosition","handleMove","setIsVisible","bool","style","display","stop","needsRevertAnimation","callback","done","doRevertAnimation","finalSourceElRect","transition","left","top","getMirrorEl","cloneNode","userSelect","webkitUserSelect","pointerEvents","classList","add","position","visibility","boxSizing","width","right","height","bottom","margin","appendChild","ScrollGeomCache","scrollController","doesListening","super","scrollTop","getScrollTop","scrollLeft","getScrollLeft","handleScrollChange","origScrollTop","origScrollLeft","scrollWidth","getScrollWidth","scrollHeight","getScrollHeight","clientWidth","getClientWidth","clientHeight","getClientHeight","clientRect","computeClientRect","getEventTarget","setScrollTop","Math","max","min","getMaxScrollTop","setScrollLeft","getMaxScrollLeft","ElementScrollGeomCache","el","WindowScrollGeomCache","getTime","performance","now","Date","AutoScroller","isEnabled","scrollQuery","edgeThreshold","maxVelocity","pointerScreenX","pointerScreenY","isAnimating","scrollCaches","everMovedUp","everMovedDown","everMovedLeft","everMovedRight","animate","edge","computeBestEdge","handleSide","msSinceRequest","requestAnimation","scrollStartEl","buildCaches","yDelta","xDelta","scrollCache","requestAnimationFrame","seconds","invDistance","distance","velocity","sign","name","bestSide","rect","leftDist","rightDist","topDist","bottomDist","canScrollUp","canScrollDown","canScrollLeft","canScrollRight","queryScrollEls","map","els","query","push","Array","prototype","slice","call","getRootNode","querySelectorAll","FeaturefulElementDragging","delay","minDistance","touchScrollAllowed","mirrorNeedsRevert","isInteracting","isDelayEnded","isDistanceSurpassed","delayTimeoutId","onPointerDown","pointer","mirror","startDelay","handleDistanceSurpassed","onPointerMove","distanceSq","type","autoScroller","onPointerUp","tryStopDrag","clearTimeout","on","handleDelayEnd","tryStartDrag","stopDrag","bind","setIgnoreMove","setMirrorIsVisible","setMirrorNeedsRevert","setAutoScrollEnabled","OffsetTracker","origRect","scrollEl","computeLeft","computeTop","isWithinClipping","point","isIgnoredClipping","node","tagName","HitDragging","dragging","droppableStore","useSubjectCenter","requireInitial","disablePointCheck","initialHit","movingHit","finalHit","handlePointerDown","prepareHits","processFirstCoord","handleDragStart","handleDragMove","handlePointerUp","releaseHits","handleDragEnd","subjectRect","origPoint","adjustedPoint","HTMLElement","queryHitForOffset","slicedSubjectRect","coordAdjust","forceHandle","hit","isHitsEqual","offsetTrackers","interactionSettings","component","id","offsetLeft","offsetTop","bestHit","offsetTracker","originLeft","originTop","positionLeft","positionTop","queryHit","dateProfile","activeRange","dateSpan","range","contains","elementFromPoint","layer","componentId","context","hit0","hit1","Boolean","buildDatePointApiWithContext","transform","pluginHooks","datePointTransforms","Object","assign","span","dateEnv","date","toDate","dateStr","formatIso","omitTime","allDay","DateClicking","settings","isValidDateDownEl","hitDragging","arg","dayEl","jsEvent","view","viewApi","calendarApi","DateSelecting","dragSelection","options","canSelect","selectable","selectLongPressDelay","longPressDelay","getComponentTouchDelay$1","unselect","handleHitUpdate","isFinal","isInvalid","isHitComboAllowed","dateSelectionTransformers","dateSpan0","dateSpan1","ms","end","sort","transformer","res","joinHitsIntoSelection","dispatch","selection","selectMinDistance","dragScroll","EventDragging","subjectSeg","eventRange","relevantEvents","receivingContext","validMutation","mutatedRelevantEvents","origTarget","initialContext","eventInstanceId","instance","instanceId","getCurrentData","eventStore","eventDragMinDistance","eventSelection","eventLongPressDelay","getComponentTouchDelay","fixedMirrorParent","dragRevertDuration","isValid","isValidSegDownEl","event","def","mutation","interaction","affectedEvents","mutatedEvents","isEvent","receivingOptions","editable","droppable","eventInstanceStart","massagers","date0","date1","standardProps","hasEnd","allDayMaintainDuration","delta","largeUnit","milliseconds","datesDelta","massager","computeEventMutation","eventDragMutationMassagers","eventUiBases","displayDrag","querySelector","initialView","eventDef","eventInstance","eventApi","clearDrag","updatedEventApi","defs","defId","instances","eventChangeArg","oldEvent","relatedEvents","revert","transformed","eventDropTransformers","eventRemoveArg","draggedEl","addedEventDef","addedEventInstance","addedEventApi","eventAddArg","SELECTOR","useEventCenter","nextContext","state","prevContext","initialCalendar","EventResizing","draggingSegEl","draggingSeg","segEl","querySegEl","seg","isFromStart","instanceRange","startDelta","endDelta","computeMutation","OPTION_REFINERS","LISTENER_REFINERS","dateClick","eventDragStart","eventDragStop","eventDrop","eventResizeStart","eventResizeStop","eventResize","drop","eventReceive","eventLeave","dataAttrPrefix","index","componentInteractions","calendarInteractions","isRecentPointerDateSelect","matchesCancel","matchesEvent","onSelect","selectInfo","onDocumentPointerDown","unselectCancel","onDocumentPointerUp","documentPointer","calendarState","dateSelection","unselectAuto","off","elementDraggingImpl","optionRefiners","listenerRefiners","API_BASE","eventSourceDef","parseMeta","refined","googleCalendarId","url","match","test","exec","decodeURIComponent","parseGoogleCalendarId","googleCalendarApiKey","googleCalendarApiBase","extraParams","fetch","successCallback","errorCallback","meta","eventSource","apiKey","apiBase","encodeURIComponent","buildUrl","extraParamsObj","requestParams","params","startStr","endStr","canComputeOffset","toISOString","key","timeMin","timeMax","singleEvents","maxResults","timeZone","buildRequestParams","r","then","response","items","gcalTimezone","error","message","rawEvents","item","htmlLink","replace","whole","qs","hash","injectQsComponent","title","summary","dateTime","location","description","attachments","extendedProps","extendedProperties","shared","gcalItemToRawEventDef","Error","String","EVENT_SOURCE_REFINERS","eventSourceDefs","eventSourceRefiners","TableWrapper","styled","div","withConfig","displayName","theme","text","grey151515OneToWhiteOne","greyB4B4B4ToGrey505050","blackOneToBlackZeroFive","green00D3A9ToGreen00B39F","white","grey323232ToGreenF3FFFD","shadowColor","_ref","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","useTable","React","className","href","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","meet_links_data","day","meeting","slack_channel","slack_link","meeting_minutes","meeting_link","meeting_recordings","Calendar","Header","accessor","CalendarStyleWrapper","PageHeader","path","subtitle","Container","FullCalendar","plugins","dayGridPlugin","interactionPlugin","googleCalendarPlugin","events","buttonText","today","customButtons","addToCalendar","click","open","headerToolbar","center","showNonCurrentDates","contentHeight","Table","Row","Col","$xs","$lg","NewcomersMap","Link","to","Button","$primary","$url","FaUsers","size"],"sourceRoot":""}