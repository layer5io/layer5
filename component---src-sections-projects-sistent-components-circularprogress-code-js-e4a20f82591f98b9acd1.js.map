{"version":3,"file":"component---src-sections-projects-sistent-components-circularprogress-code-js-e4a20f82591f98b9acd1.js","mappings":"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","sources":["webpack://Layer5/./src/sections/Projects/Sistent/components/button/code-block.js","webpack://Layer5/./src/sections/Projects/Sistent/components/circularprogress/code.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Code from \"../../../../../components/CodeBlock\";\n\nexport const CodeBlock = ({ name, code }) => {\n  const [showCode, setShowCode] = useState(false);\n  const onChange = () => {\n    setShowCode((prev) => !prev);\n  };\n  return (\n    <div className=\"show-code\">\n      <input type=\"checkbox\" name={name} id={name} onChange={onChange} />\n      <label htmlFor={name} className=\"label\">\n        Show Code\n      </label>\n      {showCode && (\n        <Code codeString={code} language=\"javascript\" />\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\n\nimport { SistentThemeProvider, CircularProgress } from \"@sistent/sistent\";\nimport { CodeBlock } from \"../button/code-block\";\n\n\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { SistentLayout } from \"../../sistent-layout\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\n\nconst codes = [\n  \"<CircularProgress />\",\n  \"<CircularProgress variant=\\\"determinate\\\" value={75} />\",\n  `<CircularProgress size={24} variant=\"determinate\" value={75} />\n<CircularProgress size={40} variant=\"determinate\" value={75} />\n<CircularProgress size={56} variant=\"determinate\" value={75} />`,\n  `<CircularProgress thickness={2} variant=\"determinate\" value={85} />\n<CircularProgress thickness={4} variant=\"determinate\" value={85} />\n<CircularProgress thickness={6} variant=\"determinate\" value={85} />`,\n  `<CircularProgress color=\"primary\" />\n<CircularProgress color=\"secondary\" />\n<CircularProgress color=\"success\" />`,\n];\n\nconst SistentCircularProgress = () => {\n  const location = useLocation();\n  const { isDark } = useStyledDarkMode();\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 10));\n    }, 800);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <SistentLayout title=\"Circular Progress\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>Circular Progress</h2>\n        </a>\n        <p>\n          Circular progress indicators provide visual feedback about ongoing processes,\n          helping users understand that their request is being processed. They can show\n          either determinate progress (specific completion percentage) or indeterminate\n          progress (unknown duration).\n        </p>\n        <div className=\"filterBtns\">\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/circularprogress\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/circularprogress\")}\n            title=\"Overview\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n              \"/projects/sistent/components/circularprogress/guidance\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/circularprogress/guidance\")\n            }\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n              \"/projects/sistent/components/circularprogress/code\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/circularprogress/code\")\n            }\n            title=\"Code\"\n          />\n        </div>\n        <div className=\"main-content\">\n          <p>\n            The <code>CircularProgress</code> component is essential for communicating\n            system status to users. It provides immediate feedback during loading\n            states, file uploads, data processing, and other time-consuming operations.\n          </p>\n          <a id=\"Basic Example\">\n            <h2>Basic Circular Progress</h2>\n          </a>\n          <p>\n            A simple indeterminate circular progress indicator that shows continuous loading.\n            This is the default behavior when no variant or value props are provided.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <CircularProgress />\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"circular-progress-basic\" code={codes[0]} />\n          </div>\n\n          <a id=\"Determinate Progress\">\n            <h2>Determinate Progress</h2>\n          </a>\n          <p>\n            The determinate variant shows specific progress completion using the\n            value prop (0-100). This variant is perfect for file uploads,\n            downloads, or any process with measurable progress.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <CircularProgress variant=\"determinate\" value={progress} />\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"circular-progress-determinate\" code={codes[1]} />\n          </div>\n\n          <a id=\"Different Sizes\">\n            <h2>Size Variations</h2>\n          </a>\n          <p>\n            Circular progress indicators can be scaled to different sizes using\n            the size prop. This flexibility allows them to fit various layout\n            requirements, from small inline indicators to prominent loading states.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <div style={{ display: \"flex\", gap: \"40px\", alignItems: \"center\" }}>\n                  <CircularProgress size={24} variant=\"determinate\" value={75} />\n                  <CircularProgress size={40} variant=\"determinate\" value={75} />\n                  <CircularProgress size={56} variant=\"determinate\" value={75} />\n                </div>\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"circular-progress-sizes\" code={codes[2]} />\n          </div>\n\n          <a id=\"Thickness Variations\">\n            <h2>Thickness Variations</h2>\n          </a>\n          <p>\n            The thickness prop controls the width of the progress arc, allowing\n            you to create subtle or bold visual emphasis depending on your design\n            requirements. Thicker lines provide more visual weight and prominence.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <div style={{ display: \"flex\", gap: \"40px\", alignItems: \"center\" }}>\n                  <CircularProgress thickness={2} variant=\"determinate\" value={85} />\n                  <CircularProgress thickness={4} variant=\"determinate\" value={85} />\n                  <CircularProgress thickness={6} variant=\"determinate\" value={85} />\n                </div>\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"circular-progress-thickness\" code={codes[3]} />\n          </div>\n\n          <a id=\"Color Options\">\n            <h2>Color Options</h2>\n          </a>\n          <p>\n            Circular progress indicators support various color themes to match\n            your application's design system. Colors can convey different meanings\n            or states, such as success, warning, or error conditions.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <div style={{ display: \"flex\", gap: \"40px\", alignItems: \"center\" }}>\n                  <CircularProgress color=\"primary\" />\n                  <CircularProgress color=\"secondary\" />\n                  <CircularProgress color=\"success\" />\n                </div>\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"circular-progress-colors\" code={codes[4]} />\n          </div>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default SistentCircularProgress;"],"names":["CodeBlock","_ref","name","code","showCode","setShowCode","useState","React","className","type","id","onChange","prev","htmlFor","Code","codeString","language","codes","SistentCircularProgress","location","useLocation","isDark","useStyledDarkMode","progress","setProgress","useEffect","timer","setInterval","prevProgress","clearInterval","SistentLayout","title","TabButton","pathname","onClick","navigate","SistentThemeProvider","initialMode","CircularProgress","variant","value","style","display","gap","alignItems","size","thickness","color"],"sourceRoot":""}