{"version":3,"file":"component---src-sections-projects-sistent-components-modal-code-js-9e1611e09cbe3a6909b6.js","mappings":"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","sources":["webpack://Layer5/./node_modules/@mui/icons-material/esm/CheckCircle.js","webpack://Layer5/./node_modules/@mui/icons-material/esm/Error.js","webpack://Layer5/./node_modules/@mui/icons-material/esm/Info.js","webpack://Layer5/./node_modules/@mui/icons-material/esm/PersonAdd.js","webpack://Layer5/./node_modules/@mui/icons-material/esm/Warning.js","webpack://Layer5/./src/sections/Projects/Sistent/components/button/code-block.js","webpack://Layer5/./src/sections/Projects/Sistent/components/modal/code.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8z\"\n}), 'CheckCircle');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m1 15h-2v-2h2zm0-4h-2V7h2z\"\n}), 'Error');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m1 15h-2v-6h2zm0-8h-2V7h2z\"\n}), 'Info');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M15 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4m-9-2V7H4v3H1v2h3v3h2v-3h3v-2zm9 4c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4\"\n}), 'PersonAdd');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M1 21h22L12 2zm12-3h-2v-2h2zm0-4h-2v-4h2z\"\n}), 'Warning');","import React, { useState } from \"react\";\nimport Code from \"../../../../../components/CodeBlock\";\n\nexport const CodeBlock = ({ name, code }) => {\n  const [showCode, setShowCode] = useState(false);\n  const onChange = () => {\n    setShowCode((prev) => !prev);\n  };\n  return (\n    <div className=\"show-code\">\n      <input type=\"checkbox\" name={name} id={name} onChange={onChange} />\n      <label htmlFor={name} className=\"label\">\n        Show Code\n      </label>\n      {showCode && (\n        <Code codeString={code} language=\"javascript\" />\n      )}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\nimport { SistentLayout } from \"../../sistent-layout\";\nimport {\n  Box,\n  Button,\n  Modal,\n  ModalBody,\n  ModalButtonDanger,\n  ModalButtonPrimary,\n  ModalButtonSecondary,\n  ModalFooter,\n  SistentThemeProvider,\n  TextField,\n  Typography,\n} from \"@sistent/sistent\";\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\nimport { CodeBlock } from \"../button/code-block\";\nimport { ActionBox } from \"../../sistent.style\";\nimport WarningIcon from \"@mui/icons-material/Warning\";\nimport InfoIcon from \"@mui/icons-material/Info\";\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\nimport ErrorIcon from \"@mui/icons-material/Error\";\nimport PersonAddIcon from \"@mui/icons-material/PersonAdd\";\n\nconst CustomInput = ({ label, placeholder }) => (\n  <Box sx={{ mb: 2 }}>\n    <Typography variant=\"subtitle1\" gutterBottom>\n      {label}\n    </Typography>\n    <TextField label={placeholder} variant=\"outlined\" fullWidth />\n  </Box>\n);\n\nconst codes = [\n  // Basic Modal\n  `import { \n    Button, \n    Modal, \n    ModalBody, \n    ModalFooter, \n    ModalButtonSecondary \n  } from \"@sistent/sistent\";\n\nfunction BasicModal() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button \n        variant=\"contained\" \n        onClick={() => setOpen(true)}\n      >\n        Open Modal\n      </Button>\n      <Modal \n        open={open} \n        closeModal={() => setOpen(false)} \n        title=\"Basic Modal\"\n      >\n        <ModalBody>\n          <Typography>\n            This is a basic modal with simple content.\n          </Typography>\n        </ModalBody>\n        <ModalFooter variant=\"filled\">\n          <ModalButtonSecondary \n            onClick={() => setOpen(false)}\n          >\n            Close\n          </ModalButtonSecondary>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}`,\n\n  // Confirmation Modal\n  `import { \n    Button, \n    Modal, \n    ModalBody, \n    ModalFooter, \n    ModalButtonSecondary, \n    ModalButtonDanger,\n    Box,\n    Typography \n  } from \"@sistent/sistent\";\nimport WarningIcon from \"@mui/icons-material/Warning\";\n\nfunction ConfirmationModal() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button \n        variant=\"contained\" \n        color=\"error\" \n        onClick={() => setOpen(true)}\n      >\n        Delete Item\n      </Button>\n      <Modal \n        open={open} \n        closeModal={() => setOpen(false)} \n        title=\"Confirm Deletion\"\n      >\n        <ModalBody>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n            <WarningIcon color=\"warning\" />\n            <Typography>\n              This action is irreversible! Are you sure?\n            </Typography>\n          </Box>\n        </ModalBody>\n        <ModalFooter variant=\"filled\">\n          <ModalButtonSecondary \n            onClick={() => setOpen(false)}\n          >\n            Cancel\n          </ModalButtonSecondary>\n          <ModalButtonDanger \n            onClick={() => setOpen(false)}\n          >\n            Delete\n          </ModalButtonDanger>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}`,\n\n  // Action Modal\n  `import { \n    Button, \n    Modal, \n    ModalBody, \n    ModalFooter, \n    ModalButtonSecondary, \n    ModalButtonPrimary, \n    TextField,\n    Box,\n    Typography\n  } from \"@sistent/sistent\";\nimport PersonAddIcon from \"@mui/icons-material/PersonAdd\";\n\nfunction ActionModal() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button \n        variant=\"contained\" \n        onClick={() => setOpen(true)}\n      >\n        Add New User\n      </Button>\n      <Modal \n        open={open} \n        closeModal={() => setOpen(false)} \n        title=\"Add New User\"\n      >\n        <ModalBody>\n          <Box sx={{ \n            display: 'flex', \n            alignItems: 'center', \n            gap: 2, \n            mb: 3 \n          }}>\n            <PersonAddIcon color=\"primary\" />\n            <Typography>Create a new user account:</Typography>\n          </Box>\n          <TextField \n            label=\"Full Name\" \n            fullWidth \n            margin=\"normal\" \n          />\n          <TextField \n            label=\"Email\" \n            fullWidth \n            margin=\"normal\" \n          />\n          <TextField \n            label=\"Role\" \n            fullWidth \n            margin=\"normal\" \n          />\n        </ModalBody>\n        <ModalFooter variant=\"filled\">\n          <ModalButtonSecondary \n            onClick={() => setOpen(false)}\n          >\n            Cancel\n          </ModalButtonSecondary>\n          <ModalButtonPrimary \n            onClick={() => setOpen(false)}\n          >\n            Create User\n          </ModalButtonPrimary>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}`,\n\n  // Informational Modal\n  `import { \n    Button, \n    Modal, \n    ModalBody, \n    ModalFooter, \n    ModalButtonSecondary,\n    Box,\n    Typography\n  } from \"@sistent/sistent\";\nimport InfoIcon from \"@mui/icons-material/Info\";\n\nfunction InformationalModal() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button \n        variant=\"outlined\" \n        onClick={() => setOpen(true)}\n      >\n        View Information\n      </Button>\n      <Modal \n        open={open} \n        closeModal={() => setOpen(false)} \n        title=\"System Information\"\n      >\n        <ModalBody>\n          <Box sx={{ \n            display: 'flex', \n            alignItems: 'flex-start', \n            gap: 2 \n          }}>\n            <InfoIcon color=\"info\" />\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>\n                About This Feature\n              </Typography>\n              <Typography variant=\"body1\" paragraph>\n                This feature helps you manage workflow efficiently.\n              </Typography>\n              <Typography variant=\"body2\">\n                Last updated: January 2025 • Version 2.1.0\n              </Typography>\n            </Box>\n          </Box>\n        </ModalBody>\n        <ModalFooter variant=\"filled\">\n          <ModalButtonSecondary \n            onClick={() => setOpen(false)}\n          >\n            Got it\n          </ModalButtonSecondary>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}`,\n\n  // Warning Modal\n  `import { \n    Button, \n    Modal, \n    ModalBody, \n    ModalFooter, \n    ModalButtonSecondary, \n    ModalButtonPrimary,\n    Box,\n    Typography\n  } from \"@sistent/sistent\";\nimport WarningIcon from \"@mui/icons-material/Warning\";\n\nfunction WarningModal() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        sx={{ backgroundColor: \"warning.main\", color: \"white\" }}\n        onClick={() => setOpen(true)}\n      >\n        Proceed with Caution\n      </Button>\n      <Modal \n        open={open} \n        closeModal={() => setOpen(false)} \n        title=\"Warning\"\n      >\n        <ModalBody>\n          <Box sx={{ \n            display: 'flex', \n            alignItems: 'center', \n            gap: 2 \n          }}>\n            <WarningIcon sx={{ \n              color: \"warning.main\", \n              fontSize: 32 \n            }} />\n            <Box>\n              <Typography variant=\"body1\" paragraph>\n                This action may affect system performance.\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Consider performing this during off-peak hours.\n              </Typography>\n            </Box>\n          </Box>\n        </ModalBody>\n        <ModalFooter variant=\"filled\">\n          <ModalButtonSecondary \n            onClick={() => setOpen(false)}\n          >\n            Cancel\n          </ModalButtonSecondary>\n          <ModalButtonPrimary \n            onClick={() => setOpen(false)}\n          >\n            Continue Anyway\n          </ModalButtonPrimary>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}`,\n\n  // Success Modal\n  `import { \n    Button, \n    Modal, \n    ModalBody, \n    ModalFooter, \n    ModalButtonPrimary,\n    Box,\n    Typography\n  } from \"@sistent/sistent\";\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\n\nfunction SuccessModal() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button \n        variant=\"contained\" \n        color=\"success\" \n        onClick={() => setOpen(true)}\n      >\n        Complete Action\n      </Button>\n      <Modal \n        open={open} \n        closeModal={() => setOpen(false)} \n        title=\"Success!\"\n      >\n        <ModalBody>\n          <Box sx={{ \n            display: 'flex', \n            alignItems: 'center', \n            gap: 2 \n          }}>\n            <CheckCircleIcon color=\"success\" sx={{ fontSize: 48 }} />\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>\n                Operation Completed Successfully\n              </Typography>\n              <Typography variant=\"body1\">\n                Your changes have been saved and are now active.\n              </Typography>\n            </Box>\n          </Box>\n        </ModalBody>\n        <ModalFooter variant=\"filled\">\n          <ModalButtonPrimary \n            onClick={() => setOpen(false)}\n          >\n            Continue\n          </ModalButtonPrimary>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}`,\n\n  // Error Modal\n  `import { \n    Button, \n    Modal, \n    ModalBody, \n    ModalFooter, \n    ModalButtonSecondary, \n    ModalButtonPrimary,\n    Box,\n    Typography\n  } from \"@sistent/sistent\";\nimport ErrorIcon from \"@mui/icons-material/Error\";\n\nfunction ErrorModal() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Button \n        variant=\"contained\" \n        color=\"error\" \n        onClick={() => setOpen(true)}\n      >\n        Trigger Error\n      </Button>\n      <Modal \n        open={open} \n        closeModal={() => setOpen(false)} \n        title=\"Upload Failed\"\n      >\n        <ModalBody>\n          <Box sx={{ \n            display: 'flex', \n            alignItems: 'flex-start', \n            gap: 2 \n          }}>\n            <ErrorIcon color=\"error\" sx={{ fontSize: 32 }} />\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>\n                File Upload Failed\n              </Typography>\n              <Typography variant=\"body1\" paragraph>\n                The file could not be uploaded due to network issue.\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                <strong>What you can do:</strong>\n                 Check connection and try again.\n              </Typography>\n            </Box>\n          </Box>\n        </ModalBody>\n        <ModalFooter variant=\"filled\">\n          <ModalButtonSecondary \n            onClick={() => setOpen(false)}\n          >\n            Cancel\n          </ModalButtonSecondary>\n          <ModalButtonPrimary \n            onClick={() => setOpen(false)}\n          >\n            Try Again\n          </ModalButtonPrimary>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}`,\n\n  // Nested Modal\n  `import { \n    Button, \n    Modal, \n    ModalBody, \n    ModalFooter, \n    ModalButtonSecondary,\n    Typography\n  } from \"@sistent/sistent\";\n\nfunction NestedModalExample() {\n  const [parentOpen, setParentOpen] = useState(false);\n  const [childOpen, setChildOpen] = useState(false);\n\n  const handleParentClose = () => {\n    setParentOpen(false);\n    setChildOpen(false);\n  };\n\n  return (\n    <>\n      <Button \n        variant=\"contained\" \n        onClick={() => setParentOpen(true)}\n      >\n        Open Parent Modal\n      </Button>\n      \n      <Modal \n        open={parentOpen} \n        closeModal={handleParentClose} \n        title=\"Parent Modal\"\n      >\n        <ModalBody>\n          <Typography paragraph>\n            This is the parent modal. Click to open nested modal.\n          </Typography>\n          <Button \n            variant=\"outlined\" \n            onClick={() => setChildOpen(true)}\n          >\n            Open Nested Modal\n          </Button>\n        </ModalBody>\n        <ModalFooter variant=\"filled\">\n          <ModalButtonSecondary onClick={handleParentClose}>\n            Close Parent\n          </ModalButtonSecondary>\n        </ModalFooter>\n      </Modal>\n      \n      <Modal \n        open={childOpen} \n        closeModal={() => setChildOpen(false)} \n        title=\"Nested Modal\"\n      >\n        <ModalBody>\n          <Typography>\n            This nested modal appears on top of the parent.\n          </Typography>\n        </ModalBody>\n        <ModalFooter variant=\"filled\">\n          <ModalButtonSecondary \n            onClick={() => setChildOpen(false)}\n          >\n            Close Nested\n          </ModalButtonSecondary>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}`\n];\n\nconst ModalCode = () => {\n  const location = useLocation();\n  const { isDark } = useStyledDarkMode();\n\n  const [openModals, setOpenModals] = useState({\n    basic: false,\n    confirmation: false,\n    action: false,\n    informational: false,\n    warning: false,\n    success: false,\n    error: false,\n    form: false,\n    nested: false\n  });\n\n  const [nestedModal, setNestedModal] = useState(false);\n\n  const toggleModal = (type) => {\n    setOpenModals(prev => ({\n      ...prev,\n      [type]: !prev[type]\n    }));\n  };\n\n  return (\n    <SistentLayout title=\"Modal\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>Modal</h2>\n        </a>\n        <p>\n          Here are code examples for different variations and use cases of the Modal component.\n          Each example shows the implementation with a live preview and copyable code.\n        </p>\n\n        <div className=\"filterBtns\">\n          <TabButton\n            className={location.pathname === \"/projects/sistent/components/modal\" ? \"active\" : \"\"}\n            onClick={() => navigate(\"/projects/sistent/components/modal\")}\n            title=\"Overview\"\n          />\n          <TabButton\n            className={location.pathname === \"/projects/sistent/components/modal/guidance\" ? \"active\" : \"\"}\n            onClick={() => navigate(\"/projects/sistent/components/modal/guidance\")}\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={location.pathname === \"/projects/sistent/components/modal/code\" ? \"active\" : \"\"}\n            onClick={() => navigate(\"/projects/sistent/components/modal/code\")}\n            title=\"Code\"\n          />\n        </div>\n\n        <div className=\"main-content\">\n          <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n\n            <a id=\"basic-modal\">\n              <h2>Basic Modal</h2>\n            </a>\n            <p>A simple modal with basic content and standard dismiss functionality.</p>\n            <div className=\"showcase\">\n              <div className=\"items\">\n                <Button variant=\"contained\" onClick={() => toggleModal(\"basic\")}>\n                  Open Basic Modal\n                </Button>\n                <Modal\n                  open={openModals.basic}\n                  closeModal={() => toggleModal(\"basic\")}\n                  title=\"Basic Modal\"\n                >\n                  <ModalBody>\n                    <Typography>\n                      This is a basic modal with simple content for displaying information.\n                    </Typography>\n                  </ModalBody>\n                  <ModalFooter variant=\"filled\">\n                    <ActionBox>\n                      <ModalButtonSecondary onClick={() => toggleModal(\"basic\")}>\n                        Close\n                      </ModalButtonSecondary>\n                    </ActionBox>\n                  </ModalFooter>\n                </Modal>\n              </div>\n              <CodeBlock name=\"modal-basic\" code={codes[0]} />\n            </div>\n\n            <a id=\"confirmation-modal\">\n              <h2>Confirmation Modal</h2>\n            </a>\n            <p>Confirmation modals for destructive or important actions requiring user consent.</p>\n            <div className=\"showcase\">\n              <div className=\"items\">\n                <Button variant=\"contained\" color=\"error\" onClick={() => toggleModal(\"confirmation\")}>\n                  Delete Item\n                </Button>\n                <Modal\n                  open={openModals.confirmation}\n                  closeModal={() => toggleModal(\"confirmation\")}\n                  title=\"Confirm Deletion\"\n                >\n                  <ModalBody>\n                    <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\n                      <WarningIcon color=\"warning\" />\n                      <Typography>\n                        This action is irreversible! Are you sure you want to delete this item?\n                      </Typography>\n                    </Box>\n                  </ModalBody>\n                  <ModalFooter variant=\"filled\">\n                    <ActionBox>\n                      <ModalButtonSecondary onClick={() => toggleModal(\"confirmation\")}>\n                        Cancel\n                      </ModalButtonSecondary>\n                      <ModalButtonDanger onClick={() => toggleModal(\"confirmation\")}>\n                        Delete\n                      </ModalButtonDanger>\n                    </ActionBox>\n                  </ModalFooter>\n                </Modal>\n              </div>\n              <CodeBlock name=\"modal-confirmation\" code={codes[1]} />\n            </div>\n\n            <a id=\"action-modal\">\n              <h2>Action Modal</h2>\n            </a>\n            <p>Action modals for task completion with forms and interactive elements.</p>\n            <div className=\"showcase\">\n              <div className=\"items\">\n                <Button variant=\"contained\" onClick={() => toggleModal(\"action\")}>\n                  Add New User\n                </Button>\n                <Modal\n                  open={openModals.action}\n                  closeModal={() => toggleModal(\"action\")}\n                  title=\"Add New User\"\n                >\n                  <ModalBody>\n                    <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2, mb: 3 }}>\n                      <PersonAddIcon color=\"primary\" />\n                      <Typography variant=\"body1\">\n                        Create a new user account with the following details:\n                      </Typography>\n                    </Box>\n                    <CustomInput label=\"Full Name\" placeholder=\"Enter user's full name\" />\n                    <CustomInput label=\"Email Address\" placeholder=\"Enter email address\" />\n                    <CustomInput label=\"Role\" placeholder=\"Select user role\" />\n                  </ModalBody>\n                  <ModalFooter variant=\"filled\">\n                    <ActionBox>\n                      <ModalButtonSecondary onClick={() => toggleModal(\"action\")}>\n                        Cancel\n                      </ModalButtonSecondary>\n                      <ModalButtonPrimary onClick={() => toggleModal(\"action\")}>\n                        Create User\n                      </ModalButtonPrimary>\n                    </ActionBox>\n                  </ModalFooter>\n                </Modal>\n              </div>\n              <CodeBlock name=\"modal-action\" code={codes[2]} />\n            </div>\n\n            <a id=\"informational-modal\">\n              <h2>Informational Modal</h2>\n            </a>\n            <p>Informational modals for displaying help content and contextual information.</p>\n            <div className=\"showcase\">\n              <div className=\"items\">\n                <Button variant=\"contained\" onClick={() => toggleModal(\"informational\")}>\n                  View Information\n                </Button>\n                <Modal\n                  open={openModals.informational}\n                  closeModal={() => toggleModal(\"informational\")}\n                  title=\"System Information\"\n                >\n                  <ModalBody>\n                    <Box sx={{ display: \"flex\", alignItems: \"flex-start\", gap: 2 }}>\n                      <InfoIcon color=\"info\" />\n                      <Box>\n                        <Typography variant=\"h6\" gutterBottom>\n                          About This Feature\n                        </Typography>\n                        <Typography variant=\"body1\" paragraph>\n                          This feature helps you manage your workflow efficiently with automated tools.\n                        </Typography>\n                        <Typography variant=\"body2\">\n                          Last updated: January 2025 • Version 2.1.0\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </ModalBody>\n                  <ModalFooter variant=\"filled\">\n                    <ActionBox>\n                      <ModalButtonSecondary onClick={() => toggleModal(\"informational\")}>\n                        Got it\n                      </ModalButtonSecondary>\n                    </ActionBox>\n                  </ModalFooter>\n                </Modal>\n              </div>\n              <CodeBlock name=\"modal-informational\" code={codes[3]} />\n            </div>\n\n            <a id=\"warning-modal\">\n              <h2>Warning Modal</h2>\n            </a>\n            <p>Warning modals to alert users about potential issues before proceeding.</p>\n            <div className=\"showcase\">\n              <div className=\"items\">\n                <Button\n                  variant=\"contained\"\n                  sx={{ backgroundColor: \"warning.main\", color: \"white\" }}\n                  onClick={() => toggleModal(\"warning\")}\n                >\n                  Proceed with Caution\n                </Button>\n                <Modal\n                  open={openModals.warning}\n                  closeModal={() => toggleModal(\"warning\")}\n                  title=\"Warning\"\n                >\n                  <ModalBody>\n                    <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\n                      <WarningIcon sx={{ color: \"warning.main\", fontSize: 32 }} />\n                      <Box>\n                        <Typography variant=\"body1\" paragraph>\n                          This action may affect system performance and could take several minutes.\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          Consider performing this during off-peak hours.\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </ModalBody>\n                  <ModalFooter variant=\"filled\">\n                    <ActionBox>\n                      <ModalButtonSecondary onClick={() => toggleModal(\"warning\")}>\n                        Cancel\n                      </ModalButtonSecondary>\n                      <ModalButtonPrimary onClick={() => toggleModal(\"warning\")}>\n                        Continue Anyway\n                      </ModalButtonPrimary>\n                    </ActionBox>\n                  </ModalFooter>\n                </Modal>\n              </div>\n              <CodeBlock name=\"modal-warning\" code={codes[4]} />\n            </div>\n\n            <a id=\"success-modal\">\n              <h2>Success Modal</h2>\n            </a>\n            <p>Success modals to provide positive feedback and confirm task completion.</p>\n            <div className=\"showcase\">\n              <div className=\"items\">\n                <Button variant=\"contained\" color=\"success\" onClick={() => toggleModal(\"success\")}>\n                  Complete Action\n                </Button>\n                <Modal\n                  open={openModals.success}\n                  closeModal={() => toggleModal(\"success\")}\n                  title=\"Success!\"\n                >\n                  <ModalBody>\n                    <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2, textAlign: \"center\" }}>\n                      <CheckCircleIcon color=\"success\" sx={{ fontSize: 48 }} />\n                      <Box>\n                        <Typography variant=\"h6\" gutterBottom>\n                          Operation Completed Successfully\n                        </Typography>\n                        <Typography variant=\"body1\">\n                          Your changes have been saved and are now active.\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </ModalBody>\n                  <ModalFooter variant=\"filled\">\n                    <ActionBox>\n                      <ModalButtonPrimary onClick={() => toggleModal(\"success\")}>\n                        Continue\n                      </ModalButtonPrimary>\n                    </ActionBox>\n                  </ModalFooter>\n                </Modal>\n              </div>\n              <CodeBlock name=\"modal-success\" code={codes[5]} />\n            </div>\n\n            <a id=\"error-modal\">\n              <h2>Error Modal</h2>\n            </a>\n            <p>Error modals to communicate failures and provide actionable solutions.</p>\n            <div className=\"showcase\">\n              <div className=\"items\">\n                <Button variant=\"contained\" color=\"error\" onClick={() => toggleModal(\"error\")}>\n                  Trigger Error\n                </Button>\n                <Modal\n                  open={openModals.error}\n                  closeModal={() => toggleModal(\"error\")}\n                  title=\"Upload Failed\"\n                >\n                  <ModalBody>\n                    <Box sx={{ display: \"flex\", alignItems: \"flex-start\", gap: 2 }}>\n                      <ErrorIcon color=\"error\" sx={{ fontSize: 32 }} />\n                      <Box>\n                        <Typography variant=\"h6\" gutterBottom>\n                          File Upload Failed\n                        </Typography>\n                        <Typography variant=\"body1\" paragraph>\n                          The file could not be uploaded due to a network connectivity issue.\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          <strong>What you can do:</strong> Check your internet connection and try again.\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </ModalBody>\n                  <ModalFooter variant=\"filled\">\n                    <ActionBox>\n                      <ModalButtonSecondary onClick={() => toggleModal(\"error\")}>\n                        Cancel\n                      </ModalButtonSecondary>\n                      <ModalButtonPrimary onClick={() => toggleModal(\"error\")}>\n                        Try Again\n                      </ModalButtonPrimary>\n                    </ActionBox>\n                  </ModalFooter>\n                </Modal>\n              </div>\n              <CodeBlock name=\"modal-error\" code={codes[6]} />\n            </div>\n\n            <a id=\"nested-modal\">\n              <h2>Nested Modal</h2>\n            </a>\n            <p>Nested modals for multi-step workflows and complex interactions.</p>\n            <div className=\"showcase\">\n              <div className=\"items\">\n                <Button variant=\"contained\" onClick={() => toggleModal(\"nested\")}>\n                  Open Parent Modal\n                </Button>\n                <Modal\n                  open={openModals.nested}\n                  closeModal={() => toggleModal(\"nested\")}\n                  title=\"Parent Modal\"\n                >\n                  <ModalBody>\n                    <Typography paragraph>\n                      This is the parent modal. You can open a nested modal from here.\n                    </Typography>\n                    <Button variant=\"outlined\" onClick={() => setNestedModal(true)}>\n                      Open Nested Modal\n                    </Button>\n                  </ModalBody>\n                  <ModalFooter variant=\"filled\">\n                    <ActionBox>\n                      <ModalButtonSecondary onClick={() => toggleModal(\"nested\")}>\n                        Close\n                      </ModalButtonSecondary>\n                    </ActionBox>\n                  </ModalFooter>\n                </Modal>\n\n                <Modal\n                  open={nestedModal}\n                  closeModal={() => setNestedModal(false)}\n                  title=\"Nested Modal\"\n                >\n                  <ModalBody>\n                    <Typography>\n                      This is a nested modal that appears on top of the parent modal.\n                    </Typography>\n                  </ModalBody>\n                  <ModalFooter variant=\"filled\">\n                    <ActionBox>\n                      <ModalButtonSecondary onClick={() => setNestedModal(false)}>\n                        Close Nested\n                      </ModalButtonSecondary>\n                    </ActionBox>\n                  </ModalFooter>\n                </Modal>\n              </div>\n              <CodeBlock name=\"modal-nested\" code={codes[7]} />\n            </div>\n\n          </SistentThemeProvider>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default ModalCode;"],"names":["d","CodeBlock","_ref","name","code","showCode","setShowCode","useState","React","className","type","id","onChange","prev","htmlFor","Code","codeString","language","CustomInput","label","placeholder","Box","sx","mb","Typography","variant","gutterBottom","TextField","fullWidth","codes","ModalCode","location","useLocation","isDark","useStyledDarkMode","openModals","setOpenModals","basic","confirmation","action","informational","warning","success","error","form","nested","nestedModal","setNestedModal","toggleModal","_objectSpread","SistentLayout","title","TabButton","pathname","onClick","navigate","SistentThemeProvider","initialMode","Button","Modal","open","closeModal","ModalBody","ModalFooter","ActionBox","ModalButtonSecondary","color","display","alignItems","gap","WarningIcon","ModalButtonDanger","PersonAddIcon","ModalButtonPrimary","InfoIcon","paragraph","backgroundColor","fontSize","textAlign","CheckCircleIcon","ErrorIcon"],"sourceRoot":""}