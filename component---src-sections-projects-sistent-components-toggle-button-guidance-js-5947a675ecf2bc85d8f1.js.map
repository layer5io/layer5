{"version":3,"file":"component---src-sections-projects-sistent-components-toggle-button-guidance-js-5947a675ecf2bc85d8f1.js","mappings":"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","sources":["webpack://Layer5/./src/sections/Projects/Sistent/components/toggle-button/guidance.js","webpack://Layer5/./src/components/SistentNavigation/intra-page.js","webpack://Layer5/./src/sections/Projects/Sistent/sistent-layout.js"],"sourcesContent":["import React from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\nimport { Row } from \"../../../../../reusecore/Layout\";\nimport {\n  ToggleButton,\n  ToggleButtonGroup,\n  SistentThemeProvider,\n} from \"@sistent/sistent\";\nimport { SistentLayout } from \"../../sistent-layout\";\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\n\nconst ToggleButtonGuidance = () => {\n  const location = useLocation();\n  const { isDark } = useStyledDarkMode();\n\n  return (\n    <SistentLayout title=\"ToggleButton\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>ToggleButton</h2>\n        </a>\n        <p>\n          The `ToggleButton` and `ToggleButtonGroup` are versatile components\n          that can be used for a wide range of applications. Their intuitive\n          design ensures users can make selections easily and confidently.\n          Whether it's enabling a setting, selecting a mode, or choosing\n          multiple options, these components are built to enhance user\n          experience across different scenarios.\n        </p>\n        <div className=\"filterBtns\">\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/toggle-button\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/toggle-button\")\n            }\n            title=\"Overview\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n              \"/projects/sistent/components/toggle-button/guidance\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/toggle-button/guidance\")\n            }\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n              \"/projects/sistent/components/toggle-button/code\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/toggle-button/code\")\n            }\n            title=\"Code\"\n          />\n        </div>\n        <div className=\"main-content\">\n          <a id=\"Functionality\">\n            <h2>Functionality</h2>\n          </a>\n          <p>\n            The `ToggleButton` and `ToggleButtonGroup` components provide an\n            efficient way to handle user interactions for toggling states or\n            selecting one or multiple options. Below are some common use cases.\n          </p>\n          <h3>Exclusive Selection</h3>\n          <p>\n            Use an exclusive `ToggleButtonGroup` when only one selection is\n            allowed at a time. This is useful for scenarios like aligning text\n            to the left, center, or right.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <ToggleButtonGroup value=\"left\" exclusive>\n                <ToggleButton value=\"left\">Left</ToggleButton>\n                <ToggleButton value=\"center\">Center</ToggleButton>\n                <ToggleButton value=\"right\">Right</ToggleButton>\n              </ToggleButtonGroup>\n            </SistentThemeProvider>\n          </Row>\n\n          <h3>Multiple Selection</h3>\n          <p>\n            Enable multiple selections within a `ToggleButtonGroup` for cases\n            where users need to toggle multiple options, such as enabling bold,\n            italic, and underline text styling simultaneously.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <ToggleButtonGroup value={[\"bold\", \"italic\"]}>\n                <ToggleButton value=\"bold\">Toggle Button 1</ToggleButton>\n                <ToggleButton value=\"italic\">Toggle Button 2</ToggleButton>\n                <ToggleButton value=\"underline\">Toggle Button 3</ToggleButton>\n              </ToggleButtonGroup>\n            </SistentThemeProvider>\n          </Row>\n\n          <h3>Sizes</h3>\n          <p>\n            Adjust the size of the `ToggleButton` using the `size` prop. This\n            property supports `small`, `medium`, and `large` values to suit\n            various design requirements.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    gap: \"1rem\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <ToggleButtonGroup\n                    value=\"option1\"\n                    exclusive\n                    size=\"small\"\n                    style={{ width: \"70%\" }}\n                  >\n                    <ToggleButton value=\"option1\">Small</ToggleButton>\n                    <ToggleButton value=\"option2\">Small</ToggleButton>\n                  </ToggleButtonGroup>\n\n                  <ToggleButtonGroup\n                    value=\"option1\"\n                    exclusive\n                    size=\"medium\"\n                  >\n                    <ToggleButton value=\"option1\">Medium</ToggleButton>\n                    <ToggleButton value=\"option2\">Medium</ToggleButton>\n                  </ToggleButtonGroup>\n\n                  <ToggleButtonGroup\n                    value=\"option1\"\n                    exclusive\n                    size=\"large\"\n                    style={{ width: \"120%\" }}\n                  >\n                    <ToggleButton style={{ width: \"50%\" }} value=\"option1\">\n                      Large\n                    </ToggleButton>\n                    <ToggleButton style={{ width: \"50%\" }} value=\"option2\">\n                      Large\n                    </ToggleButton>\n                  </ToggleButtonGroup>\n                </div>\n              </SistentThemeProvider>\n            </div>\n          </div>\n\n          <h3>Colors</h3>\n          <p>\n            Use the `color` prop to style the `ToggleButtonGroup` with\n            pre-defined theme colors, such as `primary` or `secondary`. This\n            ensures consistency across the application.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <ToggleButtonGroup value=\"primary\" exclusive color=\"primary\">\n                <ToggleButton value=\"primary\">Primary</ToggleButton>\n                <ToggleButton value=\"secondary\">Secondary</ToggleButton>\n              </ToggleButtonGroup>\n            </SistentThemeProvider>\n          </Row>\n\n          <h3>Vertical Orientation</h3>\n          <p>\n            The `orientation` prop allows you to arrange toggle buttons\n            vertically instead of horizontally. This is ideal for menus or\n            options requiring more vertical space.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <ToggleButtonGroup\n                orientation=\"vertical\"\n                value=\"option1\"\n                exclusive\n              >\n                <ToggleButton value=\"option1\">Vertical 1</ToggleButton>\n                <ToggleButton value=\"option2\">Vertical 2</ToggleButton>\n                <ToggleButton value=\"option3\">Vertical 3</ToggleButton>\n              </ToggleButtonGroup>\n            </SistentThemeProvider>\n          </Row>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default ToggleButtonGuidance;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\nconst JoinCommunityWrapper = styled.div`\n  width: 18rem;\n\n  @media screen and (max-width: 750px) {\n    display: none;\n  }\n\n  @media screen and (min-width: 751px) and (max-width: 1279px) {\n    display: none;\n  }\n  .intra-page {\n    position: sticky;\n    top: 10rem;\n    right: 0rem;\n    margin-right: 1rem;\n    padding-bottom: 5rem;\n    padding-right: 2rem;\n    align-items: left;\n    justify-content: space-around;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .list {\n      color: #000000;\n    }\n    .active {\n      font-weight: 5000;\n      color: #000000;\n    }\n\n    ul {\n      list-style: none;\n      top: 3rem;\n      li {\n        padding-bottom: 0.5rem;\n        padding-top: 0.5rem;\n      }\n    }\n    @media only screen and (min-width: 1280px) and (max-width: 1350px) {\n      padding-right: 0rem;\n      margin-right: 0rem;\n    }\n    @media only screen and (max-width: 950px) {\n      width: 0;\n      opacity: 0;\n      height: 0;\n      transition: none;\n      visibility: hidden;\n    }\n  }\n\n  .learn {\n    width: 10rem;\n  }\n`;\n\nfunction IntraPage() {\n  const [contents, setContents] = useState([]);\n\n  useEffect(() => {\n    const anchors = document.querySelectorAll(\".main-content > a\");\n    console.log(anchors);\n    if (anchors) {\n      setContents(\n        Array.from(anchors).map((a) => ({\n          id: a.id,\n          link: `#${a.id}`,\n          text: a.id,\n        }))\n      );\n    }\n  }, []);\n\n  const [intapath, setIntapath] = useState(null);\n  useEffect(() => {\n    const path = window.location.pathname;\n    setIntapath(path);\n  }, []);\n\n  return (\n    <JoinCommunityWrapper>\n      <div className=\"intra-page\">\n        <ul>\n          {contents.map((x) => (\n            <li key={x.id} className=\"list\">\n              <Link\n                to={`${intapath}${x.link}`}\n                key={x.id}\n                activeClassName=\"active\"\n              >\n                {x.text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </JoinCommunityWrapper>\n  );\n}\n\nexport default IntraPage;\n","import React from \"react\";\nimport SistentWrapper from \"./sistent.style\";\nimport TOC from \"../../../components/SistentNavigation\";\nimport { Container } from \"../../../reusecore/Layout\";\nimport SistentPagination from \"../../../components/SistentNavigation/pagination\";\nimport IntraPage from \"../../../components/SistentNavigation/intra-page\";\n\nexport const SistentLayout = ({ title, children }) => {\n  return (\n    <SistentWrapper>\n      <div className=\"page-header-section\">\n        <h1>{title}</h1>\n      </div>\n      <TOC />\n      <div className=\"page-section\">\n        <Container>\n          {children} <SistentPagination />\n        </Container>\n        <IntraPage />\n      </div>\n    </SistentWrapper>\n  );\n};\n"],"names":["ToggleButtonGuidance","location","useLocation","isDark","useStyledDarkMode","React","SistentLayout","title","className","id","TabButton","pathname","onClick","navigate","Row","$Hcenter","SistentThemeProvider","initialMode","ToggleButtonGroup","value","exclusive","ToggleButton","style","display","flexDirection","gap","alignItems","size","width","color","orientation","JoinCommunityWrapper","styled","div","withConfig","displayName","componentId","contents","setContents","useState","useEffect","anchors","document","querySelectorAll","console","log","Array","from","map","a","link","text","intapath","setIntapath","path","window","x","key","Link","to","activeClassName","_ref","children","SistentWrapper","TOC","Container","SistentPagination","IntraPage"],"sourceRoot":""}