{"version":3,"file":"component---src-sections-projects-sistent-components-circularprogress-guidance-js-629b1bb20b5365585d14.js","mappings":"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","sources":["webpack://Layer5/./src/sections/Projects/Sistent/components/circularprogress/guidance.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\nimport { SistentLayout } from \"../../sistent-layout\";\nimport { SistentThemeProvider, Button, CircularProgress } from \"@sistent/sistent\";\nimport { Row } from \"../../../../../reusecore/Layout\";\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\n\nconst CircularprogressGuidance = () => {\n  const { isDark } = useStyledDarkMode();\n  const location = useLocation();\n\n  const [size, setSize] = useState(40); // default size\n  const [thickness, setThickness] = useState(4); // default thickness\n  const [currentColor, setCurrentColor] = useState(\"primary\"); // default color\n  const maxSize = 80;\n  const minSize = 20;\n  const maxThickness = 10;\n  const minThickness = 1;\n  const colors = [\"primary\", \"secondary\", \"success\", \"error\", \"warning\", \"info\"];\n\n  return (\n    <SistentLayout title=\"Circular Progress\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>Circular Progress</h2>\n        </a>\n        <p>\n          The Circular Progress component displays a circular loading indicator that represents\n          either determinate or indeterminate progress in your application. It's commonly used\n          to show loading states, progress of operations, or completion percentages.\n        </p>\n        <div className=\"filterBtns\">\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/circularprogress\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/circularprogress\")}\n            title=\"Overview\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n                \"/projects/sistent/components/circularprogress/guidance\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/circularprogress/guidance\")\n            }\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/circularprogress/code\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/circularprogress/code\")}\n            title=\"Code\"\n          />\n        </div>\n        <div className=\"main-content\">\n          <p>\n            Proper usage of the Circular Progress component can enhance user experience by visually indicating progress status. Below are some guidelines to ensure effective implementation.\n          </p>\n\n          <a id=\"Usage\">\n            <h2>Usage</h2>\n          </a>\n          <p>\n            To use the Circular Progress component, include it in your layout with the desired <code>variant</code> prop to specify whether it should be determinate or indeterminate. For example:\n          </p>\n          <ul>\n            <li><code>variant=\"indeterminate\"</code> for continuous loading.</li>\n            <li><code>variant=\"determinate\"</code> for specific progress indication.</li>\n          </ul>\n          <p>\n            The <code>value</code> prop is required for determinate progress to indicate how far along the task is, ranging from 0 to 100.\n          </p>\n          <br />\n          <a id=\"Sizing\">\n            <h3>Sizing</h3>\n          </a>\n          <p>\n            Adjust the size of the Circular Progress component using the <code>size</code> prop. For example, set <code>size={60}</code> to increase the diameter of the circular loader.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <CircularProgress size={size} />\n              <div style={{ marginLeft: \"20px\", display: \"flex\", gap: \"10px\" }}>\n                <Button\n                  variant=\"contained\"\n                  label=\"Decrease Size\"\n                  size=\"medium\"\n                  onClick={() => {\n                    if (size > minSize) {\n                      setSize(size - 10);\n                    }\n                  }}\n                  disabled={size <= minSize}\n                />\n                <Button\n                  variant=\"contained\"\n                  label=\"Increase Size\"\n                  size=\"medium\"\n                  onClick={() => {\n                    if (size < maxSize) {\n                      setSize(size + 10);\n                    }\n                  }}\n                  disabled={size >= maxSize}\n                />\n              </div>\n            </SistentThemeProvider>\n          </Row>\n\n          <br />\n          <a id=\"Thickness\">\n            <h3>Thickness</h3>\n          </a>\n          <p>\n            Control the thickness of the circular progress arc using the <code>thickness</code> prop. This allows for customization of the loader's appearance. For instance:\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <CircularProgress thickness={thickness} />\n              <div style={{ marginLeft: \"20px\", display: \"flex\", gap: \"10px\" }}>\n                <Button\n                  variant=\"contained\"\n                  label=\"Decrease Thickness\"\n                  size=\"medium\"\n                  onClick={() => {\n                    if (thickness > minThickness) {\n                      setThickness(thickness - 1);\n                    }\n                  }}\n                  disabled={thickness <= minThickness}\n                />\n                <Button\n                  variant=\"contained\"\n                  label=\"Increase Thickness\"\n                  size=\"medium\"\n                  onClick={() => {\n                    if (thickness < maxThickness) {\n                      setThickness(thickness + 1);\n                    }\n                  }}\n                  disabled={thickness >= maxThickness}\n                />\n              </div>\n            </SistentThemeProvider>\n          </Row>\n\n          <br />\n          <a id=\"Colors\">\n            <h3>Colors</h3>\n          </a>\n          <p>\n            Customize the color of the Circular Progress component using the <code>color</code> prop. Available colors include primary, secondary, success, error, warning, and info to match your design system.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <CircularProgress color={currentColor} />\n              <div style={{ marginLeft: \"20px\", display: \"flex\", gap: \"10px\", flexWrap: \"wrap\" }}>\n                {colors.map((color) => (\n                  <Button\n                    key={color}\n                    variant={currentColor === color ? \"contained\" : \"outlined\"}\n                    label={color.charAt(0).toUpperCase() + color.slice(1)}\n                    size=\"small\"\n                    onClick={() => setCurrentColor(color)}\n                  />\n                ))}\n              </div>\n            </SistentThemeProvider>\n          </Row>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default CircularprogressGuidance;"],"names":["CircularprogressGuidance","isDark","useStyledDarkMode","location","useLocation","size","setSize","useState","thickness","setThickness","currentColor","setCurrentColor","React","SistentLayout","title","className","id","TabButton","pathname","onClick","navigate","Row","$Hcenter","SistentThemeProvider","initialMode","CircularProgress","style","marginLeft","display","gap","Button","variant","label","disabled","color","flexWrap","map","key","charAt","toUpperCase","slice"],"sourceRoot":""}