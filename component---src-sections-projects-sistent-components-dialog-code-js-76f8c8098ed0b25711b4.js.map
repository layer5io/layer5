{"version":3,"file":"component---src-sections-projects-sistent-components-dialog-code-js-76f8c8098ed0b25711b4.js","mappings":"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","sources":["webpack://Layer5/./src/sections/Projects/Sistent/components/button/code-block.js","webpack://Layer5/./src/sections/Projects/Sistent/components/dialog/code.js","webpack://Layer5/./src/components/SistentNavigation/intra-page.js","webpack://Layer5/./src/sections/Projects/Sistent/sistent-layout.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Code from \"../../../../../components/CodeBlock\";\n\nexport const CodeBlock = ({ name, code }) => {\n  const [showCode, setShowCode] = useState(false);\n  const onChange = () => {\n    setShowCode((prev) => !prev);\n  };\n  return (\n    <div className=\"show-code\">\n      <input type=\"checkbox\" name={name} id={name} onChange={onChange} />\n      <label htmlFor={name} className=\"label\">\n        Show Code\n      </label>\n      {showCode && (\n        <Code codeString={code} language=\"javascript\" />\n      )}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\n\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  SistentThemeProvider,\n  Input\n} from \"@sistent/sistent\";\n\nimport { SistentLayout } from \"../../sistent-layout\";\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { CodeBlock } from \"../button/code-block\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\n\nconst codes = [\n  `const [open, setOpen] = useState(false);\n\nconst handleOpen = () => setOpen(true);\nconst handleClose = () => setOpen(false);\n\n<Button onClick={handleOpen}>Open Dialog</Button>\n<Dialog open={open} onClose={handleClose}>\n  <DialogTitle>Confirm Action</DialogTitle>\n  <DialogContent>\n    Do you want to proceed with this action?\n  </DialogContent>\n  <DialogActions>\n    <Button onClick={handleClose}>Cancel</Button>\n    <Button color=\"primary\" onClick={handleClose}>\n      Confirm\n    </Button>\n  </DialogActions>\n</Dialog>`,\n  `const [openFull, setOpenFull] = useState(false);\n\n<Button onClick={() => setOpenFull(true)}>\n  Open Full-Screen Dialog\n</Button>\n<Dialog\n  open={openFull}\n  onClose={() => setOpenFull(false)}\n  fullScreen\n  maxWidth=\"lg\"\n>\n  <DialogTitle>Full-Screen Dialog</DialogTitle>\n  <DialogContent>\n    <p>\n      This dialog stretches to full screen. Use it when the \n      user's full attention is needed.\n    </p>\n  </DialogContent>\n  <DialogActions>\n    <Button onClick={() => setOpenFull(false)}>Cancel</Button>\n    <Button color=\"primary\" onClick={() => setOpenFull(false)}>\n      Save\n    </Button>\n  </DialogActions>\n</Dialog>`,\n  `const [openForm, setOpenForm] = useState(false);\n\n<Button onClick={() => setOpenForm(true)}>\n  Open Form Dialog\n</Button>\n<Dialog open={openForm} onClose={() => setOpenForm(false)}>\n  <DialogTitle>Subscribe</DialogTitle>\n  <DialogContent>\n    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\n      <Input\n        label=\"Email Address\"\n        type=\"email\"\n        placeholder=\"you@example.com\"\n        required\n      />\n      <Input\n        label=\"Name\"\n        type=\"text\"\n        placeholder=\"John Doe\"\n        required\n      />\n    </div>\n  </DialogContent>\n  <DialogActions>\n    <Button onClick={() => setOpenForm(false)}>Cancel</Button>\n    <Button color=\"primary\" onClick={() => setOpenForm(false)}>\n      Subscribe\n    </Button>\n  </DialogActions>\n</Dialog>`\n];\n\nconst DialogCode = () => {\n  const location = useLocation();\n  const { isDark } = useStyledDarkMode();\n  const [open, setOpen] = useState(false);\n  const [openFull, setOpenFull] = useState(false);\n  const [openForm, setOpenForm] = useState(false);\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <SistentLayout title=\"Dialog\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>Dialog</h2>\n        </a>\n        <p>\n          Dialog components provide modal windows that focus user attention on specific tasks\n          or information. They overlay the main content and require user interaction before\n          returning to the underlying interface.\n        </p>\n\n        <div className=\"filterBtns\">\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/dialog\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/dialog\")}\n            title=\"Overview\"\n          />\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/dialog/guidance\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/dialog/guidance\")}\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/dialog/code\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/dialog/code\")}\n            title=\"Code\"\n          />\n        </div>\n\n        <div className=\"main-content\">\n          <p>\n            The <code>Dialog</code> component is essential for creating focused user experiences\n            that require immediate attention. It provides a controlled way to present forms,\n            confirmations, and detailed information without navigating away from the current context.\n          </p>\n\n          <a id=\"Basic Dialog\">\n            <h2>Basic Dialog</h2>\n          </a>\n          <p>\n            A simple modal dialog with title, content, and action buttons. This is the most\n            common pattern for confirmations and simple interactions.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <Button variant=\"contained\" onClick={handleOpen}>Open Dialog</Button>\n                <Dialog open={open} onClose={handleClose}>\n                  <DialogTitle>Confirm Action</DialogTitle>\n                  <DialogContent>\n                    Do you want to proceed with this action?\n                  </DialogContent>\n                  <DialogActions>\n                    <Button variant=\"contained\" onClick={handleClose}>Cancel</Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleClose}>\n                      Confirm\n                    </Button>\n                  </DialogActions>\n                </Dialog>\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"dialog-basic\" code={codes[0]} />\n          </div>\n\n          <a id=\"Full Screen Dialog\">\n            <h2>Full-Screen Dialog</h2>\n          </a>\n          <p>\n            Full-screen dialogs are useful for complex forms or when you need the user's\n            complete attention. They take up the entire viewport and are ideal for mobile devices.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <Button variant=\"contained\" onClick={() => setOpenFull(true)}>\n                  Open Full-Screen Dialog\n                </Button>\n                <Dialog\n                  open={openFull}\n                  onClose={() => setOpenFull(false)}\n                  fullScreen\n                  maxWidth=\"lg\"\n                >\n                  <DialogTitle>Full-Screen Dialog</DialogTitle>\n                  <DialogContent>\n                    <p>\n                      This dialog stretches to full screen. Use it when the user's\n                      full attention is needed for complex tasks or on mobile devices.\n                    </p>\n                  </DialogContent>\n                  <DialogActions style={{ justifyContent: \"flex-start\", paddingLeft: \"24px\" }}>\n                    <Button variant=\"contained\" onClick={() => setOpenFull(false)}>Cancel</Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => setOpenFull(false)}>\n                      Save\n                    </Button>\n                  </DialogActions>\n                </Dialog>\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"dialog-fullscreen\" code={codes[1]} />\n          </div>\n\n          <a id=\"Form Dialog\">\n            <h2>Dialog with Form</h2>\n          </a>\n          <p>\n            Dialogs can contain forms for collecting user input. This pattern is common\n            for creating, editing, or subscribing workflows that don't require a full page.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <Button variant=\"contained\" onClick={() => setOpenForm(true)}>\n                  Open Form Dialog\n                </Button>\n                <Dialog open={openForm} onClose={() => setOpenForm(false)}>\n                  <DialogTitle>Subscribe</DialogTitle>\n                  <DialogContent>\n                    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\", minWidth: \"300px\" }}>\n                      <Input\n                        label=\"Email Address\"\n                        type=\"email\"\n                        placeholder=\"you@example.com\"\n                        required\n                      />\n                      <Input\n                        label=\"Name\"\n                        type=\"text\"\n                        placeholder=\"John Doe\"\n                        required\n                      />\n                    </div>\n                  </DialogContent>\n                  <DialogActions>\n                    <Button variant=\"contained\" onClick={() => setOpenForm(false)}>Cancel</Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => setOpenForm(false)}>\n                      Subscribe\n                    </Button>\n                  </DialogActions>\n                </Dialog>\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"dialog-form\" code={codes[2]} />\n          </div>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default DialogCode;","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\nconst JoinCommunityWrapper = styled.div`\n  width: 18rem;\n\n  @media screen and (max-width: 750px) {\n    display: none;\n  }\n\n  @media screen and (min-width: 751px) and (max-width: 1279px) {\n    display: none;\n  }\n  .intra-page {\n    position: sticky;\n    top: 10rem;\n    right: 0rem;\n    margin-right: 1rem;\n    padding-bottom: 5rem;\n    padding-right: 2rem;\n    align-items: left;\n    justify-content: space-around;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .list {\n      color: #000000;\n    }\n    .active {\n      font-weight: 5000;\n      color: #000000;\n    }\n\n    ul {\n      list-style: none;\n      top: 3rem;\n      li {\n        padding-bottom: 0.5rem;\n        padding-top: 0.5rem;\n      }\n    }\n    @media only screen and (min-width: 1280px) and (max-width: 1350px) {\n      padding-right: 0rem;\n      margin-right: 0rem;\n    }\n    @media only screen and (max-width: 950px) {\n      width: 0;\n      opacity: 0;\n      height: 0;\n      transition: none;\n      visibility: hidden;\n    }\n  }\n\n  .learn {\n    width: 10rem;\n  }\n`;\n\nfunction IntraPage() {\n  const [contents, setContents] = useState([]);\n\n  useEffect(() => {\n    const anchors = document.querySelectorAll(\".main-content > a\");\n    console.log(anchors);\n    if (anchors) {\n      setContents(\n        Array.from(anchors).map((a) => ({\n          id: a.id,\n          link: `#${a.id}`,\n          text: a.id,\n        }))\n      );\n    }\n  }, []);\n\n  const [intapath, setIntapath] = useState(null);\n  useEffect(() => {\n    const path = window.location.pathname;\n    setIntapath(path);\n  }, []);\n\n  return (\n    <JoinCommunityWrapper>\n      <div className=\"intra-page\">\n        <ul>\n          {contents.map((x) => (\n            <li key={x.id} className=\"list\">\n              <Link\n                to={`${intapath}${x.link}`}\n                key={x.id}\n                activeClassName=\"active\"\n              >\n                {x.text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </JoinCommunityWrapper>\n  );\n}\n\nexport default IntraPage;\n","import React from \"react\";\nimport SistentWrapper from \"./sistent.style\";\nimport TOC from \"../../../components/SistentNavigation\";\nimport { Container } from \"../../../reusecore/Layout\";\nimport SistentPagination from \"../../../components/SistentNavigation/pagination\";\nimport IntraPage from \"../../../components/SistentNavigation/intra-page\";\n\nexport const SistentLayout = ({ title, children }) => {\n  return (\n    <SistentWrapper>\n      <div className=\"page-header-section\">\n        <h1>{title}</h1>\n      </div>\n      <TOC />\n      <div className=\"page-section\">\n        <Container>\n          {children} <SistentPagination />\n        </Container>\n        <IntraPage />\n      </div>\n    </SistentWrapper>\n  );\n};\n"],"names":["CodeBlock","_ref","name","code","showCode","setShowCode","useState","React","className","type","id","onChange","prev","htmlFor","Code","codeString","language","codes","DialogCode","location","useLocation","isDark","useStyledDarkMode","open","setOpen","openFull","setOpenFull","openForm","setOpenForm","handleClose","SistentLayout","title","TabButton","pathname","onClick","navigate","SistentThemeProvider","initialMode","Button","variant","handleOpen","Dialog","onClose","DialogTitle","DialogContent","DialogActions","color","fullScreen","maxWidth","style","justifyContent","paddingLeft","display","flexDirection","gap","minWidth","Input","label","placeholder","required","JoinCommunityWrapper","styled","div","withConfig","displayName","componentId","contents","setContents","useEffect","anchors","document","querySelectorAll","console","log","Array","from","map","a","link","text","intapath","setIntapath","path","window","x","key","Link","to","activeClassName","children","SistentWrapper","TOC","Container","SistentPagination","IntraPage"],"sourceRoot":""}