{"version":3,"file":"component---src-sections-projects-sistent-components-container-index-js-ca6f0e02abf0d2a2df07.js","mappings":"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","sources":["webpack://Layer5/./src/sections/Projects/Sistent/components/container/index.js","webpack://Layer5/./src/components/SistentNavigation/intra-page.js","webpack://Layer5/./src/sections/Projects/Sistent/sistent-layout.js"],"sourcesContent":["import React from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\n\nimport { SistentThemeProvider, Container, Box } from \"@sistent/sistent\";\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { SistentLayout } from \"../../sistent-layout\";\nimport { Row } from \"../../../../../reusecore/Layout\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\n\nconst SistentContainer = () => {\n  const location = useLocation();\n  const { isDark } = useStyledDarkMode();\n\n  return (\n    <SistentLayout title=\"Container\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>Container</h2>\n        </a>\n        <p>\n          Containers are fundamental layout elements, used to center and\n          structure content horizontally. They can be fluid or fixed, helping\n          maintain alignment across different screen sizes and improving\n          readability.\n        </p>\n        <div className=\"filterBtns\">\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/container\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/container\")}\n            title=\"Overview\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n              \"/projects/sistent/components/container/guidance\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/container/guidance\")\n            }\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n              \"/projects/sistent/components/container/code\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/container/code\")\n            }\n            title=\"Code\"\n          />\n        </div>\n        <div className=\"main-content\">\n          <p>\n            The Container component is an essential building block for creating\n            layouts. Its ability to center content, provide fluid and fixed\n            widths, and adapt responsively to different screen sizes makes it an\n            invaluable tool for developers. By using the Container effectively,\n            you can ensure that your application maintains a clean and organized\n            appearance while enhancing the user experience.\n          </p>\n          <a id=\"Types of Containers\">\n            <h2>Types of Container</h2>\n          </a>\n          <p>\n            Sistent has two main types of containers that cater to different\n            layout requirements: Fluid Containers and Fixed Containers. Each\n            type serves specific use cases in building responsive web\n            applications.\n          </p>\n          <h3>1. Fluid Container</h3>\n          <p>\n            A Fluid Container automatically adjusts its width to fill the\n            available space based on the viewport size. It allows for a\n            responsive layout that adapts to different screen sizes.\n          </p>\n          <h4>Usage</h4>\n          <p>\n            Ideal for layouts where you want the content to take full advantage\n            of the available width. The fluid nature of the container ensures\n            that it scales seamlessly across devices, from mobile to desktop.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <Container maxWidth=\"sm\">\n                <Box sx={{ bgcolor: \"#cfe8fc\", height: \"50vh\" }} />\n              </Container>\n            </SistentThemeProvider>\n          </Row>\n\n          <h3>2. Fixed Container</h3>\n          <p>\n            A Fixed Container has a predefined width that matches the minimum\n            width of the current breakpoint. This allows for a consistent and\n            controlled layout across different screen sizes.\n          </p>\n          <h4>Usage</h4>\n          <p>\n            Suitable for designs that require specific width constraints,\n            ensuring that your content does not stretch too wide on larger\n            screens. This is particularly useful for fixed-width layouts where\n            the visual structure is maintained.\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <Container fixed>\n                <Box sx={{ bgcolor: \"#cfe8fc\", height: \"50vh\" }} />\n              </Container>\n            </SistentThemeProvider>\n          </Row>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default SistentContainer;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\nconst JoinCommunityWrapper = styled.div`\n  width: 18rem;\n\n  @media screen and (max-width: 750px) {\n    display: none;\n  }\n\n  @media screen and (min-width: 751px) and (max-width: 1279px) {\n    display: none;\n  }\n  .intra-page {\n    position: sticky;\n    top: 10rem;\n    right: 0rem;\n    margin-right: 1rem;\n    padding-bottom: 5rem;\n    padding-right: 2rem;\n    align-items: left;\n    justify-content: space-around;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .list {\n      color: #000000;\n    }\n    .active {\n      font-weight: 5000;\n      color: #000000;\n    }\n\n    ul {\n      list-style: none;\n      top: 3rem;\n      li {\n        padding-bottom: 0.5rem;\n        padding-top: 0.5rem;\n      }\n    }\n    @media only screen and (min-width: 1280px) and (max-width: 1350px) {\n      padding-right: 0rem;\n      margin-right: 0rem;\n    }\n    @media only screen and (max-width: 950px) {\n      width: 0;\n      opacity: 0;\n      height: 0;\n      transition: none;\n      visibility: hidden;\n    }\n  }\n\n  .learn {\n    width: 10rem;\n  }\n`;\n\nfunction IntraPage() {\n  const [contents, setContents] = useState([]);\n\n  useEffect(() => {\n    const anchors = document.querySelectorAll(\".main-content > a\");\n    console.log(anchors);\n    if (anchors) {\n      setContents(\n        Array.from(anchors).map((a) => ({\n          id: a.id,\n          link: `#${a.id}`,\n          text: a.id,\n        }))\n      );\n    }\n  }, []);\n\n  const [intapath, setIntapath] = useState(null);\n  useEffect(() => {\n    const path = window.location.pathname;\n    setIntapath(path);\n  }, []);\n\n  return (\n    <JoinCommunityWrapper>\n      <div className=\"intra-page\">\n        <ul>\n          {contents.map((x) => (\n            <li key={x.id} className=\"list\">\n              <Link\n                to={`${intapath}${x.link}`}\n                key={x.id}\n                activeClassName=\"active\"\n              >\n                {x.text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </JoinCommunityWrapper>\n  );\n}\n\nexport default IntraPage;\n","import React from \"react\";\nimport SistentWrapper from \"./sistent.style\";\nimport TOC from \"../../../components/SistentNavigation\";\nimport { Container } from \"../../../reusecore/Layout\";\nimport SistentPagination from \"../../../components/SistentNavigation/pagination\";\nimport IntraPage from \"../../../components/SistentNavigation/intra-page\";\n\nexport const SistentLayout = ({ title, children }) => {\n  return (\n    <SistentWrapper>\n      <div className=\"page-header-section\">\n        <h1>{title}</h1>\n      </div>\n      <TOC />\n      <div className=\"page-section\">\n        <Container>\n          {children} <SistentPagination />\n        </Container>\n        <IntraPage />\n      </div>\n    </SistentWrapper>\n  );\n};\n"],"names":["SistentContainer","location","useLocation","isDark","useStyledDarkMode","React","SistentLayout","title","className","id","TabButton","pathname","onClick","navigate","Row","$Hcenter","SistentThemeProvider","initialMode","Container","maxWidth","Box","sx","bgcolor","height","fixed","JoinCommunityWrapper","styled","div","withConfig","displayName","componentId","contents","setContents","useState","useEffect","anchors","document","querySelectorAll","console","log","Array","from","map","a","link","text","intapath","setIntapath","path","window","x","key","Link","to","activeClassName","_ref","children","SistentWrapper","TOC","SistentPagination","IntraPage"],"sourceRoot":""}