{"version":3,"file":"component---src-sections-projects-sistent-components-toggle-button-code-js-425fb54c8db18783584e.js","mappings":"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","sources":["webpack://Layer5/./src/sections/Projects/Sistent/components/button/code-block.js","webpack://Layer5/./src/components/SistentNavigation/intra-page.js","webpack://Layer5/./src/sections/Projects/Sistent/sistent-layout.js","webpack://Layer5/./src/sections/Projects/Sistent/components/toggle-button/code.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Code from \"../../../../../components/CodeBlock\";\n\nexport const CodeBlock = ({ name, code }) => {\n  const [showCode, setShowCode] = useState(false);\n  const onChange = () => {\n    setShowCode((prev) => !prev);\n  };\n  return (\n    <div className=\"show-code\">\n      <input type=\"checkbox\" name={name} id={name} onChange={onChange} />\n      <label htmlFor={name} className=\"label\">\n        Show Code\n      </label>\n      {showCode && (\n        <Code codeString={code} language=\"javascript\" />\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\nconst JoinCommunityWrapper = styled.div`\n  width: 18rem;\n\n  @media screen and (max-width: 750px) {\n    display: none;\n  }\n\n  @media screen and (min-width: 751px) and (max-width: 1279px) {\n    display: none;\n  }\n  .intra-page {\n    position: sticky;\n    top: 10rem;\n    right: 0rem;\n    margin-right: 1rem;\n    padding-bottom: 5rem;\n    padding-right: 2rem;\n    align-items: left;\n    justify-content: space-around;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .list {\n      color: #000000;\n    }\n    .active {\n      font-weight: 5000;\n      color: #000000;\n    }\n\n    ul {\n      list-style: none;\n      top: 3rem;\n      li {\n        padding-bottom: 0.5rem;\n        padding-top: 0.5rem;\n      }\n    }\n    @media only screen and (min-width: 1280px) and (max-width: 1350px) {\n      padding-right: 0rem;\n      margin-right: 0rem;\n    }\n    @media only screen and (max-width: 950px) {\n      width: 0;\n      opacity: 0;\n      height: 0;\n      transition: none;\n      visibility: hidden;\n    }\n  }\n\n  .learn {\n    width: 10rem;\n  }\n`;\n\nfunction IntraPage() {\n  const [contents, setContents] = useState([]);\n\n  useEffect(() => {\n    const anchors = document.querySelectorAll(\".main-content > a\");\n    console.log(anchors);\n    if (anchors) {\n      setContents(\n        Array.from(anchors).map((a) => ({\n          id: a.id,\n          link: `#${a.id}`,\n          text: a.id,\n        }))\n      );\n    }\n  }, []);\n\n  const [intapath, setIntapath] = useState(null);\n  useEffect(() => {\n    const path = window.location.pathname;\n    setIntapath(path);\n  }, []);\n\n  return (\n    <JoinCommunityWrapper>\n      <div className=\"intra-page\">\n        <ul>\n          {contents.map((x) => (\n            <li key={x.id} className=\"list\">\n              <Link\n                to={`${intapath}${x.link}`}\n                key={x.id}\n                activeClassName=\"active\"\n              >\n                {x.text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </JoinCommunityWrapper>\n  );\n}\n\nexport default IntraPage;\n","import React from \"react\";\nimport SistentWrapper from \"./sistent.style\";\nimport TOC from \"../../../components/SistentNavigation\";\nimport { Container } from \"../../../reusecore/Layout\";\nimport SistentPagination from \"../../../components/SistentNavigation/pagination\";\nimport IntraPage from \"../../../components/SistentNavigation/intra-page\";\n\nexport const SistentLayout = ({ title, children }) => {\n  return (\n    <SistentWrapper>\n      <div className=\"page-header-section\">\n        <h1>{title}</h1>\n      </div>\n      <TOC />\n      <div className=\"page-section\">\n        <Container>\n          {children} <SistentPagination />\n        </Container>\n        <IntraPage />\n      </div>\n    </SistentWrapper>\n  );\n};\n","import React, { useState } from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\n\nimport {\n  SistentThemeProvider,\n  ToggleButton,\n  ToggleButtonGroup,\n} from \"@sistent/sistent\";\nimport { SistentLayout } from \"../../sistent-layout\";\nimport { CodeBlock } from \"../button/code-block\";\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\n\nconst codes = [\n  // For exclusive selection\n  `\n    <ToggleButtonGroup\n      value=\"left\"\n      exclusive\n    >\n      <ToggleButton value=\"left\">Left</ToggleButton>\n      <ToggleButton value=\"center\">Center</ToggleButton>\n      <ToggleButton value=\"right\">Right</ToggleButton>\n    </ToggleButtonGroup>\n  `,\n  // For multiple selection\n  `\n    <ToggleButtonGroup\n      value={[\"bold\", \"italic\"]}\n    >\n      <ToggleButton value=\"bold\">Toggle Button 1</ToggleButton>\n      <ToggleButton value=\"italic\">Toggle Button 1</ToggleButton>\n      <ToggleButton value=\"underline\">Toggle Button 1</ToggleButton>\n    </ToggleButtonGroup>\n  `,\n  // For size\n  `\n    <ToggleButtonGroup value=\"option1\" exclusive size=\"small\">\n      <ToggleButton value=\"option1\">Small</ToggleButton>\n      <ToggleButton value=\"option2\">Small</ToggleButton>\n    </ToggleButtonGroup>\n    <ToggleButtonGroup value=\"option1\" exclusive size=\"medium\">\n      <ToggleButton value=\"option1\">Medium</ToggleButton>\n      <ToggleButton value=\"option2\">Medium</ToggleButton>\n    </ToggleButtonGroup>\n    <ToggleButtonGroup value=\"option1\" exclusive size=\"large\">\n      <ToggleButton value=\"option1\">Large</ToggleButton>\n      <ToggleButton value=\"option2\">Large</ToggleButton>\n    </ToggleButtonGroup>\n  `,\n  // For color\n  `\n    <ToggleButtonGroup value=\"primary\" exclusive color=\"primary\">\n      <ToggleButton value=\"primary\">Primary</ToggleButton>\n      <ToggleButton value=\"secondary\">Secondary</ToggleButton>\n    </ToggleButtonGroup>\n  `,\n  // For vertical\n  `\n    <ToggleButtonGroup\n      orientation=\"vertical\"\n      value=\"option1\"\n      exclusive\n    >\n      <ToggleButton value=\"option1\">Vertical 1</ToggleButton>\n      <ToggleButton value=\"option2\">Vertical 2</ToggleButton>\n      <ToggleButton value=\"option3\">Vertical 3</ToggleButton>\n    </ToggleButtonGroup>\n  `,\n];\n\nconst ToggleButtonCode = () => {\n  const { isDark } = useStyledDarkMode();\n  const location = useLocation();\n  const [exclusiveSelected, setExclusiveSelected] = useState(\"left\");\n  const [multiSelected, setMultiSelected] = useState([\"bold\"]);\n  const [sizeSelected, setSizeSelected] = useState(\"small\");\n  const [colorSelected, setColorSelected] = useState(\"primary\");\n  const [verticalSelected, setVerticalSelected] = useState(\"left\");\n  const handleExclusiveToggle = (event, value) => {\n    setExclusiveSelected(value);\n  };\n\n  const handleMultiToggle = (event, value) => {\n    setMultiSelected(value);\n  };\n  const handleSizeToggle = (event, value) => {\n    setSizeSelected(value);\n  };\n  const handleColorToggle = (event, value) => {\n    setColorSelected(value);\n  };\n  const handleVerticalToggle = (event, value) => {\n    setVerticalSelected(value);\n  };\n\n  return (\n    <SistentLayout title=\"ToggleButton\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>ToggleButton</h2>\n        </a>\n        <p>\n          The `ToggleButton` and `ToggleButtonGroup` are versatile components\n          that can be used for a wide range of applications. Their intuitive\n          design ensures users can make selections easily and confidently.\n          Whether it's enabling a setting, selecting a mode, or choosing\n          multiple options, these components are built to enhance user\n          experience across different scenarios.\n        </p>\n        <div className=\"filterBtns\">\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/toggle-button\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/toggle-button\")\n            }\n            title=\"Overview\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n              \"/projects/sistent/components/toggle-button/guidance\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/toggle-button/guidance\")\n            }\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n              \"/projects/sistent/components/toggle-button/code\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/toggle-button/code\")\n            }\n            title=\"Code\"\n          />\n        </div>\n        <div className=\"main-content\">\n          <a id=\"Exclusive Selection\">\n            <h3>Exclusive Selection</h3>\n          </a>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <ToggleButtonGroup\n                  value={exclusiveSelected}\n                  exclusive\n                  onChange={handleExclusiveToggle}\n                >\n                  <ToggleButton value=\"left\">Left</ToggleButton>\n                  <ToggleButton value=\"center\">Center</ToggleButton>\n                  <ToggleButton value=\"right\">Right</ToggleButton>\n                </ToggleButtonGroup>\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"exclusive-selection\" code={codes[0]} />\n          </div>\n\n          <a id=\"Multiple Selection\">\n            <h3>Multiple Selection</h3>\n          </a>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <ToggleButtonGroup\n                  value={multiSelected}\n                  onChange={handleMultiToggle}\n                >\n                  <ToggleButton value=\"bold\">Toggle Button 1</ToggleButton>\n                  <ToggleButton value=\"italic\">Toggle Button 2</ToggleButton>\n                  <ToggleButton value=\"underline\">Toggle Button 3</ToggleButton>\n                </ToggleButtonGroup>\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"multiple-selection\" code={codes[1]} />\n          </div>\n\n          <a id=\"Sizes\">\n            <h3>ToggleButton Sizes</h3>\n          </a>\n          <p>\n            Adjust the size of the `ToggleButton` using the `size` prop.\n            Supported values include `small`, `medium`, and `large`.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    gap: \"1rem\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <ToggleButtonGroup\n                    value={sizeSelected}\n                    onChange={handleSizeToggle}\n                    exclusive\n                    size=\"small\"\n                    style={{ width: \"70%\" }}\n                  >\n                    <ToggleButton value=\"option1\">Small</ToggleButton>\n                    <ToggleButton value=\"option2\">Small</ToggleButton>\n                  </ToggleButtonGroup>\n\n                  <ToggleButtonGroup\n                    value={sizeSelected}\n                    onChange={handleSizeToggle}\n                    exclusive\n                    size=\"medium\"\n                  >\n                    <ToggleButton value=\"option1\">Medium</ToggleButton>\n                    <ToggleButton value=\"option2\">Medium</ToggleButton>\n                  </ToggleButtonGroup>\n\n                  <ToggleButtonGroup\n                    value={sizeSelected}\n                    onChange={handleSizeToggle}\n                    exclusive\n                    size=\"large\"\n                    style={{ width: \"120%\" }}\n                  >\n                    <ToggleButton style={ { width: \"50%\" }} value=\"option1\">Large</ToggleButton>\n                    <ToggleButton style={ { width: \"50%\" }} value=\"option2\">Large</ToggleButton>\n                  </ToggleButtonGroup>\n                </div>\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"toggle-button-sizes\" code={codes[2]} />\n          </div>\n\n          <a id=\"Colors\">\n            <h3>ToggleButton Colors</h3>\n          </a>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <ToggleButtonGroup\n                  value={colorSelected}\n                  onChange={handleColorToggle}\n                  exclusive\n                  color=\"primary\"\n                >\n                  <ToggleButton value=\"primary\">Primary</ToggleButton>\n                  <ToggleButton value=\"secondary\">Secondary</ToggleButton>\n                </ToggleButtonGroup>\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"toggle-button-colors\" code={codes[3]} />\n          </div>\n\n          <a id=\"Vertical Buttons\">\n            <h3>Vertical Buttons</h3>\n          </a>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <ToggleButtonGroup\n                  orientation=\"vertical\"\n                  value={verticalSelected}\n                  onChange={handleVerticalToggle}\n                  exclusive\n                >\n                  <ToggleButton value=\"option1\">Vertical 1</ToggleButton>\n                  <ToggleButton value=\"option2\">Vertical 2</ToggleButton>\n                  <ToggleButton value=\"option3\">Vertical 3</ToggleButton>\n                </ToggleButtonGroup>\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"vertical-toggle-buttons\" code={codes[4]} />\n          </div>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default ToggleButtonCode;\n"],"names":["CodeBlock","_ref","name","code","showCode","setShowCode","useState","React","className","type","id","onChange","prev","htmlFor","Code","codeString","language","JoinCommunityWrapper","styled","div","withConfig","displayName","componentId","contents","setContents","useEffect","anchors","document","querySelectorAll","console","log","Array","from","map","a","link","text","intapath","setIntapath","path","window","location","pathname","x","key","Link","to","activeClassName","SistentLayout","title","children","SistentWrapper","TOC","Container","SistentPagination","IntraPage","codes","ToggleButtonCode","isDark","useStyledDarkMode","useLocation","exclusiveSelected","setExclusiveSelected","multiSelected","setMultiSelected","sizeSelected","setSizeSelected","colorSelected","setColorSelected","verticalSelected","setVerticalSelected","handleSizeToggle","event","value","TabButton","onClick","navigate","SistentThemeProvider","initialMode","ToggleButtonGroup","exclusive","handleExclusiveToggle","ToggleButton","handleMultiToggle","style","display","flexDirection","gap","alignItems","size","width","handleColorToggle","color","orientation","handleVerticalToggle"],"sourceRoot":""}