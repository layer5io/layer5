{"version":3,"file":"component---src-sections-projects-sistent-components-text-input-code-js-57b8ebd2a4c486703bbe.js","mappings":"gKAGO,MAAMA,EAAYC,IAAqB,IAApB,KAAEC,EAAI,KAAEC,GAAMF,EACtC,MAAM,EAACG,EAAS,EAACC,IAAeC,EAAAA,EAAAA,WAAS,GAIzC,OACEC,EAAAA,cAAA,OAAKC,UAAU,aACbD,EAAAA,cAAA,SAAOE,KAAK,WAAWP,KAAMA,EAAMQ,GAAIR,EAAMS,SALhCA,KACfN,EAAaO,IAAUA,MAKrBL,EAAAA,cAAA,SAAOM,QAASX,EAAMM,UAAU,SAAQ,aAGvCJ,GACCG,EAAAA,cAACO,EAAAA,GAAI,CAACC,WAAYZ,EAAMa,SAAS,gB,6HCXzC,MAAMC,E,SAAuBC,QAAOC,IAAGC,WAAA,CAAAC,YAAA,mCAAAC,YAAA,eAAVJ,CAAU,mjCAqGvC,MA5CA,WACE,MAAM,EAACK,EAAS,EAACC,IAAelB,EAAAA,EAAAA,UAAS,KAEzCmB,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAUC,SAASC,iBAAiB,qBAC1CC,QAAQC,IAAIJ,GACRA,GACFF,EACEO,MAAMC,KAAKN,GAASO,IAAKC,IAAC,CACxBxB,GAAIwB,EAAExB,GACNyB,KAAM,IAAID,EAAExB,KACZ0B,KAAMF,EAAExB,QAIb,IAEH,MAAM,EAAC2B,EAAS,EAACC,IAAehC,EAAAA,EAAAA,UAAS,MAMzC,OALAmB,EAAAA,EAAAA,WAAU,KACR,MAAMc,EAAOC,OAAOC,SAASC,SAC7BJ,EAAYC,IACX,IAGDhC,EAAAA,cAACU,EAAoB,KACnBV,EAAAA,cAAA,OAAKC,UAAU,cACbD,EAAAA,cAAA,UACGgB,EAASU,IAAKU,GACbpC,EAAAA,cAAA,MAAIqC,IAAKD,EAAEjC,GAAIF,UAAU,QACvBD,EAAAA,cAACsC,EAAAA,KAAI,CACHC,GAAI,GAAGT,IAAWM,EAAER,OACpBS,IAAKD,EAAEjC,GACPqC,gBAAgB,UAEfJ,EAAEP,UAQnB,EChGO,MAAMY,EAAgB/C,IAA0B,IAAzB,MAAEgD,EAAK,SAAEC,GAAUjD,EAC/C,OACEM,EAAAA,cAAC4C,EAAAA,EAAc,KACb5C,EAAAA,cAAA,OAAKC,UAAU,uBACbD,EAAAA,cAAA,UAAK0C,IAEP1C,EAAAA,cAAC6C,EAAAA,EAAG,MACJ7C,EAAAA,cAAA,OAAKC,UAAU,gBACbD,EAAAA,cAAC8C,EAAAA,GAAS,KACPH,EAAS,IAAC3C,EAAAA,cAAC+C,EAAAA,EAAiB,OAE/B/C,EAAAA,cAACgD,EAAS,Q,yHCNlB,MAAMC,EAAQ,CACZ,0CACA,sGAMA,8EAKA,wJAGA,8OAgBA,oHAMA,uFA4NF,UArNsBC,KACpB,MAAMhB,GAAWiB,EAAAA,EAAAA,gBACX,OAAEC,IAAWC,EAAAA,EAAAA,KAEnB,OACErD,EAAAA,cAACyC,EAAAA,EAAa,CAACC,MAAM,cACnB1C,EAAAA,cAAA,OAAKC,UAAU,WACbD,EAAAA,cAAA,KAAGG,GAAG,YACJH,EAAAA,cAAA,UAAI,eAENA,EAAAA,cAAA,SAAG,kOAKHA,EAAAA,cAAA,OAAKC,UAAU,cACbD,EAAAA,cAACsD,EAAAA,QAAS,CACRrD,UACwB,4CAAtBiC,EAASC,SACL,SACA,GAENoB,QAASA,KAAMC,EAAAA,EAAAA,UAAS,2CACxBd,MAAM,aAER1C,EAAAA,cAACsD,EAAAA,QAAS,CACRrD,UAEE,qDADAiC,EAASC,SAEL,SACA,GAENoB,QAASA,KACPC,EAAAA,EAAAA,UAAS,oDAEXd,MAAM,aAER1C,EAAAA,cAACsD,EAAAA,QAAS,CACRrD,UAEE,iDADAiC,EAASC,SAEL,SACA,GAENoB,QAASA,KACPC,EAAAA,EAAAA,UAAS,gDAEXd,MAAM,UAGV1C,EAAAA,cAAA,OAAKC,UAAU,gBACbD,EAAAA,cAAA,SAAG,OACGA,EAAAA,cAAA,YAAM,SAAY,+MAKxBA,EAAAA,cAAA,KAAGG,GAAG,eACJH,EAAAA,cAAA,UAAI,qBAENA,EAAAA,cAAA,SAAG,mIAIHA,EAAAA,cAAA,OAAKC,UAAU,YACbD,EAAAA,cAAA,OAAKC,UAAU,SACbD,EAAAA,cAACyD,EAAAA,qBAAoB,CAACC,YAAaN,EAAS,OAAS,SACnDpD,EAAAA,cAAC2D,EAAAA,MAAK,CAACC,YAAY,sBAGvB5D,EAAAA,cAACP,EAAAA,EAAS,CAACE,KAAK,cAAcC,KAAMqD,EAAM,MAG5CjD,EAAAA,cAAA,KAAGG,GAAG,oBACJH,EAAAA,cAAA,UAAI,kBAENA,EAAAA,cAAA,SAAG,0JAIHA,EAAAA,cAAA,OAAKC,UAAU,YACbD,EAAAA,cAAA,OAAKC,UAAU,SACbD,EAAAA,cAACyD,EAAAA,qBAAoB,CAACC,YAAaN,EAAS,OAAS,SACnDpD,EAAAA,cAAC2D,EAAAA,MAAK,CACJE,MAAM,gBACN3D,KAAK,QACL0D,YAAY,qBACZE,UAAQ,MAId9D,EAAAA,cAACP,EAAAA,EAAS,CAACE,KAAK,gBAAgBC,KAAMqD,EAAM,MAG9CjD,EAAAA,cAAA,KAAGG,GAAG,mBACJH,EAAAA,cAAA,UAAI,yBAENA,EAAAA,cAAA,SAAG,kKAIHA,EAAAA,cAAA,OAAKC,UAAU,YACbD,EAAAA,cAAA,OAAKC,UAAU,SACbD,EAAAA,cAACyD,EAAAA,qBAAoB,CAACC,YAAaN,EAAS,OAAS,SACnDpD,EAAAA,cAAC2D,EAAAA,MAAK,CACJC,YAAY,yBACZG,WAAS,EACTC,KAAM,MAIZhE,EAAAA,cAACP,EAAAA,EAAS,CAACE,KAAK,kBAAkBC,KAAMqD,EAAM,MAGhDjD,EAAAA,cAAA,KAAGG,GAAG,iBACJH,EAAAA,cAAA,UAAI,kBAENA,EAAAA,cAAA,SAAG,kKAIHA,EAAAA,cAAA,OAAKC,UAAU,YACbD,EAAAA,cAAA,OAAKC,UAAU,SACbD,EAAAA,cAACyD,EAAAA,qBAAoB,CAACC,YAAaN,EAAS,OAAS,SACnDpD,EAAAA,cAAA,OAAKiE,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,IAAK,OAAQC,WAAY,eAC/ErE,EAAAA,cAAC2D,EAAAA,MAAK,CAACW,MAAM,UAAUV,YAAY,YACnC5D,EAAAA,cAAC2D,EAAAA,MAAK,CAACW,MAAM,YAAYV,YAAY,cACrC5D,EAAAA,cAAC2D,EAAAA,MAAK,CAACW,MAAM,UAAUV,YAAY,eAIzC5D,EAAAA,cAACP,EAAAA,EAAS,CAACE,KAAK,eAAeC,KAAMqD,EAAM,MAG7CjD,EAAAA,cAAA,KAAGG,GAAG,eACJH,EAAAA,cAAA,UAAI,0BAENA,EAAAA,cAAA,SAAG,wKAIHA,EAAAA,cAAA,OAAKC,UAAU,YACbD,EAAAA,cAAA,OAAKC,UAAU,SACbD,EAAAA,cAACyD,EAAAA,qBAAoB,CAACC,YAAaN,EAAS,OAAS,SACnDpD,EAAAA,cAAA,OAAKiE,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,IAAK,OAAQC,WAAY,eAC/ErE,EAAAA,cAAC2D,EAAAA,MAAK,CACJzD,KAAK,WACL2D,MAAM,WACND,YAAY,iBACZE,UAAQ,IAEV9D,EAAAA,cAAC2D,EAAAA,MAAK,CACJzD,KAAK,SACL2D,MAAM,MACND,YAAY,OAEd5D,EAAAA,cAAC2D,EAAAA,MAAK,CACJzD,KAAK,MACL2D,MAAM,QACND,YAAY,yBAKpB5D,EAAAA,cAACP,EAAAA,EAAS,CAACE,KAAK,cAAcC,KAAMqD,EAAM,MAG5CjD,EAAAA,cAAA,KAAGG,GAAG,eACJH,EAAAA,cAAA,UAAI,gBAENA,EAAAA,cAAA,SAAG,sJAIHA,EAAAA,cAAA,OAAKC,UAAU,YACbD,EAAAA,cAAA,OAAKC,UAAU,SACbD,EAAAA,cAACyD,EAAAA,qBAAoB,CAACC,YAAaN,EAAS,OAAS,SACnDpD,EAAAA,cAAC2D,EAAAA,MAAK,CACJE,MAAM,WACND,YAAY,iBACZW,OAAK,EACLC,WAAW,gCAIjBxE,EAAAA,cAACP,EAAAA,EAAS,CAACE,KAAK,cAAcC,KAAMqD,EAAM,MAG5CjD,EAAAA,cAAA,KAAGG,GAAG,kBACJH,EAAAA,cAAA,UAAI,mBAENA,EAAAA,cAAA,SAAG,8IAIHA,EAAAA,cAAA,OAAKC,UAAU,YACbD,EAAAA,cAAA,OAAKC,UAAU,SACbD,EAAAA,cAACyD,EAAAA,qBAAoB,CAACC,YAAaN,EAAS,OAAS,SACnDpD,EAAAA,cAAC2D,EAAAA,MAAK,CACJE,MAAM,kBACNY,MAAM,yBACNC,UAAQ,MAId1E,EAAAA,cAACP,EAAAA,EAAS,CAACE,KAAK,iBAAiBC,KAAMqD,EAAM,S","sources":["webpack://Layer5/./src/sections/Projects/Sistent/components/button/code-block.js","webpack://Layer5/./src/components/SistentNavigation/intra-page.js","webpack://Layer5/./src/sections/Projects/Sistent/sistent-layout.js","webpack://Layer5/./src/sections/Projects/Sistent/components/text-input/code.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Code from \"../../../../../components/CodeBlock\";\n\nexport const CodeBlock = ({ name, code }) => {\n  const [showCode, setShowCode] = useState(false);\n  const onChange = () => {\n    setShowCode((prev) => !prev);\n  };\n  return (\n    <div className=\"show-code\">\n      <input type=\"checkbox\" name={name} id={name} onChange={onChange} />\n      <label htmlFor={name} className=\"label\">\n        Show Code\n      </label>\n      {showCode && (\n        <Code codeString={code} language=\"javascript\" />\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\nconst JoinCommunityWrapper = styled.div`\n  width: 18rem;\n\n  @media screen and (max-width: 750px) {\n    display: none;\n  }\n\n  @media screen and (min-width: 751px) and (max-width: 1279px) {\n    display: none;\n  }\n  .intra-page {\n    position: sticky;\n    top: 10rem;\n    right: 0rem;\n    margin-right: 1rem;\n    padding-bottom: 5rem;\n    padding-right: 2rem;\n    align-items: left;\n    justify-content: space-around;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .list {\n      color: #000000;\n    }\n    .active {\n      font-weight: 5000;\n      color: #000000;\n    }\n\n    ul {\n      list-style: none;\n      top: 3rem;\n      li {\n        padding-bottom: 0.5rem;\n        padding-top: 0.5rem;\n      }\n    }\n    @media only screen and (min-width: 1280px) and (max-width: 1350px) {\n      padding-right: 0rem;\n      margin-right: 0rem;\n    }\n    @media only screen and (max-width: 950px) {\n      width: 0;\n      opacity: 0;\n      height: 0;\n      transition: none;\n      visibility: hidden;\n    }\n  }\n\n  .learn {\n    width: 10rem;\n  }\n`;\n\nfunction IntraPage() {\n  const [contents, setContents] = useState([]);\n\n  useEffect(() => {\n    const anchors = document.querySelectorAll(\".main-content > a\");\n    console.log(anchors);\n    if (anchors) {\n      setContents(\n        Array.from(anchors).map((a) => ({\n          id: a.id,\n          link: `#${a.id}`,\n          text: a.id,\n        }))\n      );\n    }\n  }, []);\n\n  const [intapath, setIntapath] = useState(null);\n  useEffect(() => {\n    const path = window.location.pathname;\n    setIntapath(path);\n  }, []);\n\n  return (\n    <JoinCommunityWrapper>\n      <div className=\"intra-page\">\n        <ul>\n          {contents.map((x) => (\n            <li key={x.id} className=\"list\">\n              <Link\n                to={`${intapath}${x.link}`}\n                key={x.id}\n                activeClassName=\"active\"\n              >\n                {x.text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </JoinCommunityWrapper>\n  );\n}\n\nexport default IntraPage;\n","import React from \"react\";\nimport SistentWrapper from \"./sistent.style\";\nimport TOC from \"../../../components/SistentNavigation\";\nimport { Container } from \"../../../reusecore/Layout\";\nimport SistentPagination from \"../../../components/SistentNavigation/pagination\";\nimport IntraPage from \"../../../components/SistentNavigation/intra-page\";\n\nexport const SistentLayout = ({ title, children }) => {\n  return (\n    <SistentWrapper>\n      <div className=\"page-header-section\">\n        <h1>{title}</h1>\n      </div>\n      <TOC />\n      <div className=\"page-section\">\n        <Container>\n          {children} <SistentPagination />\n        </Container>\n        <IntraPage />\n      </div>\n    </SistentWrapper>\n  );\n};\n","import React from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\n\nimport { SistentThemeProvider, Input } from \"@sistent/sistent\";\nimport { CodeBlock } from \"../button/code-block\";\n\n\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { SistentLayout } from \"../../sistent-layout\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\n\nconst codes = [\n  \"<Input placeholder=\\\"Enter your name\\\" />\",\n  `<Input\n  label=\"Email Address\"\n  type=\"email\"\n  placeholder=\"example@domain.com\"\n  required\n/>`,\n  `<Input\n  placeholder=\"Share your thoughts...\"\n  multiline\n  rows={4}\n/>`,\n  `<Input color=\"primary\" placeholder=\"Primary\" />\n<Input color=\"secondary\" placeholder=\"Secondary\" />\n<Input color=\"success\" placeholder=\"Success\" />`,\n  `<Input\n  type=\"password\"\n  label=\"Password\"\n  placeholder=\"Enter password\"\n  required\n/>\n<Input\n  type=\"number\"\n  label=\"Age\"\n  placeholder=\"25\"\n/>\n<Input\n  type=\"tel\"\n  label=\"Phone\"\n  placeholder=\"+1 (555) 123-4567\"\n/>`,\n  `<Input\n  label=\"Username\"\n  placeholder=\"Enter username\"\n  error\n  helperText=\"Username is already taken\"\n/>`,\n  `<Input\n  label=\"Read-only Field\"\n  value=\"This field is disabled\"\n  disabled\n/>`\n];\n\nconst TextInputCode = () => {\n  const location = useLocation();\n  const { isDark } = useStyledDarkMode();\n\n  return (\n    <SistentLayout title=\"Text Input\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>Text Input</h2>\n        </a>\n        <p>\n          Input components provide users with the ability to enter text data in forms and interfaces.\n          They support various input types, validation states, and customization options for creating\n          effective data collection experiences.\n        </p>\n        <div className=\"filterBtns\">\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/text-input\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/text-input\")}\n            title=\"Overview\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n              \"/projects/sistent/components/text-input/guidance\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/text-input/guidance\")\n            }\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n              \"/projects/sistent/components/text-input/code\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/text-input/code\")\n            }\n            title=\"Code\"\n          />\n        </div>\n        <div className=\"main-content\">\n          <p>\n            The <code>Input</code> component is essential for collecting user data in forms.\n            It provides immediate feedback during data entry, supports various input types,\n            and maintains consistency with your application's design system.\n          </p>\n\n          <a id=\"Basic Input\">\n            <h2>Basic Text Input</h2>\n          </a>\n          <p>\n            A simple input field for collecting single-line text data. This is the most common\n            form of text input used across applications.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <Input placeholder=\"Enter your name\" />\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"input-basic\" code={codes[0]} />\n          </div>\n\n          <a id=\"Input with Label\">\n            <h2>Labeled Input</h2>\n          </a>\n          <p>\n            Inputs with labels provide better accessibility and user guidance. Labels clearly\n            identify the purpose of each input field and support screen readers.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <Input\n                  label=\"Email Address\"\n                  type=\"email\"\n                  placeholder=\"example@domain.com\"\n                  required\n                />\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"input-labeled\" code={codes[1]} />\n          </div>\n\n          <a id=\"Multiline Input\">\n            <h2>Multiline Text Input</h2>\n          </a>\n          <p>\n            For longer text content that may span multiple lines. The multiline input\n            automatically expands to accommodate content and provides users with adequate space.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <Input\n                  placeholder=\"Share your thoughts...\"\n                  multiline\n                  rows={4}\n                />\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"input-multiline\" code={codes[2]} />\n          </div>\n\n          <a id=\"Color Options\">\n            <h2>Color Options</h2>\n          </a>\n          <p>\n            Input components support various color themes to match your application's\n            design system. Colors can convey different meanings or states within your interface.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"16px\", alignItems: \"flex-start\" }}>\n                  <Input color=\"primary\" placeholder=\"Primary\" />\n                  <Input color=\"secondary\" placeholder=\"Secondary\" />\n                  <Input color=\"success\" placeholder=\"Success\" />\n                </div>\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"input-colors\" code={codes[3]} />\n          </div>\n\n          <a id=\"Input Types\">\n            <h2>Different Input Types</h2>\n          </a>\n          <p>\n            Various input types provide specialized behavior and validation for different\n            data formats. Choose the appropriate type to enhance user experience and data quality.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"16px\", alignItems: \"flex-start\" }}>\n                  <Input\n                    type=\"password\"\n                    label=\"Password\"\n                    placeholder=\"Enter password\"\n                    required\n                  />\n                  <Input\n                    type=\"number\"\n                    label=\"Age\"\n                    placeholder=\"25\"\n                  />\n                  <Input\n                    type=\"tel\"\n                    label=\"Phone\"\n                    placeholder=\"+1 (555) 123-4567\"\n                  />\n                </div>\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"input-types\" code={codes[4]} />\n          </div>\n\n          <a id=\"Error State\">\n            <h2>Error State</h2>\n          </a>\n          <p>\n            Error states provide visual feedback when validation fails. Combined with helper text,\n            they guide users toward resolving input issues effectively.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <Input\n                  label=\"Username\"\n                  placeholder=\"Enter username\"\n                  error\n                  helperText=\"Username is already taken\"\n                />\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"input-error\" code={codes[5]} />\n          </div>\n\n          <a id=\"Disabled State\">\n            <h2>Disabled State</h2>\n          </a>\n          <p>\n            Disabled inputs are non-interactive and typically used for read-only data\n            or when certain conditions haven't been met to enable the input.\n          </p>\n          <div className=\"showcase\">\n            <div className=\"items\">\n              <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n                <Input\n                  label=\"Read-only Field\"\n                  value=\"This field is disabled\"\n                  disabled\n                />\n              </SistentThemeProvider>\n            </div>\n            <CodeBlock name=\"input-disabled\" code={codes[6]} />\n          </div>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default TextInputCode;"],"names":["CodeBlock","_ref","name","code","showCode","setShowCode","useState","React","className","type","id","onChange","prev","htmlFor","Code","codeString","language","JoinCommunityWrapper","styled","div","withConfig","displayName","componentId","contents","setContents","useEffect","anchors","document","querySelectorAll","console","log","Array","from","map","a","link","text","intapath","setIntapath","path","window","location","pathname","x","key","Link","to","activeClassName","SistentLayout","title","children","SistentWrapper","TOC","Container","SistentPagination","IntraPage","codes","TextInputCode","useLocation","isDark","useStyledDarkMode","TabButton","onClick","navigate","SistentThemeProvider","initialMode","Input","placeholder","label","required","multiline","rows","style","display","flexDirection","gap","alignItems","color","error","helperText","value","disabled"],"sourceRoot":""}