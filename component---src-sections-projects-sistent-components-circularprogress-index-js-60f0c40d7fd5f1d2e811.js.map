{"version":3,"file":"component---src-sections-projects-sistent-components-circularprogress-index-js-60f0c40d7fd5f1d2e811.js","mappings":"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","sources":["webpack://Layer5/./src/sections/Projects/Sistent/components/circularprogress/index.js","webpack://Layer5/./src/components/SistentNavigation/intra-page.js","webpack://Layer5/./src/sections/Projects/Sistent/sistent-layout.js"],"sourcesContent":["import React from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\nimport { SistentThemeProvider, CircularProgress } from \"@sistent/sistent\";\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { SistentLayout } from \"../../sistent-layout\";\nimport { Row } from \"../../../../../reusecore/Layout\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\n\nconst SistentCircularprogress = () => {\n  const location = useLocation();\n  const { isDark } = useStyledDarkMode();\n\n  return (\n    <SistentLayout title=\"Circular Progress\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>Circular Progress</h2>\n        </a>\n        <p>\n          The Circular Progress component displays a circular loading indicator that represents\n          either determinate or indeterminate progress in your application. It's commonly used\n          to show loading states, progress of operations, or completion percentages.\n        </p>\n        <div className=\"filterBtns\">\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/circularprogress\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/circularprogress\")}\n            title=\"Overview\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n                \"/projects/sistent/components/circularprogress/guidance\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/circularprogress/guidance\")\n            }\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/circularprogress/code\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/circularprogress/code\")}\n            title=\"Code\"\n          />\n        </div>\n        <div className=\"main-content\">\n          <p>\n            Circular Progress indicators inform users about the status of ongoing processes,\n            such as loading an application, submitting a form, or updating data. They help\n            maintain user engagement by providing visual feedback about the progress of operations.\n          </p>\n          <a id=\"Usage\">\n            <h2>Usage</h2>\n          </a>\n          <p>\n            The component can be used in two main variants:\n          </p>\n          <ul>\n            <li><p><b>Determinate:</b> Shows definite progress with a specific percentage value</p></li>\n            <li><p><b>Indeterminate:</b> Shows an animation indicating an unspecified wait time</p></li>\n          </ul>\n          <a id=\"Basic Example\">\n            <h3>Basic Example</h3>\n          </a>\n          <p>\n            Below is a simple example of how to use the CircularProgress component.\n          </p>\n          <br />\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <CircularProgress />\n            </SistentThemeProvider>\n          </Row>\n          <br />\n          <a id=\"Key Features\">\n            <h2>Key Features</h2>\n          </a>\n          <p>\n            You can customize the appearance of the Circular Progress using\n            various props to define how the component\n            renders relative to its container element.\n          </p>\n          <h3>Variants</h3>\n          <ul>\n            <li><p><b>Determinate:</b> Displays specific progress percentage</p></li>\n            <li><p><b>Indeterminate:</b> Shows continuous animation for unknown duration processes</p></li>\n          </ul>\n          <h3>Customization Options</h3>\n          <ul>\n            <li><p><b>Size:</b> Adjustable diameter of the progress circle</p></li>\n            <li><p><b>Thickness:</b> Controllable width of the progress arc</p></li>\n            <li><p><b>Color:</b> Customizable colors for both track and progress</p></li>\n            <li><p><b>Value:</b> Percentage complete (0-100) for determinate variant</p></li>\n          </ul>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default SistentCircularprogress;","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\nconst JoinCommunityWrapper = styled.div`\n  width: 18rem;\n\n  @media screen and (max-width: 750px) {\n    display: none;\n  }\n\n  @media screen and (min-width: 751px) and (max-width: 1279px) {\n    display: none;\n  }\n  .intra-page {\n    position: sticky;\n    top: 10rem;\n    right: 0rem;\n    margin-right: 1rem;\n    padding-bottom: 5rem;\n    padding-right: 2rem;\n    align-items: left;\n    justify-content: space-around;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .list {\n      color: #000000;\n    }\n    .active {\n      font-weight: 5000;\n      color: #000000;\n    }\n\n    ul {\n      list-style: none;\n      top: 3rem;\n      li {\n        padding-bottom: 0.5rem;\n        padding-top: 0.5rem;\n      }\n    }\n    @media only screen and (min-width: 1280px) and (max-width: 1350px) {\n      padding-right: 0rem;\n      margin-right: 0rem;\n    }\n    @media only screen and (max-width: 950px) {\n      width: 0;\n      opacity: 0;\n      height: 0;\n      transition: none;\n      visibility: hidden;\n    }\n  }\n\n  .learn {\n    width: 10rem;\n  }\n`;\n\nfunction IntraPage() {\n  const [contents, setContents] = useState([]);\n\n  useEffect(() => {\n    const anchors = document.querySelectorAll(\".main-content > a\");\n    console.log(anchors);\n    if (anchors) {\n      setContents(\n        Array.from(anchors).map((a) => ({\n          id: a.id,\n          link: `#${a.id}`,\n          text: a.id,\n        }))\n      );\n    }\n  }, []);\n\n  const [intapath, setIntapath] = useState(null);\n  useEffect(() => {\n    const path = window.location.pathname;\n    setIntapath(path);\n  }, []);\n\n  return (\n    <JoinCommunityWrapper>\n      <div className=\"intra-page\">\n        <ul>\n          {contents.map((x) => (\n            <li key={x.id} className=\"list\">\n              <Link\n                to={`${intapath}${x.link}`}\n                key={x.id}\n                activeClassName=\"active\"\n              >\n                {x.text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </JoinCommunityWrapper>\n  );\n}\n\nexport default IntraPage;\n","import React from \"react\";\nimport SistentWrapper from \"./sistent.style\";\nimport TOC from \"../../../components/SistentNavigation\";\nimport { Container } from \"../../../reusecore/Layout\";\nimport SistentPagination from \"../../../components/SistentNavigation/pagination\";\nimport IntraPage from \"../../../components/SistentNavigation/intra-page\";\n\nexport const SistentLayout = ({ title, children }) => {\n  return (\n    <SistentWrapper>\n      <div className=\"page-header-section\">\n        <h1>{title}</h1>\n      </div>\n      <TOC />\n      <div className=\"page-section\">\n        <Container>\n          {children} <SistentPagination />\n        </Container>\n        <IntraPage />\n      </div>\n    </SistentWrapper>\n  );\n};\n"],"names":["SistentCircularprogress","location","useLocation","isDark","useStyledDarkMode","React","SistentLayout","title","className","id","TabButton","pathname","onClick","navigate","Row","$Hcenter","SistentThemeProvider","initialMode","CircularProgress","JoinCommunityWrapper","styled","div","withConfig","displayName","componentId","contents","setContents","useState","useEffect","anchors","document","querySelectorAll","console","log","Array","from","map","a","link","text","intapath","setIntapath","path","window","x","key","Link","to","activeClassName","_ref","children","SistentWrapper","TOC","Container","SistentPagination","IntraPage"],"sourceRoot":""}