{"version":3,"file":"component---src-sections-projects-sistent-components-dialog-guidance-js-0d1db1a8415991193608.js","mappings":"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","sources":["webpack://Layer5/./src/components/SistentNavigation/intra-page.js","webpack://Layer5/./src/sections/Projects/Sistent/sistent-layout.js","webpack://Layer5/./src/sections/Projects/Sistent/components/dialog/guidance.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\nconst JoinCommunityWrapper = styled.div`\n  width: 18rem;\n\n  @media screen and (max-width: 750px) {\n    display: none;\n  }\n\n  @media screen and (min-width: 751px) and (max-width: 1279px) {\n    display: none;\n  }\n  .intra-page {\n    position: sticky;\n    top: 10rem;\n    right: 0rem;\n    margin-right: 1rem;\n    padding-bottom: 5rem;\n    padding-right: 2rem;\n    align-items: left;\n    justify-content: space-around;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .list {\n      color: #000000;\n    }\n    .active {\n      font-weight: 5000;\n      color: #000000;\n    }\n\n    ul {\n      list-style: none;\n      top: 3rem;\n      li {\n        padding-bottom: 0.5rem;\n        padding-top: 0.5rem;\n      }\n    }\n    @media only screen and (min-width: 1280px) and (max-width: 1350px) {\n      padding-right: 0rem;\n      margin-right: 0rem;\n    }\n    @media only screen and (max-width: 950px) {\n      width: 0;\n      opacity: 0;\n      height: 0;\n      transition: none;\n      visibility: hidden;\n    }\n  }\n\n  .learn {\n    width: 10rem;\n  }\n`;\n\nfunction IntraPage() {\n  const [contents, setContents] = useState([]);\n\n  useEffect(() => {\n    const anchors = document.querySelectorAll(\".main-content > a\");\n    console.log(anchors);\n    if (anchors) {\n      setContents(\n        Array.from(anchors).map((a) => ({\n          id: a.id,\n          link: `#${a.id}`,\n          text: a.id,\n        }))\n      );\n    }\n  }, []);\n\n  const [intapath, setIntapath] = useState(null);\n  useEffect(() => {\n    const path = window.location.pathname;\n    setIntapath(path);\n  }, []);\n\n  return (\n    <JoinCommunityWrapper>\n      <div className=\"intra-page\">\n        <ul>\n          {contents.map((x) => (\n            <li key={x.id} className=\"list\">\n              <Link\n                to={`${intapath}${x.link}`}\n                key={x.id}\n                activeClassName=\"active\"\n              >\n                {x.text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </JoinCommunityWrapper>\n  );\n}\n\nexport default IntraPage;\n","import React from \"react\";\nimport SistentWrapper from \"./sistent.style\";\nimport TOC from \"../../../components/SistentNavigation\";\nimport { Container } from \"../../../reusecore/Layout\";\nimport SistentPagination from \"../../../components/SistentNavigation/pagination\";\nimport IntraPage from \"../../../components/SistentNavigation/intra-page\";\n\nexport const SistentLayout = ({ title, children }) => {\n  return (\n    <SistentWrapper>\n      <div className=\"page-header-section\">\n        <h1>{title}</h1>\n      </div>\n      <TOC />\n      <div className=\"page-section\">\n        <Container>\n          {children} <SistentPagination />\n        </Container>\n        <IntraPage />\n      </div>\n    </SistentWrapper>\n  );\n};\n","import React, { useState } from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\nimport { SistentLayout } from \"../../sistent-layout\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  SistentThemeProvider,\n  Input\n} from \"@sistent/sistent\";\nimport { Row } from \"../../../../../reusecore/Layout\";\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\n\nconst DialogGuidance = () => {\n  const { isDark } = useStyledDarkMode();\n  const location = useLocation();\n\n  const [openBasic, setOpenBasic] = useState(false);\n  const [openForm, setOpenForm] = useState(false);\n  const [openFullScreen, setOpenFullScreen] = useState(false);\n\n  return (\n    <SistentLayout title=\"Dialog\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>Dialog</h2>\n        </a>\n        <p>\n          The Dialog component is a modal window that appears on top of the main content to focus\n          user attention on specific tasks or information. It provides a controlled way to present\n          confirmations, forms, alerts, and detailed content without navigating away from the\n          current context.\n        </p>\n        <div className=\"filterBtns\">\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/dialog\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/dialog\")}\n            title=\"Overview\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n                \"/projects/sistent/components/dialog/guidance\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/dialog/guidance\")\n            }\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/dialog/code\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/dialog/code\")}\n            title=\"Code\"\n          />\n        </div>\n        <div className=\"main-content\">\n          <p>\n            Proper usage of the Dialog component can enhance user experience by providing clear,\n            focused interactions that guide users through important decisions and tasks. Below are\n            guidelines and interactive examples to help you implement dialogs effectively.\n          </p>\n\n          <a id=\"Usage\">\n            <h2>Usage</h2>\n          </a>\n          <p>\n            To use the Dialog component, include it with the required props and structure. The component\n            supports various configurations and styling options:\n          </p>\n          <ul>\n            <li><code>open</code> to control visibility state</li>\n            <li><code>onClose</code> for handling dialog closure</li>\n            <li><code>fullScreen</code> for expanded display</li>\n            <li><code>maxWidth</code> for size constraints</li>\n          </ul>\n          <br />\n\n          <a id=\"Basic Dialog\">\n            <h3>Basic Dialog</h3>\n          </a>\n          <p>\n            A simple confirmation dialog with title, content, and action buttons. This pattern\n            is ideal for user confirmations and simple decision-making scenarios:\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <Button variant=\"contained\" onClick={() => setOpenBasic(true)}>Open Basic Dialog</Button>\n              <Dialog open={openBasic} onClose={() => setOpenBasic(false)}>\n                <DialogTitle>Confirm Action</DialogTitle>\n                <DialogContent>\n                  Do you want to proceed with this action?\n                </DialogContent>\n                <DialogActions>\n                  <Button variant=\"contained\" onClick={() => setOpenBasic(false)}>Cancel</Button>\n                  <Button variant=\"contained\" color=\"primary\" onClick={() => setOpenBasic(false)}>\n                    Confirm\n                  </Button>\n                </DialogActions>\n              </Dialog>\n            </SistentThemeProvider>\n          </Row>\n\n          <br />\n          <a id=\"Form Dialog\">\n            <h3>Dialog with Form</h3>\n          </a>\n          <p>\n            Dialogs can contain forms for collecting user input without requiring navigation\n            to a separate page. This pattern works well for quick data collection:\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <Button variant=\"contained\" onClick={() => setOpenForm(true)}>Open Form Dialog</Button>\n              <Dialog open={openForm} onClose={() => setOpenForm(false)}>\n                <DialogTitle>Subscribe</DialogTitle>\n                <DialogContent>\n                  <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\", minWidth: \"300px\" }}>\n                    <Input\n                      label=\"Email Address\"\n                      type=\"email\"\n                      placeholder=\"you@example.com\"\n                      required\n                    />\n                    <Input\n                      label=\"Name\"\n                      type=\"text\"\n                      placeholder=\"John Doe\"\n                      required\n                    />\n                  </div>\n                </DialogContent>\n                <DialogActions>\n                  <Button variant=\"contained\" onClick={() => setOpenForm(false)}>Cancel</Button>\n                  <Button variant=\"contained\" color=\"primary\" onClick={() => setOpenForm(false)}>\n                    Subscribe\n                  </Button>\n                </DialogActions>\n              </Dialog>\n            </SistentThemeProvider>\n          </Row>\n\n          <br />\n          <a id=\"Full Screen Dialog\">\n            <h3>Full-Screen Dialog</h3>\n          </a>\n          <p>\n            Full-screen dialogs provide maximum space for complex content or forms. They're\n            particularly useful on mobile devices or when extensive user input is required:\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <Button variant=\"contained\" onClick={() => setOpenFullScreen(true)}>Open Full-Screen Dialog</Button>\n              <Dialog\n                open={openFullScreen}\n                onClose={() => setOpenFullScreen(false)}\n                fullScreen\n                maxWidth=\"lg\"\n              >\n                <DialogTitle>Full-Screen Dialog</DialogTitle>\n                <DialogContent>\n                  <p>\n                    This dialog stretches to full screen. Use it when the user's\n                    full attention is needed for complex tasks or on mobile devices.\n                  </p>\n                </DialogContent>\n                <DialogActions style={{ justifyContent: \"flex-start\", paddingLeft: \"24px\" }}>\n                  <Button variant=\"contained\" onClick={() => setOpenFullScreen(false)}>Cancel</Button>\n                  <Button variant=\"contained\" color=\"secondary\" onClick={() => setOpenFullScreen(false)}>Delete</Button>\n                </DialogActions>\n              </Dialog>\n            </SistentThemeProvider>\n          </Row>\n\n          <a id=\"Best Practices\">\n            <h2>Best Practices</h2>\n          </a>\n          <br/>\n          <h3>When to Use Dialogs</h3>\n          <p>\n            Use dialogs for critical user decisions, confirmations, and tasks that require\n            immediate attention. Avoid overusing dialogs as they can interrupt workflow and\n            frustrate users if used inappropriately.\n          </p>\n\n          <h3>Content Guidelines</h3>\n          <p>\n            Keep dialog content focused and concise. Use clear, action-oriented language\n            for buttons and provide sufficient context without overwhelming the user.\n          </p>\n\n          <h3>Accessibility</h3>\n          <p>\n            Ensure proper focus management, keyboard navigation, and screen reader support.\n            Always provide clear titles and meaningful action button labels.\n          </p>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default DialogGuidance;"],"names":["JoinCommunityWrapper","styled","div","withConfig","displayName","componentId","contents","setContents","useState","useEffect","anchors","document","querySelectorAll","console","log","Array","from","map","a","id","link","text","intapath","setIntapath","path","window","location","pathname","React","className","x","key","Link","to","activeClassName","SistentLayout","_ref","title","children","SistentWrapper","TOC","Container","SistentPagination","IntraPage","DialogGuidance","isDark","useStyledDarkMode","useLocation","openBasic","setOpenBasic","openForm","setOpenForm","openFullScreen","setOpenFullScreen","TabButton","onClick","navigate","Row","$Hcenter","SistentThemeProvider","initialMode","Button","variant","Dialog","open","onClose","DialogTitle","DialogContent","DialogActions","color","style","display","flexDirection","gap","minWidth","Input","label","type","placeholder","required","fullScreen","maxWidth","justifyContent","paddingLeft"],"sourceRoot":""}