"use strict";(self.webpackChunkLayer5=self.webpackChunkLayer5||[]).push([[622],{71536:function(e,t,n){n.r(t);var l=n(96540),o=n(64810),a=n(86462),i=n(66054),r=n(48995),s=n(9184),c=n(96044),u=n(92121);t.default=()=>{const e=(0,a.useLocation)(),{isDark:t}=(0,u.G)();return l.createElement(s.p,{title:"ToggleButton"},l.createElement("div",{className:"content"},l.createElement("a",{id:"Identity"},l.createElement("h2",null,"ToggleButton")),l.createElement("p",null,"The `ToggleButton` and `ToggleButtonGroup` are versatile components that can be used for a wide range of applications. Their intuitive design ensures users can make selections easily and confidently. Whether it's enabling a setting, selecting a mode, or choosing multiple options, these components are built to enhance user experience across different scenarios."),l.createElement("div",{className:"filterBtns"},l.createElement(c.default,{className:"/projects/sistent/components/toggle-button"===e.pathname?"active":"",onClick:()=>(0,o.navigate)("/projects/sistent/components/toggle-button"),title:"Overview"}),l.createElement(c.default,{className:"/projects/sistent/components/toggle-button/guidance"===e.pathname?"active":"",onClick:()=>(0,o.navigate)("/projects/sistent/components/toggle-button/guidance"),title:"Guidance"}),l.createElement(c.default,{className:"/projects/sistent/components/toggle-button/code"===e.pathname?"active":"",onClick:()=>(0,o.navigate)("/projects/sistent/components/toggle-button/code"),title:"Code"})),l.createElement("div",{className:"main-content"},l.createElement("a",{id:"Functionality"},l.createElement("h2",null,"Functionality")),l.createElement("p",null,"The `ToggleButton` and `ToggleButtonGroup` components provide an efficient way to handle user interactions for toggling states or selecting one or multiple options. Below are some common use cases."),l.createElement("h3",null,"Exclusive Selection"),l.createElement("p",null,"Use an exclusive `ToggleButtonGroup` when only one selection is allowed at a time. This is useful for scenarios like aligning text to the left, center, or right."),l.createElement(i.fI,{$Hcenter:!0,className:"image-container"},l.createElement(r.SistentThemeProvider,{initialMode:t?"dark":"light"},l.createElement(r.ToggleButtonGroup,{value:"left",exclusive:!0},l.createElement(r.ToggleButton,{value:"left"},"Left"),l.createElement(r.ToggleButton,{value:"center"},"Center"),l.createElement(r.ToggleButton,{value:"right"},"Right")))),l.createElement("h3",null,"Multiple Selection"),l.createElement("p",null,"Enable multiple selections within a `ToggleButtonGroup` for cases where users need to toggle multiple options, such as enabling bold, italic, and underline text styling simultaneously."),l.createElement(i.fI,{$Hcenter:!0,className:"image-container"},l.createElement(r.SistentThemeProvider,{initialMode:t?"dark":"light"},l.createElement(r.ToggleButtonGroup,{value:["bold","italic"]},l.createElement(r.ToggleButton,{value:"bold"},"Toggle Button 1"),l.createElement(r.ToggleButton,{value:"italic"},"Toggle Button 2"),l.createElement(r.ToggleButton,{value:"underline"},"Toggle Button 3")))),l.createElement("h3",null,"Sizes"),l.createElement("p",null,"Adjust the size of the `ToggleButton` using the `size` prop. This property supports `small`, `medium`, and `large` values to suit various design requirements."),l.createElement("div",{className:"showcase"},l.createElement("div",{className:"items"},l.createElement(r.SistentThemeProvider,{initialMode:t?"dark":"light"},l.createElement("div",{style:{display:"flex",flexDirection:"column",gap:"1rem",alignItems:"center"}},l.createElement(r.ToggleButtonGroup,{value:"option1",exclusive:!0,size:"small",style:{width:"70%"}},l.createElement(r.ToggleButton,{value:"option1"},"Small"),l.createElement(r.ToggleButton,{value:"option2"},"Small")),l.createElement(r.ToggleButtonGroup,{value:"option1",exclusive:!0,size:"medium"},l.createElement(r.ToggleButton,{value:"option1"},"Medium"),l.createElement(r.ToggleButton,{value:"option2"},"Medium")),l.createElement(r.ToggleButtonGroup,{value:"option1",exclusive:!0,size:"large",style:{width:"120%"}},l.createElement(r.ToggleButton,{style:{width:"50%"},value:"option1"},"Large"),l.createElement(r.ToggleButton,{style:{width:"50%"},value:"option2"},"Large")))))),l.createElement("h3",null,"Colors"),l.createElement("p",null,"Use the `color` prop to style the `ToggleButtonGroup` with pre-defined theme colors, such as `primary` or `secondary`. This ensures consistency across the application."),l.createElement(i.fI,{$Hcenter:!0,className:"image-container"},l.createElement(r.SistentThemeProvider,{initialMode:t?"dark":"light"},l.createElement(r.ToggleButtonGroup,{value:"primary",exclusive:!0,color:"primary"},l.createElement(r.ToggleButton,{value:"primary"},"Primary"),l.createElement(r.ToggleButton,{value:"secondary"},"Secondary")))),l.createElement("h3",null,"Vertical Orientation"),l.createElement("p",null,"The `orientation` prop allows you to arrange toggle buttons vertically instead of horizontally. This is ideal for menus or options requiring more vertical space."),l.createElement(i.fI,{$Hcenter:!0,className:"image-container"},l.createElement(r.SistentThemeProvider,{initialMode:t?"dark":"light"},l.createElement(r.ToggleButtonGroup,{orientation:"vertical",value:"option1",exclusive:!0},l.createElement(r.ToggleButton,{value:"option1"},"Vertical 1"),l.createElement(r.ToggleButton,{value:"option2"},"Vertical 2"),l.createElement(r.ToggleButton,{value:"option3"},"Vertical 3")))))))}}}]);
//# sourceMappingURL=component---src-sections-projects-sistent-components-toggle-button-guidance-js-755422cfad7776615866.js.map