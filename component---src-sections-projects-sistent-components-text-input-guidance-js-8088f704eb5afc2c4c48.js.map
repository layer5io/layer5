{"version":3,"file":"component---src-sections-projects-sistent-components-text-input-guidance-js-8088f704eb5afc2c4c48.js","mappings":"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","sources":["webpack://Layer5/./src/components/SistentNavigation/intra-page.js","webpack://Layer5/./src/sections/Projects/Sistent/sistent-layout.js","webpack://Layer5/./src/sections/Projects/Sistent/components/text-input/guidance.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from \"styled-components\";\n\nconst JoinCommunityWrapper = styled.div`\n  width: 18rem;\n\n  @media screen and (max-width: 750px) {\n    display: none;\n  }\n\n  @media screen and (min-width: 751px) and (max-width: 1279px) {\n    display: none;\n  }\n  .intra-page {\n    position: sticky;\n    top: 10rem;\n    right: 0rem;\n    margin-right: 1rem;\n    padding-bottom: 5rem;\n    padding-right: 2rem;\n    align-items: left;\n    justify-content: space-around;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n\n    .list {\n      color: #000000;\n    }\n    .active {\n      font-weight: 5000;\n      color: #000000;\n    }\n\n    ul {\n      list-style: none;\n      top: 3rem;\n      li {\n        padding-bottom: 0.5rem;\n        padding-top: 0.5rem;\n      }\n    }\n    @media only screen and (min-width: 1280px) and (max-width: 1350px) {\n      padding-right: 0rem;\n      margin-right: 0rem;\n    }\n    @media only screen and (max-width: 950px) {\n      width: 0;\n      opacity: 0;\n      height: 0;\n      transition: none;\n      visibility: hidden;\n    }\n  }\n\n  .learn {\n    width: 10rem;\n  }\n`;\n\nfunction IntraPage() {\n  const [contents, setContents] = useState([]);\n\n  useEffect(() => {\n    const anchors = document.querySelectorAll(\".main-content > a\");\n    console.log(anchors);\n    if (anchors) {\n      setContents(\n        Array.from(anchors).map((a) => ({\n          id: a.id,\n          link: `#${a.id}`,\n          text: a.id,\n        }))\n      );\n    }\n  }, []);\n\n  const [intapath, setIntapath] = useState(null);\n  useEffect(() => {\n    const path = window.location.pathname;\n    setIntapath(path);\n  }, []);\n\n  return (\n    <JoinCommunityWrapper>\n      <div className=\"intra-page\">\n        <ul>\n          {contents.map((x) => (\n            <li key={x.id} className=\"list\">\n              <Link\n                to={`${intapath}${x.link}`}\n                key={x.id}\n                activeClassName=\"active\"\n              >\n                {x.text}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </JoinCommunityWrapper>\n  );\n}\n\nexport default IntraPage;\n","import React from \"react\";\nimport SistentWrapper from \"./sistent.style\";\nimport TOC from \"../../../components/SistentNavigation\";\nimport { Container } from \"../../../reusecore/Layout\";\nimport SistentPagination from \"../../../components/SistentNavigation/pagination\";\nimport IntraPage from \"../../../components/SistentNavigation/intra-page\";\n\nexport const SistentLayout = ({ title, children }) => {\n  return (\n    <SistentWrapper>\n      <div className=\"page-header-section\">\n        <h1>{title}</h1>\n      </div>\n      <TOC />\n      <div className=\"page-section\">\n        <Container>\n          {children} <SistentPagination />\n        </Container>\n        <IntraPage />\n      </div>\n    </SistentWrapper>\n  );\n};\n","import React, { useState } from \"react\";\nimport { navigate } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\nimport { SistentLayout } from \"../../sistent-layout\";\nimport { SistentThemeProvider, Input } from \"@sistent/sistent\";\nimport { Row } from \"../../../../../reusecore/Layout\";\nimport TabButton from \"../../../../../reusecore/Button\";\nimport { useStyledDarkMode } from \"../../../../../theme/app/useStyledDarkMode\";\n\nconst TextInputGuidance = () => {\n  const { isDark } = useStyledDarkMode();\n  const location = useLocation();\n\n  const [currentColor, setCurrentColor] = useState(\"primary\");\n  const [currentType, setCurrentType] = useState(\"text\");\n\n  const colors = [\"primary\", \"secondary\", \"success\", \"error\", \"warning\", \"info\"];\n  const types = [\"text\", \"email\", \"password\", \"number\", \"tel\", \"url\", \"search\"];\n\n  const getPlaceholderText = () => {\n    switch (currentType) {\n      case \"email\": return \"example@domain.com\";\n      case \"password\": return \"Enter password\";\n      case \"number\": return \"123\";\n      case \"tel\": return \"+1 (555) 123-4567\";\n      case \"url\": return \"https://example.com\";\n      case \"search\": return \"Search...\";\n      default: return \"Enter text\";\n    }\n  };\n\n  return (\n    <SistentLayout title=\"Text Input\">\n      <div className=\"content\">\n        <a id=\"Identity\">\n          <h2>Text Input</h2>\n        </a>\n        <p>\n          The Input component is a versatile form control that enables users to enter and edit text data.\n          It supports various input types, validation states, and customization options to create\n          accessible and user-friendly data collection experiences.\n        </p>\n        <div className=\"filterBtns\">\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/text-input\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/text-input\")}\n            title=\"Overview\"\n          />\n          <TabButton\n            className={\n              location.pathname ===\n                \"/projects/sistent/components/text-input/guidance\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() =>\n              navigate(\"/projects/sistent/components/text-input/guidance\")\n            }\n            title=\"Guidance\"\n          />\n          <TabButton\n            className={\n              location.pathname === \"/projects/sistent/components/text-input/code\"\n                ? \"active\"\n                : \"\"\n            }\n            onClick={() => navigate(\"/projects/sistent/components/text-input/code\")}\n            title=\"Code\"\n          />\n        </div>\n        <div className=\"main-content\">\n          <p>\n            Proper usage of the Input component can enhance user experience by providing clear,\n            accessible, and visually consistent form controls. Below are guidelines and interactive\n            examples to help you implement inputs effectively.\n          </p>\n\n          <a id=\"Usage\">\n            <h2>Usage</h2>\n          </a>\n          <p>\n            To use the Input component, include it in your form with the desired props. The component\n            supports various input types and styling options:\n          </p>\n          <ul>\n            <li><code>type</code> for input behavior (text, email, password, etc.)</li>\n            <li><code>color</code> for theme colors</li>\n            <li><code>multiline</code> for text areas</li>\n            <li><code>disabled</code>, <code>error</code>, <code>required</code> for different states</li>\n          </ul>\n          <br />\n\n          <a id=\"Colors\">\n            <h3>Colors</h3>\n          </a>\n          <p>\n            Customize the color theme of the input component. Colors can convey different meanings\n            or states within your interface:\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <Input\n                color={currentColor}\n                placeholder={`${currentColor.charAt(0).toUpperCase() + currentColor.slice(1)} input`}\n                label={`${currentColor.charAt(0).toUpperCase() + currentColor.slice(1)} Color`}\n              />\n            </SistentThemeProvider>\n          </Row>\n          <div style={{ marginTop: \"15px\", display: \"flex\", gap: \"10px\", flexWrap: \"wrap\", justifyContent: \"center\" }}>\n            {colors.map((color) => (\n              <TabButton\n                key={color}\n                className={currentColor === color ? \"active\" : \"\"}\n                onClick={() => setCurrentColor(color)}\n                title={color.charAt(0).toUpperCase() + color.slice(1)}\n              />\n            ))}\n          </div>\n\n          <br />\n          <a id=\"Input Types\">\n            <h3>Input Types</h3>\n          </a>\n          <p>\n            Different input types provide specialized behavior and validation for different\n            data formats. The placeholder text automatically updates to match the selected type:\n          </p>\n          <Row $Hcenter className=\"image-container\">\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <Input\n                type={currentType}\n                placeholder={getPlaceholderText()}\n                label={`${currentType.charAt(0).toUpperCase() + currentType.slice(1)} Input`}\n              />\n            </SistentThemeProvider>\n          </Row>\n          <div style={{ marginTop: \"15px\", display: \"flex\", gap: \"10px\", flexWrap: \"wrap\", justifyContent: \"center\" }}>\n            {types.map((type) => (\n              <TabButton\n                key={type}\n                className={currentType === type ? \"active\" : \"\"}\n                onClick={() => setCurrentType(type)}\n                title={type.charAt(0).toUpperCase() + type.slice(1)}\n              />\n            ))}\n          </div>\n\n          <br />\n          <a id=\"States\">\n            <h3>Input States</h3>\n          </a>\n          <p>\n            Input components support various states to provide feedback and control user interaction.\n            These examples demonstrate different state combinations:\n          </p>\n          <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"20px\", alignItems: \"center\" }}>\n            <SistentThemeProvider initialMode={isDark ? \"dark\" : \"light\"}>\n              <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"16px\", alignItems: \"center\", width: \"100%\" }}>\n                <Input\n                  placeholder=\"Normal state\"\n                  label=\"Normal Input\"\n                />\n                <Input\n                  placeholder=\"This field is required\"\n                  label=\"Required Input *\"\n                  required\n                />\n                <Input\n                  placeholder=\"This input has an error\"\n                  label=\"Error Input\"\n                  error\n                  helperText=\"This field has an error\"\n                />\n                <Input\n                  value=\"This field is disabled\"\n                  label=\"Disabled Input\"\n                  disabled\n                />\n                <Input\n                  placeholder=\"Multi-line text area...\"\n                  label=\"Multiline Input\"\n                  multiline\n                  rows={3}\n                />\n              </div>\n            </SistentThemeProvider>\n          </div>\n\n          <a id=\"Best Practices\">\n            <h2>Best Practices</h2>\n          </a>\n          <h3>Accessibility</h3>\n          <p>\n            Always provide clear labels for screen readers and ensure sufficient color contrast.\n            Use helper text to provide additional context and validation feedback.\n          </p>\n\n          <h3>Validation</h3>\n          <p>\n            Implement real-time validation when appropriate, but avoid being overly aggressive.\n            Provide clear error messages that help users understand how to fix issues.\n          </p>\n\n          <h3>Placeholder Text</h3>\n          <p>\n            Use placeholder text to show examples of expected input format, but don't rely on it\n            as the primary way to communicate requirements. Always include proper labels.\n          </p>\n        </div>\n      </div>\n    </SistentLayout>\n  );\n};\n\nexport default TextInputGuidance;\n"],"names":["JoinCommunityWrapper","styled","div","withConfig","displayName","componentId","contents","setContents","useState","useEffect","anchors","document","querySelectorAll","console","log","Array","from","map","a","id","link","text","intapath","setIntapath","path","window","location","pathname","React","className","x","key","Link","to","activeClassName","SistentLayout","_ref","title","children","SistentWrapper","TOC","Container","SistentPagination","IntraPage","TextInputGuidance","isDark","useStyledDarkMode","useLocation","currentColor","setCurrentColor","currentType","setCurrentType","TabButton","onClick","navigate","Row","$Hcenter","SistentThemeProvider","initialMode","Input","color","placeholder","charAt","toUpperCase","slice","label","style","marginTop","display","gap","flexWrap","justifyContent","type","getPlaceholderText","flexDirection","alignItems","width","required","error","helperText","value","disabled","multiline","rows"],"sourceRoot":""}