{"componentChunkName":"component---src-templates-learn-chapter-js","path":"/learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/linkerd/deploy-an-application.html","result":{"data":{"chapter":{"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"docType\": \"Chapter\",\n  \"chapterTitle\": \"Deploy a sample application\",\n  \"description\": \"Meshery, collaborative Kubernetes manager\",\n  \"videos\": 4,\n  \"lectures\": 12,\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ChapterStyle, {\n    mdxType: \"ChapterStyle\"\n  }, mdx(\"p\", null, \"To play with Linkerd and demonstrate some of it's capabilities, you will deploy the sample application, EmojiVoto.\"), mdx(\"h2\", {\n    className: \"chapter-sub-heading\"\n  }, \"What is the EmojiVoto Application \"), mdx(\"br\", null), mdx(\"p\", null, \"Emojivoto is a sample microservice application that allows users to vote for their favorite emoji.\\nIt displays votes received on a leaderboard. Emojivoto has no dependencies on Linkerd, but will run\\nfine either on or off the service mesh.\"), mdx(\"p\", null, \"A sidecar injector is used for automating the injection of the Linkerd proxy into your application's pod spec. The Kubernetes admission controller enforces this behavior send\\nsending a webhook request the the sidecar injector every time a pod is to be scheduled. This injector inspects resources for a Linkerd-specific annotation (linkerd.io/inject: enabled).\\nWhen that annotation exists, the injector mutates the pod's specification and adds both an init container as well as a sidecar containing the proxy itself.\"), mdx(\"p\", null, \"The Linkerd sidecar proxy can be either manually or automatically injected into your application's pods. This can be done from the meshery dashboard for namespace globally by,\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Using Meshery, navigate to the Linkerd management page.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Click the (+) icon on the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Configure Application\"), \" card and select \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Annotate Namespace\"), \" from the list.\")), mdx(\"p\", null, \"As part of Linkerd deployment in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./getting-started\"\n  }, \"Previous chapter\"), \", you have deployed the sidecar injector.\\nTo verify, execute this command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"kubectl get deployment linkerd-proxy-injector -n linkerd\\n\")), mdx(\"p\", null, \"Output:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"NAME                     READY   UP-TO-DATE   AVAILABLE   AGE\\nlinkerd-proxy-injector   1/1     1            1           9m49s\\n\")), mdx(\"p\", null, \"Examine the annotation added to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"linkerd\"), \" namespace:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"kubectl describe namespace linkerd\\n\")), mdx(\"p\", null, \"Output:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"Name:         linkerd\\nLabels:       config.linkerd.io/admission-webhooks=disabled\\n              linkerd.io/control-plane-ns=linkerd\\n              linkerd.io/is-control-plane=true\\nAnnotations:  linkerd.io/inject: disabled\\nStatus:       Active\\n\\nNo resource quota.\\n\\nNo LimitRange resource.\\n\")), mdx(\"h3\", {\n    className: \"chapter-sub-heading\"\n  }, \" Deploy the application\"), mdx(\"p\", null, \"Using Meshery, navigate to the Linkerd management page.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Enter \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"default\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Namespace\"), \" field.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Click the (+) icon on the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Sample Application\"), \" card and select \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Emojivoto Application\"), \" from the list.\")), mdx(\"p\", null, \"This will do 3 things:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Label the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"emojivoto\"), \" namespace for sidecar injection.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Deploys all the Emojivoto services and replica's in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"emojivoto\"), \" namespace.\")), mdx(\"br\", null), mdx(\"h3\", null, \"Alternative: Manual installation \"), \"Follow this if the above steps did not work for you\", mdx(\"br\", null), mdx(\"br\", null), mdx(\"h4\", {\n    className: \"chapter-alt-heading\"\n  }, \" Deploy emojivoto application\"), mdx(\"p\", null, \"Install emojivoto into the emojivoto namespace by running:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"curl -sL https://run.linkerd.io/emojivoto.yml \\\\\\n  | kubectl apply -f -\\n\")), mdx(\"p\", null, \"Before we mesh it, let's take a look at the app.\\nIf you're using Docker Desktop at this point you can visit http://localhost directly.\\nIf you're not using Docker Desktop, we'll need to forward the web-svc service.\\nTo forward web-svc locally to port 8080, you can run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"kubectl -n emojivoto port-forward svc/web-svc 8080:80\\n\")), mdx(\"h3\", {\n    className: \"chapter-sub-heading\"\n  }, mdx(\"a\", {\n    name: \"verify\"\n  }), \" Verify EmojiVoto deployment\", \" \"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Verify that the deployments are all in a state of AVAILABLE before continuing.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"watch kubectl get deployment -n emojivoto\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Inspect the details of the pods\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Examine details of the pods:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"watch kubectl get po -n emojivoto\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Examine details of the services:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"watch kubectl get svc -n emojivoto\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Choose one of EmojiVoto's services (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"web-svc\"), \"), and view it's sidecar configuration:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"kubectl get svc -n emojivoto\\n\\nkubectl describe service svc/web-svc -n emojivoto\\n\")))), mdx(\"p\", null, \"Let's look at the application deployment by port-forwarding the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"web-svc\"), \" service:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"kubectl port-forward svc/web-svc 8080:80  -n emojivoto\\n\")), mdx(\"p\", null, \"You have onboarded emojivoto to the service mesh. Verify your data plane environment with this check:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"linkerd -n emojivoto check --proxy\\n\")), mdx(\"p\", null, \"Linkerd, in contrast to Istio annotates the resources (namespaces, deployment workloads) rather than labelling them.\"), mdx(\"h3\", null, \"Deploy EmojiVoto \"), mdx(\"p\", null, \"Applying this yaml file included in the Linkerd package you collected in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://run.linkerd.io/emojivoto.yml\"\n  }, \"https://run.linkerd.io/emojivoto.yml\"), \"\\nwill deploy the sample app into your cluster.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"kubectl apply -f https://run.linkerd.io/emojivoto.yml\\n\")), mdx(\"h4\", {\n    className: \"chapter-alt-heading\"\n  }, \"Inject Linkerd proxy into the sample application\"), mdx(\"p\", null, \"The emojivoto application is a standalone Kubernetes application that uses a mix of gRPC and\\nHTTP calls to allow the users to vote on their favorite emojis, which means the\\napplication can run standalone without support from linkerd service mesh. Now we will\\nbe injecting linkerd into our sample application\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"kubectl get -n emojivoto deploy -o yaml \\\\\\n | linkerd inject - \\\\\\n | kubectl apply -f -\\n\")), mdx(\"p\", null, \"Or...\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"kubectl -n emojivoto patch -f https://run.linkerd.io/emojivoto.yml -p '\\nspec:\\n  template:\\n    metadata:\\n      annotations:\\n        linkerd.io/inject: enabled\\n'\\n\")), mdx(\"p\", null, \"Either of these commands retrieve all of the deployments running in the emojivoto namespace, runs the manifest\\nthrough linkerd inject, and then reapplies it to the cluster. The linkerd inject command adds annotations to the pod spec\\ninstructing Linkerd to add (\\u201Cinject\\u201D) the proxy as a container to the pod spec.\"), mdx(\"p\", null, \"You've now added Linkerd to existing services! Just as with the control plane, it\\nis possible to verify that everything worked the way it should with the data plane.\\nTo do this check, run:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"linkerd -n emojivoto check --proxy\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"chapterTitle":"Deploy a sample application","description":"Meshery, collaborative Kubernetes manager"},"fields":{"slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/linkerd/deploy-an-application","course":"introduction-to-service-meshes","learnpath":"mastering-service-meshes-for-developers","chapter":"deploy-an-application"}},"course":{"nodes":[{"frontmatter":{"courseTitle":"Introduction to Service Meshes - Hands On","meshesYouLearn":[{"imagepath":{"childImageSharp":null,"extension":"svg","publicURL":"/static/731763d720780a49c2ffdfede8c28f4b/istio.svg"},"name":"Istio"},{"imagepath":{"childImageSharp":null,"extension":"svg","publicURL":"/static/b4f4020971de42f6fb2497075a67f325/linkerd.svg"},"name":"Linkerd"}]},"fields":{"slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes"}}]},"TOC":{"nodes":[{"frontmatter":{"order":8,"chapterTitle":"Circuit Breaking"},"fields":{"section":"istio","chapter":"circuit-breaking"}},{"frontmatter":{"order":9,"chapterTitle":"Conclusion"},"fields":{"section":"istio","chapter":"conclusion"}},{"frontmatter":{"order":2,"chapterTitle":"Deploy a sample application"},"fields":{"section":"istio","chapter":"deploy-an-application"}},{"frontmatter":{"order":3,"chapterTitle":"Exposing services through Istio Ingress Gateway"},"fields":{"section":"istio","chapter":"expose-services"}},{"frontmatter":{"order":6,"chapterTitle":"Fault Injection"},"fields":{"section":"istio","chapter":"fault-injection"}},{"frontmatter":{"order":1,"chapterTitle":"Getting Started"},"fields":{"section":"istio","chapter":"getting-started"}},{"frontmatter":{"order":7,"chapterTitle":"Mutual TLS & Identity Verification"},"fields":{"section":"istio","chapter":"mutual-tls"}},{"frontmatter":{"order":4,"chapterTitle":"Observability"},"fields":{"section":"istio","chapter":"observability"}},{"frontmatter":{"order":5,"chapterTitle":"Request Routing and Canary Testing"},"fields":{"section":"istio","chapter":"routing-and-canary"}},{"frontmatter":{"order":9,"chapterTitle":"Conclusion"},"fields":{"section":"linkerd","chapter":"conclusion"}},{"frontmatter":{"order":4,"chapterTitle":"Linkerd Dashboard"},"fields":{"section":"linkerd","chapter":"dashboard"}},{"frontmatter":{"order":5,"chapterTitle":"Debugging (Optional)"},"fields":{"section":"linkerd","chapter":"debugging"}},{"frontmatter":{"order":2,"chapterTitle":"Deploy a sample application"},"fields":{"section":"linkerd","chapter":"deploy-an-application"}},{"frontmatter":{"order":3,"chapterTitle":"Exposing services through Linkerd Ingress"},"fields":{"section":"linkerd","chapter":"expose-services"}},{"frontmatter":{"order":8,"chapterTitle":"Fault Injection"},"fields":{"section":"linkerd","chapter":"fault-injection"}},{"frontmatter":{"order":1,"chapterTitle":"Getting Started"},"fields":{"section":"linkerd","chapter":"getting-started"}},{"frontmatter":{"order":6,"chapterTitle":"Observability"},"fields":{"section":"linkerd","chapter":"observability"}},{"frontmatter":{"order":7,"chapterTitle":"Traffic Splitting using SMI and Linkerd"},"fields":{"section":"linkerd","chapter":"traffic-splitting"}}]},"serviceMeshesList":{"nodes":[{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"istio"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}},{"fields":{"section":"linkerd"}}]}},"pageContext":{"learnpath":"mastering-service-meshes-for-developers","slug":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/linkerd/deploy-an-application","course":"introduction-to-service-meshes","section":"linkerd","chapter":"deploy-an-application","pageType":"chapter"}},"staticQueryHashes":["3750885592","4047814605"],"slicesMap":{},"matchPath":"learn/learning-paths/mastering-service-meshes-for-developers/introduction-to-service-meshes/linkerd/deploy-an-application"}